{
  "api/Fonts/SixLabors.Fonts.ColorFontSupport.html": {
    "href": "api/Fonts/SixLabors.Fonts.ColorFontSupport.html",
    "title": "Enum ColorFontSupport",
    "keywords": "Enum ColorFontSupport Options for enabling color font support during layout and rendering. Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public enum ColorFontSupport : int Fields Name Description MicrosoftColrFormat Render using glyphs accessed via Micropsfts COLR/CPAL table extensions to OpenType None Don't try rendering color glyphs at all"
  },
  "api/Fonts/SixLabors.Fonts.Exceptions.FontException.html": {
    "href": "api/Fonts/SixLabors.Fonts.Exceptions.FontException.html",
    "title": "Class FontException",
    "keywords": "Class FontException Base class for exceptions thrown by this library. Inheritance Object FontException FontFamilyNotFoundException GlyphMissingException Namespace : SixLabors.Fonts.Exceptions Assembly : SixLabors.Fonts.dll Syntax public class FontException : Exception Constructors | Improve this Doc View Source FontException(String) Initializes a new instance of the FontException class. Declaration public FontException(string message) Parameters Type Name Description String message The message that describes the error."
  },
  "api/Fonts/SixLabors.Fonts.Exceptions.FontFamilyNotFoundException.html": {
    "href": "api/Fonts/SixLabors.Fonts.Exceptions.FontFamilyNotFoundException.html",
    "title": "Class FontFamilyNotFoundException",
    "keywords": "Class FontFamilyNotFoundException Execption for detailing missing font familys. Inheritance Object FontException FontFamilyNotFoundException Namespace : SixLabors.Fonts.Exceptions Assembly : SixLabors.Fonts.dll Syntax public class FontFamilyNotFoundException : FontException Constructors | Improve this Doc View Source FontFamilyNotFoundException(String) Initializes a new instance of the FontFamilyNotFoundException class. Declaration public FontFamilyNotFoundException(string family) Parameters Type Name Description String family The name of the missing font family. Properties | Improve this Doc View Source FontFamily Gets the name of the font familiy we failed to find. Declaration public string FontFamily { get; } Property Value Type Description String See Also FontException"
  },
  "api/Fonts/SixLabors.Fonts.Exceptions.GlyphMissingException.html": {
    "href": "api/Fonts/SixLabors.Fonts.Exceptions.GlyphMissingException.html",
    "title": "Class GlyphMissingException",
    "keywords": "Class GlyphMissingException Execption for detailing missing font familys. Inheritance Object FontException GlyphMissingException Namespace : SixLabors.Fonts.Exceptions Assembly : SixLabors.Fonts.dll Syntax public class GlyphMissingException : FontException Constructors | Improve this Doc View Source GlyphMissingException(Int32) Initializes a new instance of the GlyphMissingException class. Declaration public GlyphMissingException(int codePoint) Parameters Type Name Description Int32 codePoint The code point for the glyph we where unable to find. See Also FontException"
  },
  "api/Fonts/SixLabors.Fonts.Exceptions.html": {
    "href": "api/Fonts/SixLabors.Fonts.Exceptions.html",
    "title": "Namespace SixLabors.Fonts.Exceptions",
    "keywords": "Namespace SixLabors.Fonts.Exceptions Classes FontException Base class for exceptions thrown by this library. FontFamilyNotFoundException Execption for detailing missing font familys. GlyphMissingException Execption for detailing missing font familys. InvalidFontFileException Exception font loading can throw if it encounteres invalid data during font loading. InvalidFontTableException Exception font loading can throw if it encounteres invalid data during font loading. MissingFontTableException Exception font loading can throw if it finds a required table is missing during font loading."
  },
  "api/Fonts/SixLabors.Fonts.Exceptions.InvalidFontFileException.html": {
    "href": "api/Fonts/SixLabors.Fonts.Exceptions.InvalidFontFileException.html",
    "title": "Class InvalidFontFileException",
    "keywords": "Class InvalidFontFileException Exception font loading can throw if it encounteres invalid data during font loading. Inheritance Object InvalidFontFileException InvalidFontTableException MissingFontTableException Namespace : SixLabors.Fonts.Exceptions Assembly : SixLabors.Fonts.dll Syntax public class InvalidFontFileException : Exception Constructors | Improve this Doc View Source InvalidFontFileException(String) Initializes a new instance of the InvalidFontFileException class. Declaration public InvalidFontFileException(string message) Parameters Type Name Description String message The message that describes the error."
  },
  "api/Fonts/SixLabors.Fonts.Exceptions.InvalidFontTableException.html": {
    "href": "api/Fonts/SixLabors.Fonts.Exceptions.InvalidFontTableException.html",
    "title": "Class InvalidFontTableException",
    "keywords": "Class InvalidFontTableException Exception font loading can throw if it encounteres invalid data during font loading. Inheritance Object InvalidFontFileException InvalidFontTableException Namespace : SixLabors.Fonts.Exceptions Assembly : SixLabors.Fonts.dll Syntax public class InvalidFontTableException : InvalidFontFileException Constructors | Improve this Doc View Source InvalidFontTableException(String, String) Initializes a new instance of the InvalidFontTableException class. Declaration public InvalidFontTableException(string message, string table) Parameters Type Name Description String message The message that describes the error. String table The table. Properties | Improve this Doc View Source Table Gets the table where the error originated. Declaration public string Table { get; } Property Value Type Description String"
  },
  "api/Fonts/SixLabors.Fonts.Exceptions.MissingFontTableException.html": {
    "href": "api/Fonts/SixLabors.Fonts.Exceptions.MissingFontTableException.html",
    "title": "Class MissingFontTableException",
    "keywords": "Class MissingFontTableException Exception font loading can throw if it finds a required table is missing during font loading. Inheritance Object InvalidFontFileException MissingFontTableException Namespace : SixLabors.Fonts.Exceptions Assembly : SixLabors.Fonts.dll Syntax public class MissingFontTableException : InvalidFontFileException Constructors | Improve this Doc View Source MissingFontTableException(String, String) Initializes a new instance of the MissingFontTableException class. Declaration public MissingFontTableException(string message, string table) Parameters Type Name Description String message The message that describes the error. String table The table. Properties | Improve this Doc View Source Table Gets the table where the error originated. Declaration public string Table { get; } Property Value Type Description String"
  },
  "api/Fonts/SixLabors.Fonts.Font.html": {
    "href": "api/Fonts/SixLabors.Fonts.Font.html",
    "title": "Class Font",
    "keywords": "Class Font Defines a particular format for text, including font face, size, and style attributes. This class cannot be inherited. Inheritance Object Font Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public sealed class Font : object Constructors | Improve this Doc View Source Font(Font, FontStyle) Initializes a new instance of the Font class. Declaration public Font(Font prototype, FontStyle style) Parameters Type Name Description Font prototype The prototype. FontStyle style The style. | Improve this Doc View Source Font(Font, Single) Initializes a new instance of the Font class. Declaration public Font(Font prototype, float size) Parameters Type Name Description Font prototype The prototype. Single size The size. | Improve this Doc View Source Font(Font, Single, FontStyle) Initializes a new instance of the Font class. Declaration public Font(Font prototype, float size, FontStyle style) Parameters Type Name Description Font prototype The prototype. Single size The size. FontStyle style The style. | Improve this Doc View Source Font(FontFamily, Single) Initializes a new instance of the Font class. Declaration public Font(FontFamily family, float size) Parameters Type Name Description FontFamily family The family. Single size The size. | Improve this Doc View Source Font(FontFamily, Single, FontStyle) Initializes a new instance of the Font class. Declaration public Font(FontFamily family, float size, FontStyle style) Parameters Type Name Description FontFamily family The family. Single size The size. FontStyle style The style. Properties | Improve this Doc View Source Ascender Gets the ascender (from the OS/2 table field TypoAscender ). Declaration public short Ascender { get; } Property Value Type Description Int16 | Improve this Doc View Source Bold Gets a value indicating whether this Font is bold. Declaration public bool Bold { get; } Property Value Type Description Boolean true if bold; otherwise, false . | Improve this Doc View Source Descender Gets the descender (from the OS/2 table field TypoDescender ). Declaration public short Descender { get; } Property Value Type Description Int16 | Improve this Doc View Source EmSize Gets the size of the em. Declaration public ushort EmSize { get; } Property Value Type Description UInt16 The size of the em. | Improve this Doc View Source Family Gets the family. Declaration public FontFamily Family { get; } Property Value Type Description FontFamily The family. | Improve this Doc View Source Instance Gets the font instance. Declaration public IFontInstance Instance { get; } Property Value Type Description IFontInstance The font instance. | Improve this Doc View Source Italic Gets a value indicating whether this Font is italic. Declaration public bool Italic { get; } Property Value Type Description Boolean true if italic; otherwise, false . | Improve this Doc View Source LineGap Gets the line gap (from the OS/2 table field TypoLineGap ). Declaration public short LineGap { get; } Property Value Type Description Int16 | Improve this Doc View Source LineHeight Gets the line height. Declaration public int LineHeight { get; } Property Value Type Description Int32 | Improve this Doc View Source Name Gets the name. Declaration public string Name { get; } Property Value Type Description String The name. | Improve this Doc View Source Size Gets the size. Declaration public float Size { get; } Property Value Type Description Single The size. Methods | Improve this Doc View Source GetGlyph(Int32) Gets the glyph. Declaration public Glyph GetGlyph(int codePoint) Parameters Type Name Description Int32 codePoint The code point of the character. Returns Type Description Glyph Returns the glyph"
  },
  "api/Fonts/SixLabors.Fonts.FontCollection.html": {
    "href": "api/Fonts/SixLabors.Fonts.FontCollection.html",
    "title": "Class FontCollection",
    "keywords": "Class FontCollection Provides a collection of fonts. Inheritance Object FontCollection Implements IFontCollection IReadOnlyFontCollection Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public sealed class FontCollection : object, IFontCollection, IReadOnlyFontCollection Constructors | Improve this Doc View Source FontCollection() Initializes a new instance of the FontCollection class. Declaration public FontCollection() Properties | Improve this Doc View Source Families Gets the collection of FontFamily objects associated with this FontCollection in the invariant culture. Declaration public IEnumerable<FontFamily> Families { get; } Property Value Type Description IEnumerable < FontFamily > The families. Methods | Improve this Doc View Source FamiliesByCulture(CultureInfo) Gets the collection of FontFamily objects associated with this FontCollection . Declaration public IEnumerable<FontFamily> FamiliesByCulture(CultureInfo culture) Parameters Type Name Description CultureInfo culture The culture to use while getting the family name from the installed set of fonts. Returns Type Description IEnumerable < FontFamily > The set of fonts families using the fonts culture aware font name | Improve this Doc View Source Find(String) Finds the specified font family using the invariant culture font family name. Declaration public FontFamily Find(string fontFamily) Parameters Type Name Description String fontFamily The font family. Returns Type Description FontFamily The family if installed otherwise throws FontFamilyNotFoundException | Improve this Doc View Source Find(String, CultureInfo) Finds the specified font family. Declaration public FontFamily Find(string fontFamily, CultureInfo culture) Parameters Type Name Description String fontFamily The font family. CultureInfo culture The culture to use while getting the family name from the installed set of fonts. Returns Type Description FontFamily The family if installed otherwise throws FontFamilyNotFoundException | Improve this Doc View Source Install(Stream) Installs the specified font stream. Declaration public FontFamily Install(Stream fontStream) Parameters Type Name Description Stream fontStream The font stream. Returns Type Description FontFamily the description of the font just loaded. | Improve this Doc View Source Install(Stream, CultureInfo) Installs the specified font stream. Declaration public FontFamily Install(Stream fontStream, CultureInfo culture) Parameters Type Name Description Stream fontStream The font stream. CultureInfo culture The culture of the retuend font family Returns Type Description FontFamily the description of the font just loaded. | Improve this Doc View Source Install(Stream, CultureInfo, out FontDescription) Installs the specified font stream. Declaration public FontFamily Install(Stream fontStream, CultureInfo culture, out FontDescription fontDescription) Parameters Type Name Description Stream fontStream The font stream. CultureInfo culture The culture of the retuend font family FontDescription fontDescription The font description of the installed font. Returns Type Description FontFamily the description of the font just loaded. | Improve this Doc View Source Install(Stream, out FontDescription) Installs the specified font stream. Declaration public FontFamily Install(Stream fontStream, out FontDescription fontDescription) Parameters Type Name Description Stream fontStream The font stream. FontDescription fontDescription The font description of the installed font. Returns Type Description FontFamily the description of the font just loaded. | Improve this Doc View Source Install(String) Installs a font from the specified path. Declaration public FontFamily Install(string path) Parameters Type Name Description String path The path. Returns Type Description FontFamily the description of the font just loaded. | Improve this Doc View Source Install(String, CultureInfo) Installs a font from the specified path. Declaration public FontFamily Install(string path, CultureInfo culture) Parameters Type Name Description String path The path. CultureInfo culture The culture of the retuend font family Returns Type Description FontFamily the description of the font just loaded. | Improve this Doc View Source Install(String, CultureInfo, out FontDescription) Installs a font from the specified path. Declaration public FontFamily Install(string path, CultureInfo culture, out FontDescription fontDescription) Parameters Type Name Description String path The path. CultureInfo culture The culture of the retuend font family FontDescription fontDescription The font description of the installed font. Returns Type Description FontFamily the description of the font just loaded. | Improve this Doc View Source Install(String, out FontDescription) Installs a font from the specified path. Declaration public FontFamily Install(string path, out FontDescription fontDescription) Parameters Type Name Description String path The path. FontDescription fontDescription The font description of the installed font. Returns Type Description FontFamily the description of the font just loaded. | Improve this Doc View Source InstallCollection(Stream, CultureInfo, out IEnumerable<FontDescription>) Installs a true type font collection (.ttc) from the specified font collection stream. Declaration public IEnumerable<FontFamily> InstallCollection(Stream fontCollectionStream, CultureInfo culture, out IEnumerable<FontDescription> fontDescriptions) Parameters Type Name Description Stream fontCollectionStream The font stream. CultureInfo culture The culture of the retuend font families IEnumerable < FontDescription > fontDescriptions The descriptions of fonts installed from the collection. Returns Type Description IEnumerable < FontFamily > The font descriptions of the installed fonts. | Improve this Doc View Source InstallCollection(Stream, out IEnumerable<FontDescription>) Installs a true type font collection (.ttc) from the specified font collection stream. Declaration public IEnumerable<FontFamily> InstallCollection(Stream fontCollectionStream, out IEnumerable<FontDescription> fontDescriptions) Parameters Type Name Description Stream fontCollectionStream The font stream. IEnumerable < FontDescription > fontDescriptions The descriptions of fonts installed from the collection. Returns Type Description IEnumerable < FontFamily > The font descriptions of the installed fonts. | Improve this Doc View Source InstallCollection(String) Installs a true type font collection (.ttc) from the specified font collection stream. Declaration public IEnumerable<FontFamily> InstallCollection(string fontCollectionPath) Parameters Type Name Description String fontCollectionPath The font collection path (should be typically a .ttc file like simsun.ttc). Returns Type Description IEnumerable < FontFamily > The font descriptions of the installed fonts. | Improve this Doc View Source InstallCollection(String, CultureInfo) Installs a true type font collection (.ttc) from the specified font collection stream. Declaration public IEnumerable<FontFamily> InstallCollection(string fontCollectionPath, CultureInfo culture) Parameters Type Name Description String fontCollectionPath The font collection path (should be typically a .ttc file like simsun.ttc). CultureInfo culture The culture of the retuend font families Returns Type Description IEnumerable < FontFamily > The font descriptions of the installed fonts. | Improve this Doc View Source InstallCollection(String, CultureInfo, out IEnumerable<FontDescription>) Installs a true type font collection (.ttc) from the specified font collection stream. Declaration public IEnumerable<FontFamily> InstallCollection(string fontCollectionPath, CultureInfo culture, out IEnumerable<FontDescription> fontDescriptions) Parameters Type Name Description String fontCollectionPath The font collection path (should be typically a .ttc file like simsun.ttc). CultureInfo culture The culture of the retuend font families IEnumerable < FontDescription > fontDescriptions The descriptions of fonts installed from the collection. Returns Type Description IEnumerable < FontFamily > The font descriptions of the installed fonts. | Improve this Doc View Source InstallCollection(String, out IEnumerable<FontDescription>) Installs a true type font collection (.ttc) from the specified font collection stream. Declaration public IEnumerable<FontFamily> InstallCollection(string fontCollectionPath, out IEnumerable<FontDescription> fontDescriptions) Parameters Type Name Description String fontCollectionPath The font collection path (should be typically a .ttc file like simsun.ttc). IEnumerable < FontDescription > fontDescriptions The descriptions of fonts installed from the collection. Returns Type Description IEnumerable < FontFamily > The font descriptions of the installed fonts. | Improve this Doc View Source TryFind(String, CultureInfo, out FontFamily) Finds the specified font family. Declaration public bool TryFind(string fontFamily, CultureInfo culture, out FontFamily family) Parameters Type Name Description String fontFamily The font family to find. CultureInfo culture The culture to use while getting the family name from the installed set of fonts. FontFamily family The found family. Returns Type Description Boolean true if a font of that family has been installed into the font collection. | Improve this Doc View Source TryFind(String, out FontFamily) Finds the specified font family using the invariant culture font family name. Declaration public bool TryFind(string fontFamily, out FontFamily family) Parameters Type Name Description String fontFamily The font family to find. FontFamily family The found family. Returns Type Description Boolean true if a font of that family has been installed into the font collection. Implements IFontCollection IReadOnlyFontCollection"
  },
  "api/Fonts/SixLabors.Fonts.FontDescription.html": {
    "href": "api/Fonts/SixLabors.Fonts.FontDescription.html",
    "title": "Class FontDescription",
    "keywords": "Class FontDescription provide metadata about a font. Inheritance Object FontDescription Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public class FontDescription : object Properties | Improve this Doc View Source FontFamilyInvariantCulture Gets the name of the font family in the invariant culture. Declaration public string FontFamilyInvariantCulture { get; } Property Value Type Description String The font name | Improve this Doc View Source FontNameInvariantCulture Gets the name of the font in the invariant culture. Declaration public string FontNameInvariantCulture { get; } Property Value Type Description String The font name | Improve this Doc View Source FontSubFamilyNameInvariantCulture Gets the font sub family in the invariant culture. Declaration public string FontSubFamilyNameInvariantCulture { get; } Property Value Type Description String The font sub family name | Improve this Doc View Source Style Gets the style. Declaration public FontStyle Style { get; } Property Value Type Description FontStyle The style. Methods | Improve this Doc View Source FontFamily(CultureInfo) Gets the name of the font family . Declaration public string FontFamily(CultureInfo culture) Parameters Type Name Description CultureInfo culture The culture to load metadata in. Returns Type Description String The font family name | Improve this Doc View Source FontName(CultureInfo) Gets the name of the font. Declaration public string FontName(CultureInfo culture) Parameters Type Name Description CultureInfo culture The culture to load metadata in. Returns Type Description String The font name | Improve this Doc View Source FontSubFamilyName(CultureInfo) Gets the font sub family. Declaration public string FontSubFamilyName(CultureInfo culture) Parameters Type Name Description CultureInfo culture The culture to load metadata in. Returns Type Description String The font sub family name | Improve this Doc View Source LoadDescription(Stream) Reads a FontDescription from the specified stream. Declaration public static FontDescription LoadDescription(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description FontDescription a FontDescription . | Improve this Doc View Source LoadDescription(String) Reads a FontDescription from the specified stream. Declaration public static FontDescription LoadDescription(string path) Parameters Type Name Description String path The file path. Returns Type Description FontDescription a FontDescription . | Improve this Doc View Source LoadFontCollectionDescriptions(Stream) Reads all the FontDescription s from the specified stream (typically a .ttc file like simsun.ttc). Declaration public static FontDescription[] LoadFontCollectionDescriptions(Stream stream) Parameters Type Name Description Stream stream The stream to read the font collection from. Returns Type Description FontDescription [] a FontDescription . | Improve this Doc View Source LoadFontCollectionDescriptions(String) Reads all the FontDescription s from the file at the specified path (typically a .ttc file like simsun.ttc). Declaration public static FontDescription[] LoadFontCollectionDescriptions(string path) Parameters Type Name Description String path The file path. Returns Type Description FontDescription [] a FontDescription ."
  },
  "api/Fonts/SixLabors.Fonts.FontFamily.html": {
    "href": "api/Fonts/SixLabors.Fonts.FontFamily.html",
    "title": "Class FontFamily",
    "keywords": "Class FontFamily Defines a group of type faces having a similar basic design and certain variations in styles. This class cannot be inherited. Inheritance Object FontFamily Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public sealed class FontFamily : object Properties | Improve this Doc View Source AvailableStyles Gets the available FontStyle that are currently available. Declaration public IEnumerable<FontStyle> AvailableStyles { get; } Property Value Type Description IEnumerable < FontStyle > The available styles. | Improve this Doc View Source Culture Gets the culture this FontFamily was created against. Declaration public CultureInfo Culture { get; } Property Value Type Description CultureInfo The name. | Improve this Doc View Source Name Gets the name of the FontFamily . Declaration public string Name { get; } Property Value Type Description String The name. Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source IsStyleAvailable(FontStyle) Determines whether the specified FontStyle is available. Declaration public bool IsStyleAvailable(FontStyle style) Parameters Type Name Description FontStyle style The style. Returns Type Description Boolean true if the specified FontStyle is available; otherwise, false . | Improve this Doc View Source ToString() Returns a that represents this instance. Declaration public override string ToString() Returns Type Description String A that represents this instance. Operators | Improve this Doc View Source Equality(FontFamily, FontFamily) Compares two FontFamily objects for equality. Declaration public static bool operator ==(FontFamily left, FontFamily right) Parameters Type Name Description FontFamily left The FontFamily on the left side of the operand. FontFamily right The FontFamily on the right side of the operand. Returns Type Description Boolean True if the current left is equal to the right parameter; otherwise, false. | Improve this Doc View Source Inequality(FontFamily, FontFamily) Compares two FontRectangle objects for inequality. Declaration public static bool operator !=(FontFamily left, FontFamily right) Parameters Type Name Description FontFamily left The FontRectangle on the left side of the operand. FontFamily right The FontRectangle on the right side of the operand. Returns Type Description Boolean True if the current left is unequal to the right parameter; otherwise, false. Extension Methods FontFamilyCollectionExtensions.CreateFont(FontFamily, Single, FontStyle) FontFamilyCollectionExtensions.CreateFont(FontFamily, Single)"
  },
  "api/Fonts/SixLabors.Fonts.FontFamilyCollectionExtensions.html": {
    "href": "api/Fonts/SixLabors.Fonts.FontFamilyCollectionExtensions.html",
    "title": "Class FontFamilyCollectionExtensions",
    "keywords": "Class FontFamilyCollectionExtensions A readonly collection of fonts. Inheritance Object FontFamilyCollectionExtensions Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public static class FontFamilyCollectionExtensions : object Methods | Improve this Doc View Source CreateFont(FontFamily, Single) Create a new instance of the Font for the named font family with regular styling. Declaration public static Font CreateFont(this FontFamily fontFamily, float size) Parameters Type Name Description FontFamily fontFamily The family. Single size The size. Returns Type Description Font Returns instance of the Font from the current collection. | Improve this Doc View Source CreateFont(FontFamily, Single, FontStyle) Create a new instance of the Font for the named font family. Declaration public static Font CreateFont(this FontFamily fontFamily, float size, FontStyle style) Parameters Type Name Description FontFamily fontFamily The family. Single size The size. FontStyle style The style. Returns Type Description Font Returns instance of the Font from the current collection."
  },
  "api/Fonts/SixLabors.Fonts.FontInstance.html": {
    "href": "api/Fonts/SixLabors.Fonts.FontInstance.html",
    "title": "Class FontInstance",
    "keywords": "Class FontInstance provide metadata about a font. Inheritance Object FontInstance Implements IFontInstance Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public class FontInstance : object, IFontInstance Properties | Improve this Doc View Source Ascender Gets the ascender. Declaration public short Ascender { get; } Property Value Type Description Int16 | Improve this Doc View Source Descender Gets the descender. Declaration public short Descender { get; } Property Value Type Description Int16 | Improve this Doc View Source Description Gets the basic descripton of the font instance type. Declaration public FontDescription Description { get; } Property Value Type Description FontDescription | Improve this Doc View Source EmSize Gets the size of the em. Declaration public ushort EmSize { get; } Property Value Type Description UInt16 The size of the em. | Improve this Doc View Source LineGap Gets the line gap. Declaration public short LineGap { get; } Property Value Type Description Int16 | Improve this Doc View Source LineHeight Gets the height of the line. Declaration public int LineHeight { get; } Property Value Type Description Int32 The height of the line. Methods | Improve this Doc View Source LoadFont(Stream) Reads a FontInstance from the specified stream. Declaration public static FontInstance LoadFont(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description FontInstance a FontInstance . | Improve this Doc View Source LoadFont(String) Reads a FontInstance from the specified stream. Declaration public static FontInstance LoadFont(string path) Parameters Type Name Description String path The file path. Returns Type Description FontInstance a FontInstance . | Improve this Doc View Source LoadFont(String, Int64) Reads a FontInstance from the specified stream. Declaration public static FontInstance LoadFont(string path, long offset) Parameters Type Name Description String path The file path. Int64 offset Position in the stream to read the font from. Returns Type Description FontInstance a FontInstance . | Improve this Doc View Source LoadFontCollection(Stream) Reads a FontInstance from the specified stream. Declaration public static FontInstance[] LoadFontCollection(Stream stream) Parameters Type Name Description Stream stream The stream. Returns Type Description FontInstance [] a FontInstance . | Improve this Doc View Source LoadFontCollection(String) Reads a FontInstance from the specified stream. Declaration public static FontInstance[] LoadFontCollection(string path) Parameters Type Name Description String path The file path. Returns Type Description FontInstance [] a FontInstance . Explicit Interface Implementations | Improve this Doc View Source IFontInstance.GetGlyph(Int32) Gets the glyph. Declaration GlyphInstance IFontInstance.GetGlyph(int codePoint) Parameters Type Name Description Int32 codePoint The code point of the character. Returns Type Description GlyphInstance the glyph for a known character. | Improve this Doc View Source IFontInstance.GetOffset(GlyphInstance, GlyphInstance) Gets the amount the glyph should be ofset if it was proceeded by the previousGlyph . Declaration Vector2 IFontInstance.GetOffset(GlyphInstance glyph, GlyphInstance previousGlyph) Parameters Type Name Description GlyphInstance glyph The glyph. GlyphInstance previousGlyph The previous glyph. Returns Type Description Vector2 A represting the offset that should be applied to the glyph . Implements IFontInstance"
  },
  "api/Fonts/SixLabors.Fonts.FontRectangle.html": {
    "href": "api/Fonts/SixLabors.Fonts.FontRectangle.html",
    "title": "Struct FontRectangle",
    "keywords": "Struct FontRectangle Stores a set of four single precision floating points that represent the location and size of a rectangle. Implements IEquatable < FontRectangle > Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public struct FontRectangle : IEquatable<FontRectangle> Remarks This struct is fully mutable. This is done (against the guidelines) for the sake of performance, as it avoids the need to create new values for modification operations. Constructors | Improve this Doc View Source FontRectangle(Single, Single, Single, Single) Initializes a new instance of the FontRectangle struct. Declaration public FontRectangle(float x, float y, float width, float height) Parameters Type Name Description Single x The horizontal position of the rectangle. Single y The vertical position of the rectangle. Single width The width of the rectangle. Single height The height of the rectangle. Fields | Improve this Doc View Source Empty Represents a FontRectangle that has X, Y, Width, and Height values set to zero. Declaration public static readonly FontRectangle Empty Field Value Type Description FontRectangle Properties | Improve this Doc View Source Bottom Gets the y-coordinate of the bottom edge of this FontRectangle . Declaration public float Bottom { get; } Property Value Type Description Single | Improve this Doc View Source Height Gets the height of this FontRectangle . Declaration public float Height { get; } Property Value Type Description Single | Improve this Doc View Source IsEmpty Gets a value indicating whether this FontRectangle is empty. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Left Gets the x-coordinate of the left edge of this FontRectangle . Declaration public float Left { get; } Property Value Type Description Single | Improve this Doc View Source Location Gets the coordinates of the upper-left corner of the rectangular region represented by this FontRectangle . Declaration public Vector2 Location { get; } Property Value Type Description Vector2 | Improve this Doc View Source Right Gets the x-coordinate of the right edge of this FontRectangle . Declaration public float Right { get; } Property Value Type Description Single | Improve this Doc View Source Size Gets the size of this FontRectangle . Declaration public Vector2 Size { get; } Property Value Type Description Vector2 | Improve this Doc View Source Top Gets the y-coordinate of the top edge of this FontRectangle . Declaration public float Top { get; } Property Value Type Description Single | Improve this Doc View Source Width Gets the width of this FontRectangle . Declaration public float Width { get; } Property Value Type Description Single | Improve this Doc View Source X Gets the x-coordinate of this FontRectangle . Declaration public float X { get; } Property Value Type Description Single | Improve this Doc View Source Y Gets the y-coordinate of this FontRectangle . Declaration public float Y { get; } Property Value Type Description Single Methods | Improve this Doc View Source Center(FontRectangle) Returns the center point of the given FontRectangle . Declaration public static Vector2 Center(FontRectangle rectangle) Parameters Type Name Description FontRectangle rectangle The rectangle. Returns Type Description Vector2 The . | Improve this Doc View Source Contains(FontRectangle) Determines if the rectangular region represented by rectangle is entirely contained within the rectangular region represented by this FontRectangle . Declaration public bool Contains(FontRectangle rectangle) Parameters Type Name Description FontRectangle rectangle The rectangle. Returns Type Description Boolean The . | Improve this Doc View Source Contains(Single, Single) Determines if the specfied point is contained within the rectangular region defined by this FontRectangle . Declaration public bool Contains(float x, float y) Parameters Type Name Description Single x The x-coordinate of the given point. Single y The y-coordinate of the given point. Returns Type Description Boolean The . | Improve this Doc View Source Contains(Vector2) Determines if the specified point is contained within the rectangular region defined by this FontRectangle . Declaration public bool Contains(Vector2 point) Parameters Type Name Description Vector2 point The point. Returns Type Description Boolean The . | Improve this Doc View Source Deconstruct(out Single, out Single, out Single, out Single) Deconstructs this rectangle into four floats. Declaration public void Deconstruct(out float x, out float y, out float width, out float height) Parameters Type Name Description Single x The out value for X. Single y The out value for Y. Single width The out value for the width. Single height The out value for the height. | Improve this Doc View Source Equals(FontRectangle) Declaration public bool Equals(FontRectangle other) Parameters Type Name Description FontRectangle other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source FromLTRB(Single, Single, Single, Single) Creates a new FontRectangle with the specified location and size. Declaration public static FontRectangle FromLTRB(float left, float top, float right, float bottom) Parameters Type Name Description Single left The left coordinate of the rectangle. Single top The top coordinate of the rectangle. Single right The right coordinate of the rectangle. Single bottom The bottom coordinate of the rectangle. Returns Type Description FontRectangle The FontRectangle . | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Inflate(FontRectangle, Single, Single) Creates a FontRectangle that is inflated by the specified amount. Declaration public static FontRectangle Inflate(FontRectangle rectangle, float x, float y) Parameters Type Name Description FontRectangle rectangle The rectangle. Single x The amount to inflate the width by. Single y The amount to inflate the height by. Returns Type Description FontRectangle A new FontRectangle . | Improve this Doc View Source Inflate(Single, Single) Inflates this FontRectangle by the specified amount. Declaration public FontRectangle Inflate(float width, float height) Parameters Type Name Description Single width The width. Single height The height. Returns Type Description FontRectangle New FontRectangle representing the inflated rectrangle | Improve this Doc View Source Inflate(Vector2) Inflates this FontRectangle by the specified amount. Declaration public FontRectangle Inflate(Vector2 size) Parameters Type Name Description Vector2 size The size. Returns Type Description FontRectangle New FontRectangle representing the inflated rectrangle | Improve this Doc View Source Intersect(FontRectangle) Creates a FontRectangle that represents the intersection between this FontRectangle and the rectangle . Declaration public FontRectangle Intersect(FontRectangle rectangle) Parameters Type Name Description FontRectangle rectangle The rectangle. Returns Type Description FontRectangle New FontRectangle representing the intersections between the two rectrangles. | Improve this Doc View Source Intersect(FontRectangle, FontRectangle) Creates a rectangle that represents the intersection between a and b . If there is no intersection, an empty rectangle is returned. Declaration public static FontRectangle Intersect(FontRectangle a, FontRectangle b) Parameters Type Name Description FontRectangle a The first rectangle. FontRectangle b The second rectangle. Returns Type Description FontRectangle The FontRectangle . | Improve this Doc View Source IntersectsWith(FontRectangle) Determines if the specfied FontRectangle intersects the rectangular region defined by this FontRectangle . Declaration public bool IntersectsWith(FontRectangle rectangle) Parameters Type Name Description FontRectangle rectangle The other Rectange. Returns Type Description Boolean The . | Improve this Doc View Source Offset(Single, Single) Adjusts the location of this rectangle by the specified amount. Declaration public FontRectangle Offset(float dx, float dy) Parameters Type Name Description Single dx The amount to offset the x-coordinate. Single dy The amount to offset the y-coordinate. Returns Type Description FontRectangle New FontRectangle representing the inflated rectrangle. | Improve this Doc View Source Offset(Vector2) Adjusts the location of this rectangle by the specified amount. Declaration public FontRectangle Offset(Vector2 point) Parameters Type Name Description Vector2 point The point. Returns Type Description FontRectangle New FontRectangle representing the offset rectrangle. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source Transform(FontRectangle, Matrix3x2) Transforms a rectangle by the given matrix. Declaration public static FontRectangle Transform(FontRectangle rectangle, Matrix3x2 matrix) Parameters Type Name Description FontRectangle rectangle The source rectangle. Matrix3x2 matrix The transformation matrix. Returns Type Description FontRectangle A transformed FontRectangle . | Improve this Doc View Source Union(FontRectangle, FontRectangle) Creates a rectangle that represents the union between a and b . Declaration public static FontRectangle Union(FontRectangle a, FontRectangle b) Parameters Type Name Description FontRectangle a The first rectangle. FontRectangle b The second rectangle. Returns Type Description FontRectangle The FontRectangle . Operators | Improve this Doc View Source Equality(FontRectangle, FontRectangle) Compares two FontRectangle objects for equality. Declaration public static bool operator ==(FontRectangle left, FontRectangle right) Parameters Type Name Description FontRectangle left The FontRectangle on the left side of the operand. FontRectangle right The FontRectangle on the right side of the operand. Returns Type Description Boolean True if the current left is equal to the right parameter; otherwise, false. | Improve this Doc View Source Inequality(FontRectangle, FontRectangle) Compares two FontRectangle objects for inequality. Declaration public static bool operator !=(FontRectangle left, FontRectangle right) Parameters Type Name Description FontRectangle left The FontRectangle on the left side of the operand. FontRectangle right The FontRectangle on the right side of the operand. Returns Type Description Boolean True if the current left is unequal to the right parameter; otherwise, false. Implements IEquatable<>"
  },
  "api/Fonts/SixLabors.Fonts.FontStyle.html": {
    "href": "api/Fonts/SixLabors.Fonts.FontStyle.html",
    "title": "Enum FontStyle",
    "keywords": "Enum FontStyle The font styles Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public enum FontStyle : int Fields Name Description Bold Bold BoldItalic Bold and Italic Italic Italic Regular Regular"
  },
  "api/Fonts/SixLabors.Fonts.Glyph.html": {
    "href": "api/Fonts/SixLabors.Fonts.Glyph.html",
    "title": "Struct Glyph",
    "keywords": "Struct Glyph A glyph from a particular font face. Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public struct Glyph Properties | Improve this Doc View Source Instance Gets the glyph instance. Declaration public GlyphInstance Instance { get; } Property Value Type Description GlyphInstance The glyph instance. Methods | Improve this Doc View Source BoundingBox(Vector2, Vector2) Calculates the bounding box Declaration public FontRectangle BoundingBox(Vector2 location, Vector2 dpi) Parameters Type Name Description Vector2 location location to calualte from. Vector2 dpi dpi to calualtes in relation to Returns Type Description FontRectangle The bounding box"
  },
  "api/Fonts/SixLabors.Fonts.GlyphColor.html": {
    "href": "api/Fonts/SixLabors.Fonts.GlyphColor.html",
    "title": "Struct GlyphColor",
    "keywords": "Struct GlyphColor Provides access to the the color details for the current glyph. Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public struct GlyphColor Properties | Improve this Doc View Source Alpha Gets the alpha component Declaration public byte Alpha { get; } Property Value Type Description Byte | Improve this Doc View Source Blue Gets the blue component Declaration public byte Blue { get; } Property Value Type Description Byte | Improve this Doc View Source Green Gets the green component Declaration public byte Green { get; } Property Value Type Description Byte | Improve this Doc View Source Red Gets the red component Declaration public byte Red { get; } Property Value Type Description Byte Methods | Improve this Doc View Source Equals(GlyphColor) Compares the GlyphColor for equality to this color. Declaration public bool Equals(GlyphColor other) Parameters Type Name Description GlyphColor other The other GlyphColor to compair to. Returns Type Description Boolean True if the current color is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Operators | Improve this Doc View Source Equality(GlyphColor, GlyphColor) Compares two GlyphColor objects for equality. Declaration public static bool operator ==(GlyphColor left, GlyphColor right) Parameters Type Name Description GlyphColor left The GlyphColor on the left side of the operand. GlyphColor right The GlyphColor on the right side of the operand. Returns Type Description Boolean True if the current left is equal to the right parameter; otherwise, false. | Improve this Doc View Source Inequality(GlyphColor, GlyphColor) Compares two GlyphColor objects for inequality. Declaration public static bool operator !=(GlyphColor left, GlyphColor right) Parameters Type Name Description GlyphColor left The GlyphColor on the left side of the operand. GlyphColor right The GlyphColor on the right side of the operand. Returns Type Description Boolean True if the current left is unequal to the right parameter; otherwise, false."
  },
  "api/Fonts/SixLabors.Fonts.GlyphInstance.html": {
    "href": "api/Fonts/SixLabors.Fonts.GlyphInstance.html",
    "title": "Class GlyphInstance",
    "keywords": "Class GlyphInstance A glyph from a particular font face. Inheritance Object GlyphInstance Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public class GlyphInstance : object Properties | Improve this Doc View Source AdvanceWidth Gets the width of the advance. Declaration public ushort AdvanceWidth { get; } Property Value Type Description UInt16 The width of the advance. | Improve this Doc View Source ControlPoints Gets the points defining the shape of this glyph Declaration public Vector2[] ControlPoints { get; } Property Value Type Description Vector2 [] | Improve this Doc View Source EndPoints Gets the end points Declaration public ushort[] EndPoints { get; } Property Value Type Description UInt16 [] | Improve this Doc View Source GlyphColor Gets the color of this glyph Declaration public GlyphColor? GlyphColor { get; } Property Value Type Description Nullable < GlyphColor > The color of the glyph when the GlyphType is ColrLayer | Improve this Doc View Source GlyphType Gets a value indicating the type of glyph instance this is. Declaration public GlyphType GlyphType { get; } Property Value Type Description GlyphType The type of this glyph | Improve this Doc View Source Height Gets the height. Declaration public float Height { get; } Property Value Type Description Single The height. | Improve this Doc View Source LeftSideBearing Gets the distance from the bounding box start Declaration public short LeftSideBearing { get; } Property Value Type Description Int16 | Improve this Doc View Source OnCurves Gets wether or not the corresponding control point is on a curve Declaration public bool[] OnCurves { get; } Property Value Type Description Boolean [] | Improve this Doc View Source ScaleFactor Gets the scale factor that is applied to the glyph Declaration public float ScaleFactor { get; } Property Value Type Description Single | Improve this Doc View Source SizeOfEm Gets the size of the EM Declaration public ushort SizeOfEm { get; } Property Value Type Description UInt16 Methods | Improve this Doc View Source RenderTo(IGlyphRenderer, Single, Vector2, Vector2, Single) Renders the glyph to the render surface in font units relative to a bottom left origin at (0,0) Declaration public void RenderTo(IGlyphRenderer surface, float pointSize, Vector2 location, Vector2 dpi, float lineHeight) Parameters Type Name Description IGlyphRenderer surface The surface. Single pointSize Size of the point. Vector2 location The location. Vector2 dpi The dpi. Single lineHeight The lineHeight the current glyph was draw agains to offset topLeft while calling out to IGlyphRenderer."
  },
  "api/Fonts/SixLabors.Fonts.GlyphMetric.html": {
    "href": "api/Fonts/SixLabors.Fonts.GlyphMetric.html",
    "title": "Struct GlyphMetric",
    "keywords": "Struct GlyphMetric Represents a Glyph metric. Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public struct GlyphMetric Constructors | Improve this Doc View Source GlyphMetric(Int32, FontRectangle, Boolean) Initializes a new instance of the GlyphMetric struct. Declaration public GlyphMetric(int codePoint, FontRectangle bounds, bool isControlCharacter) Parameters Type Name Description Int32 codePoint Unicode codepoint of the character. FontRectangle bounds The bounds. Boolean isControlCharacter Whether the character is a control character. Properties | Improve this Doc View Source Bounds Gets the character bounds. Declaration public FontRectangle Bounds { get; } Property Value Type Description FontRectangle | Improve this Doc View Source Character Gets the UTF-16 encoded character. Declaration public string Character { get; } Property Value Type Description String | Improve this Doc View Source Codepoint Gets the Unicode codepoint of the character. Declaration public int Codepoint { get; } Property Value Type Description Int32 | Improve this Doc View Source IsControlCharacter Gets a value indicating whether the character is a control character. Declaration public bool IsControlCharacter { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api/Fonts/SixLabors.Fonts.GlyphRendererParameters.html": {
    "href": "api/Fonts/SixLabors.Fonts.GlyphRendererParameters.html",
    "title": "Struct GlyphRendererParameters",
    "keywords": "Struct GlyphRendererParameters The combined set of properties that uniquely identify the glyph that is to be rendered at a particular size and dpi. Implements IEquatable < GlyphRendererParameters > Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public struct GlyphRendererParameters : IEquatable<GlyphRendererParameters> Properties | Improve this Doc View Source DpiX Gets the dpi along the X axis we are rendering at. Declaration public float DpiX { get; } Property Value Type Description Single | Improve this Doc View Source DpiY Gets the dpi along the Y axis we are rendering at. Declaration public float DpiY { get; } Property Value Type Description Single | Improve this Doc View Source Font Gets the name of the Font this glyph belongs to. Declaration public string Font { get; } Property Value Type Description String | Improve this Doc View Source FontStyle Gets the style of the Font this glyph belongs to. Declaration public FontStyle FontStyle { get; } Property Value Type Description FontStyle | Improve this Doc View Source GlyphColor Gets the type of this glyph. Declaration public GlyphColor GlyphColor { get; } Property Value Type Description GlyphColor | Improve this Doc View Source GlyphIndex Gets the index of the glyph. Declaration public ushort GlyphIndex { get; } Property Value Type Description UInt16 | Improve this Doc View Source GlyphType Gets the type of this glyph. Declaration public GlyphType GlyphType { get; } Property Value Type Description GlyphType | Improve this Doc View Source PointSize Gets the rendered point size. Declaration public float PointSize { get; } Property Value Type Description Single Methods | Improve this Doc View Source Equals(GlyphRendererParameters) Declaration public bool Equals(GlyphRendererParameters other) Parameters Type Name Description GlyphRendererParameters other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Operators | Improve this Doc View Source Equality(GlyphRendererParameters, GlyphRendererParameters) Compares two GlyphRendererParameters objects for equality. Declaration public static bool operator ==(GlyphRendererParameters left, GlyphRendererParameters right) Parameters Type Name Description GlyphRendererParameters left The GlyphRendererParameters on the left side of the operand. GlyphRendererParameters right The GlyphRendererParameters on the right side of the operand. Returns Type Description Boolean True if the current left is equal to the right parameter; otherwise, false. | Improve this Doc View Source Inequality(GlyphRendererParameters, GlyphRendererParameters) Compares two GlyphRendererParameters objects for inequality. Declaration public static bool operator !=(GlyphRendererParameters left, GlyphRendererParameters right) Parameters Type Name Description GlyphRendererParameters left The GlyphRendererParameters on the left side of the operand. GlyphRendererParameters right The GlyphRendererParameters on the right side of the operand. Returns Type Description Boolean True if the current left is unequal to the right parameter; otherwise, false. Implements IEquatable<>"
  },
  "api/Fonts/SixLabors.Fonts.GlyphType.html": {
    "href": "api/Fonts/SixLabors.Fonts.GlyphType.html",
    "title": "Enum GlyphType",
    "keywords": "Enum GlyphType Represents the various version of a glyph records. Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public enum GlyphType : int Fields Name Description ColrLayer This is a single layer of the multi-layer colored glyph (emoji). Fallback This is a fall back glyph due to a missing code point. Standard This is a standard glyph to be drawn in the style the user defines."
  },
  "api/Fonts/SixLabors.Fonts.HorizontalAlignment.html": {
    "href": "api/Fonts/SixLabors.Fonts.HorizontalAlignment.html",
    "title": "Enum HorizontalAlignment",
    "keywords": "Enum HorizontalAlignment Horizontal alignment modes. Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public enum HorizontalAlignment : int Fields Name Description Center Aligns text from the center. Left Aligns text from the left. Right Aligns text from the right."
  },
  "api/Fonts/SixLabors.Fonts.html": {
    "href": "api/Fonts/SixLabors.Fonts.html",
    "title": "Namespace SixLabors.Fonts",
    "keywords": "Namespace SixLabors.Fonts Classes Font Defines a particular format for text, including font face, size, and style attributes. This class cannot be inherited. FontCollection Provides a collection of fonts. FontDescription provide metadata about a font. FontFamily Defines a group of type faces having a similar basic design and certain variations in styles. This class cannot be inherited. FontFamilyCollectionExtensions A readonly collection of fonts. FontInstance provide metadata about a font. GlyphInstance A glyph from a particular font face. IGlyphRendererExtensions A surface that can have a glyph renered to it as a series of actions. IReadonlyFontCollectionExtensions A readonly collection of fonts. RendererOptions The font style to render onto a peice of text. SystemFonts Provides a collection of fonts. TextMeasurer Encapulated logic for laying out and measuring text. TextRenderer Encapulated logic for laying out and then rendering text to a IGlyphRenderer surface. Structs FontRectangle Stores a set of four single precision floating points that represent the location and size of a rectangle. Glyph A glyph from a particular font face. GlyphColor Provides access to the the color details for the current glyph. GlyphMetric Represents a Glyph metric. GlyphRendererParameters The combined set of properties that uniquely identify the glyph that is to be rendered at a particular size and dpi. Interfaces IColorGlyphRenderer A surface that can have a glyph rendered to it as a series of actions, where the engine support colored glyphs (emoji). IFontCollection A readable and writable collection of fonts. IFontInstance Represents a font instance, which is a set of glyphs under a specific style (regular, italic, bold etc) IGlyphRenderer A surface that can have a glyph renered to it as a series of actions. IReadOnlyFontCollection A readonly collection of fonts. Enums ColorFontSupport Options for enabling color font support during layout and rendering. FontStyle The font styles GlyphType Represents the various version of a glyph records. HorizontalAlignment Horizontal alignment modes. VerticalAlignment Vertial alignment modes."
  },
  "api/Fonts/SixLabors.Fonts.IColorGlyphRenderer.html": {
    "href": "api/Fonts/SixLabors.Fonts.IColorGlyphRenderer.html",
    "title": "Interface IColorGlyphRenderer",
    "keywords": "Interface IColorGlyphRenderer A surface that can have a glyph rendered to it as a series of actions, where the engine support colored glyphs (emoji). Inherited Members IGlyphRenderer.BeginFigure() IGlyphRenderer.MoveTo(Vector2) IGlyphRenderer.QuadraticBezierTo(Vector2, Vector2) IGlyphRenderer.CubicBezierTo(Vector2, Vector2, Vector2) IGlyphRenderer.LineTo(Vector2) IGlyphRenderer.EndFigure() IGlyphRenderer.EndGlyph() IGlyphRenderer.BeginGlyph(FontRectangle, GlyphRendererParameters) IGlyphRenderer.EndText() IGlyphRenderer.BeginText(FontRectangle) Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public interface IColorGlyphRenderer : IGlyphRenderer Methods | Improve this Doc View Source SetColor(GlyphColor) Sets the color to use for the current glyph. Declaration void SetColor(GlyphColor color) Parameters Type Name Description GlyphColor color The color to override the renders brush with. Extension Methods IGlyphRendererExtensions.Render(IGlyphRenderer, ReadOnlySpan<Char>, RendererOptions)"
  },
  "api/Fonts/SixLabors.Fonts.IFontCollection.html": {
    "href": "api/Fonts/SixLabors.Fonts.IFontCollection.html",
    "title": "Interface IFontCollection",
    "keywords": "Interface IFontCollection A readable and writable collection of fonts. Inherited Members IReadOnlyFontCollection.Families IReadOnlyFontCollection.FamiliesByCulture(CultureInfo) IReadOnlyFontCollection.Find(String, CultureInfo) IReadOnlyFontCollection.TryFind(String, CultureInfo, FontFamily) IReadOnlyFontCollection.Find(String) IReadOnlyFontCollection.TryFind(String, FontFamily) Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public interface IFontCollection : IReadOnlyFontCollection Methods | Improve this Doc View Source Install(Stream) Installs the specified font stream. Declaration FontFamily Install(Stream fontStream) Parameters Type Name Description Stream fontStream The font stream. Returns Type Description FontFamily the description of the font just loaded. Extension Methods IReadonlyFontCollectionExtensions.CreateFont(IReadOnlyFontCollection, String, Single, FontStyle) IReadonlyFontCollectionExtensions.CreateFont(IReadOnlyFontCollection, String, Single) IReadonlyFontCollectionExtensions.CreateFont(IReadOnlyFontCollection, String, CultureInfo, Single, FontStyle) IReadonlyFontCollectionExtensions.CreateFont(IReadOnlyFontCollection, String, CultureInfo, Single) See Also IReadOnlyFontCollection"
  },
  "api/Fonts/SixLabors.Fonts.IFontInstance.html": {
    "href": "api/Fonts/SixLabors.Fonts.IFontInstance.html",
    "title": "Interface IFontInstance",
    "keywords": "Interface IFontInstance Represents a font instance, which is a set of glyphs under a specific style (regular, italic, bold etc) Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public interface IFontInstance Properties | Improve this Doc View Source Ascender Gets the ascender Declaration short Ascender { get; } Property Value Type Description Int16 | Improve this Doc View Source Descender Gets the descender Declaration short Descender { get; } Property Value Type Description Int16 | Improve this Doc View Source Description Gets the basic descripton of the font instance type. Declaration FontDescription Description { get; } Property Value Type Description FontDescription | Improve this Doc View Source EmSize Gets the EM size of the font Declaration ushort EmSize { get; } Property Value Type Description UInt16 | Improve this Doc View Source LineGap Gets the line gap Declaration short LineGap { get; } Property Value Type Description Int16 | Improve this Doc View Source LineHeight Gets the line height Declaration int LineHeight { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetGlyph(Int32) Gets a specific glyph Declaration GlyphInstance GetGlyph(int codePoint) Parameters Type Name Description Int32 codePoint the code point to get the glyph from Returns Type Description GlyphInstance The glyph to find. | Improve this Doc View Source GetOffset(GlyphInstance, GlyphInstance) Get the kerning offset that should be applied between 2 glyphs. Declaration Vector2 GetOffset(GlyphInstance glyph, GlyphInstance previousGlyph) Parameters Type Name Description GlyphInstance glyph the new glyph GlyphInstance previousGlyph the previous glyph in the rendered font Returns Type Description Vector2 Returns the offset that should be offset between the 2 glyphs"
  },
  "api/Fonts/SixLabors.Fonts.IGlyphRenderer.html": {
    "href": "api/Fonts/SixLabors.Fonts.IGlyphRenderer.html",
    "title": "Interface IGlyphRenderer",
    "keywords": "Interface IGlyphRenderer A surface that can have a glyph renered to it as a series of actions. Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public interface IGlyphRenderer Methods | Improve this Doc View Source BeginFigure() Begins the figure. Declaration void BeginFigure() | Improve this Doc View Source BeginGlyph(FontRectangle, GlyphRendererParameters) Begins the glyph. Declaration bool BeginGlyph(FontRectangle bounds, GlyphRendererParameters paramaters) Parameters Type Name Description FontRectangle bounds The bounds the glyph will be rendered at and at what size. GlyphRendererParameters paramaters The set of paramaters that uniquely represents a version of a glyph in at particular font size, font family, font style and DPI. Returns Type Description Boolean Returns true if the glyph should be rendered othersie it returns false. | Improve this Doc View Source BeginText(FontRectangle) Called before any glyphs have been rendered. Declaration void BeginText(FontRectangle bounds) Parameters Type Name Description FontRectangle bounds The bounds the text will be rendered at and at whats size. | Improve this Doc View Source CubicBezierTo(Vector2, Vector2, Vector2) Draw a Cubics bezier curve connecting the previous point to point . Declaration void CubicBezierTo(Vector2 secondControlPoint, Vector2 thirdControlPoint, Vector2 point) Parameters Type Name Description Vector2 secondControlPoint The second control point. Vector2 thirdControlPoint The third control point. Vector2 point The point. | Improve this Doc View Source EndFigure() Ends the figure. Declaration void EndFigure() | Improve this Doc View Source EndGlyph() Ends the glyph. Declaration void EndGlyph() | Improve this Doc View Source EndText() Called once all glyphs have completed rendering Declaration void EndText() | Improve this Doc View Source LineTo(Vector2) Draw a straight line connecting the previous point to point . Declaration void LineTo(Vector2 point) Parameters Type Name Description Vector2 point The point. | Improve this Doc View Source MoveTo(Vector2) Sets a new start point to draw lines from Declaration void MoveTo(Vector2 point) Parameters Type Name Description Vector2 point The point. | Improve this Doc View Source QuadraticBezierTo(Vector2, Vector2) Draw a quadratic bezier curve connecting the previous point to point . Declaration void QuadraticBezierTo(Vector2 secondControlPoint, Vector2 point) Parameters Type Name Description Vector2 secondControlPoint The second control point. Vector2 point The point. Extension Methods IGlyphRendererExtensions.Render(IGlyphRenderer, ReadOnlySpan<Char>, RendererOptions)"
  },
  "api/Fonts/SixLabors.Fonts.IGlyphRendererExtensions.html": {
    "href": "api/Fonts/SixLabors.Fonts.IGlyphRendererExtensions.html",
    "title": "Class IGlyphRendererExtensions",
    "keywords": "Class IGlyphRendererExtensions A surface that can have a glyph renered to it as a series of actions. Inheritance Object IGlyphRendererExtensions Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public static class IGlyphRendererExtensions : object Methods | Improve this Doc View Source Render(IGlyphRenderer, ReadOnlySpan<Char>, RendererOptions) Renders the text. Declaration public static IGlyphRenderer Render(this IGlyphRenderer renderer, ReadOnlySpan<char> text, RendererOptions options) Parameters Type Name Description IGlyphRenderer renderer The target renderer surface. ReadOnlySpan < Char > text The text. RendererOptions options The options. Returns Type Description IGlyphRenderer Returns the orginonal renderer"
  },
  "api/Fonts/SixLabors.Fonts.IReadOnlyFontCollection.html": {
    "href": "api/Fonts/SixLabors.Fonts.IReadOnlyFontCollection.html",
    "title": "Interface IReadOnlyFontCollection",
    "keywords": "Interface IReadOnlyFontCollection A readonly collection of fonts. Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public interface IReadOnlyFontCollection Properties | Improve this Doc View Source Families Gets the collection of FontFamily objects associated with this FontCollection in the invariant culture. Declaration IEnumerable<FontFamily> Families { get; } Property Value Type Description IEnumerable < FontFamily > The families. Methods | Improve this Doc View Source FamiliesByCulture(CultureInfo) Gets the collection of FontFamily objects associated with this FontCollection . Declaration IEnumerable<FontFamily> FamiliesByCulture(CultureInfo culture) Parameters Type Name Description CultureInfo culture The culture to use while getting the family name from the installed set of fonts. Returns Type Description IEnumerable < FontFamily > The set of fonts families using the fonts culture aware font name | Improve this Doc View Source Find(String) Finds the specified font family using the invariant culture font family name. Declaration FontFamily Find(string fontFamily) Parameters Type Name Description String fontFamily The font family. Returns Type Description FontFamily The family if installed otherwise throws FontFamilyNotFoundException | Improve this Doc View Source Find(String, CultureInfo) Finds the specified font family. Declaration FontFamily Find(string fontFamily, CultureInfo culture) Parameters Type Name Description String fontFamily The font family. CultureInfo culture The culture to use while getting the family name from the installed set of fonts. Returns Type Description FontFamily The family if installed otherwise throws FontFamilyNotFoundException | Improve this Doc View Source TryFind(String, CultureInfo, out FontFamily) Finds the specified font family. Declaration bool TryFind(string fontFamily, CultureInfo culture, out FontFamily family) Parameters Type Name Description String fontFamily The font family to find. CultureInfo culture The culture to use while getting the family name from the installed set of fonts. FontFamily family The found family. Returns Type Description Boolean true if a font of that family has been installed into the font collection. | Improve this Doc View Source TryFind(String, out FontFamily) Finds the specified font family using the invariant culture font family name. Declaration bool TryFind(string fontFamily, out FontFamily family) Parameters Type Name Description String fontFamily The font family to find. FontFamily family The found family. Returns Type Description Boolean true if a font of that family has been installed into the font collection. Extension Methods IReadonlyFontCollectionExtensions.CreateFont(IReadOnlyFontCollection, String, Single, FontStyle) IReadonlyFontCollectionExtensions.CreateFont(IReadOnlyFontCollection, String, Single) IReadonlyFontCollectionExtensions.CreateFont(IReadOnlyFontCollection, String, CultureInfo, Single, FontStyle) IReadonlyFontCollectionExtensions.CreateFont(IReadOnlyFontCollection, String, CultureInfo, Single)"
  },
  "api/Fonts/SixLabors.Fonts.IReadonlyFontCollectionExtensions.html": {
    "href": "api/Fonts/SixLabors.Fonts.IReadonlyFontCollectionExtensions.html",
    "title": "Class IReadonlyFontCollectionExtensions",
    "keywords": "Class IReadonlyFontCollectionExtensions A readonly collection of fonts. Inheritance Object IReadonlyFontCollectionExtensions Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public static class IReadonlyFontCollectionExtensions : object Methods | Improve this Doc View Source CreateFont(IReadOnlyFontCollection, String, CultureInfo, Single) Create a new instance of the Font for the named font family with regular styling. Declaration public static Font CreateFont(this IReadOnlyFontCollection collection, string fontFamily, CultureInfo culture, float size) Parameters Type Name Description IReadOnlyFontCollection collection The the ont collection to retrieve the font family from. String fontFamily The family. CultureInfo culture The culture of the retuend font family Single size The size. Returns Type Description Font The font for the representing the configured options. | Improve this Doc View Source CreateFont(IReadOnlyFontCollection, String, CultureInfo, Single, FontStyle) Create a new instance of the Font for the named font family. Declaration public static Font CreateFont(this IReadOnlyFontCollection collection, string fontFamily, CultureInfo culture, float size, FontStyle style) Parameters Type Name Description IReadOnlyFontCollection collection The the ont collection to retrieve the font family from. String fontFamily The family. CultureInfo culture The culture of the retuend font family Single size The size. FontStyle style The style. Returns Type Description Font The font for the representing the configured options. | Improve this Doc View Source CreateFont(IReadOnlyFontCollection, String, Single) Create a new instance of the Font for the named font family with regular styling. Declaration public static Font CreateFont(this IReadOnlyFontCollection collection, string fontFamily, float size) Parameters Type Name Description IReadOnlyFontCollection collection The the ont collection to retrieve the font family from. String fontFamily The family. Single size The size. Returns Type Description Font The font for the representing the configured options. | Improve this Doc View Source CreateFont(IReadOnlyFontCollection, String, Single, FontStyle) Create a new instance of the Font for the named font family. Declaration public static Font CreateFont(this IReadOnlyFontCollection collection, string fontFamily, float size, FontStyle style) Parameters Type Name Description IReadOnlyFontCollection collection The the ont collection to retrieve the font family from. String fontFamily The family. Single size The size. FontStyle style The style. Returns Type Description Font The font for the representing the configured options."
  },
  "api/Fonts/SixLabors.Fonts.RendererOptions.html": {
    "href": "api/Fonts/SixLabors.Fonts.RendererOptions.html",
    "title": "Class RendererOptions",
    "keywords": "Class RendererOptions The font style to render onto a peice of text. Inheritance Object RendererOptions Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public sealed class RendererOptions : object Constructors | Improve this Doc View Source RendererOptions(Font) Initializes a new instance of the RendererOptions class. Declaration public RendererOptions(Font font) Parameters Type Name Description Font font The font. | Improve this Doc View Source RendererOptions(Font, Single) Initializes a new instance of the RendererOptions class. Declaration public RendererOptions(Font font, float dpi) Parameters Type Name Description Font font The font. Single dpi The dpi. | Improve this Doc View Source RendererOptions(Font, Single, Single) Initializes a new instance of the RendererOptions class. Declaration public RendererOptions(Font font, float dpiX, float dpiY) Parameters Type Name Description Font font The font. Single dpiX The X dpi. Single dpiY The Y dpi. | Improve this Doc View Source RendererOptions(Font, Single, Single, Vector2) Initializes a new instance of the RendererOptions class. Declaration public RendererOptions(Font font, float dpiX, float dpiY, Vector2 origin) Parameters Type Name Description Font font The font. Single dpiX The X dpi. Single dpiY The Y dpi. Vector2 origin The origin location. | Improve this Doc View Source RendererOptions(Font, Single, Vector2) Initializes a new instance of the RendererOptions class. Declaration public RendererOptions(Font font, float dpi, Vector2 origin) Parameters Type Name Description Font font The font. Single dpi The dpi. Vector2 origin The origin location. | Improve this Doc View Source RendererOptions(Font, Vector2) Initializes a new instance of the RendererOptions class. Declaration public RendererOptions(Font font, Vector2 origin) Parameters Type Name Description Font font The font. Vector2 origin The origin location. Properties | Improve this Doc View Source ApplyKerning Gets or sets a value indicating whether [apply kerning]. Declaration public bool ApplyKerning { get; set; } Property Value Type Description Boolean true if [apply kerning]; otherwise, false . | Improve this Doc View Source ColorFontSupport Gets or sets a value indicating whether we enable various color font formats. Declaration public ColorFontSupport ColorFontSupport { get; set; } Property Value Type Description ColorFontSupport | Improve this Doc View Source DpiX Gets or sets the the current X DPI to render/measure the text at. Declaration public float DpiX { get; set; } Property Value Type Description Single | Improve this Doc View Source DpiY Gets or sets the the current Ys DPI to render/measure the text at. Declaration public float DpiY { get; set; } Property Value Type Description Single | Improve this Doc View Source FallbackFontFamilies Gets or sets the collection of Fallback fontfamiles to try and use when enspecific glyph is missing. Declaration public IEnumerable<FontFamily> FallbackFontFamilies { get; set; } Property Value Type Description IEnumerable < FontFamily > | Improve this Doc View Source Font Gets the font. Declaration public Font Font { get; } Property Value Type Description Font The font. | Improve this Doc View Source HorizontalAlignment Gets or sets the Horizontal alignment of the text. Declaration public HorizontalAlignment HorizontalAlignment { get; set; } Property Value Type Description HorizontalAlignment | Improve this Doc View Source LineSpacing Gets or sets the line spacing. Applied as a multiple of the line height. Declaration public float LineSpacing { get; set; } Property Value Type Description Single | Improve this Doc View Source Origin Gets or sets the rendering origin. Declaration public Vector2 Origin { get; set; } Property Value Type Description Vector2 | Improve this Doc View Source TabWidth Gets or sets the width of the tab. Declaration public float TabWidth { get; set; } Property Value Type Description Single The width of the tab. | Improve this Doc View Source VerticalAlignment Gets or sets the Vertical alignment of the text. Declaration public VerticalAlignment VerticalAlignment { get; set; } Property Value Type Description VerticalAlignment | Improve this Doc View Source WrappingWidth Gets or sets the width relative to the current DPI at which text will automatically wrap onto a newline Declaration public float WrappingWidth { get; set; } Property Value Type Description Single if value is -1 then wrapping is disabled."
  },
  "api/Fonts/SixLabors.Fonts.SystemFonts.html": {
    "href": "api/Fonts/SixLabors.Fonts.SystemFonts.html",
    "title": "Class SystemFonts",
    "keywords": "Class SystemFonts Provides a collection of fonts. Inheritance Object SystemFonts Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public static class SystemFonts : object Properties | Improve this Doc View Source Collection Gets the collection containing the globaly installled system fonts. Declaration public static IReadOnlyFontCollection Collection { get; } Property Value Type Description IReadOnlyFontCollection The system fonts. | Improve this Doc View Source Families Gets the collection of FontFamily s installed on current system. Declaration public static IEnumerable<FontFamily> Families { get; } Property Value Type Description IEnumerable < FontFamily > The families. Methods | Improve this Doc View Source CreateFont(String, Single) Create a new instance of the Font for the named font family with regular styling. Declaration public static Font CreateFont(string fontFamily, float size) Parameters Type Name Description String fontFamily The family. Single size The size. Returns Type Description Font Returns instance of the Font from the current collection. | Improve this Doc View Source CreateFont(String, Single, FontStyle) Create a new instance of the Font for the named font family. Declaration public static Font CreateFont(string fontFamily, float size, FontStyle style) Parameters Type Name Description String fontFamily The family. Single size The size. FontStyle style The style. Returns Type Description Font Returns instance of the Font from the current collection. | Improve this Doc View Source FamiliesByCulture(CultureInfo) Gets the collection of FontFamily objects associated with this FontCollection in the current threads culture. Declaration public static IEnumerable<FontFamily> FamiliesByCulture(CultureInfo culture) Parameters Type Name Description CultureInfo culture The culture to find the list of font familes for. Returns Type Description IEnumerable < FontFamily > The set of fonts families using the fonts culture aware font name | Improve this Doc View Source Find(String) Finds the specified font family from the system font store. Declaration public static FontFamily Find(string fontFamily) Parameters Type Name Description String fontFamily The font family. Returns Type Description FontFamily The found family. Exceptions Type Condition FontFamilyNotFoundException Thrown when the font family is not found. | Improve this Doc View Source Find(String, CultureInfo) Finds the specified font family. Declaration public static FontFamily Find(string fontFamily, CultureInfo culture) Parameters Type Name Description String fontFamily The font family. CultureInfo culture The culture to find the font from of font family for. Returns Type Description FontFamily The family if installed otherwise throws FontFamilyNotFoundException | Improve this Doc View Source TryFind(String, CultureInfo, out FontFamily) Finds the specified font family. Declaration public static bool TryFind(string fontFamily, CultureInfo culture, out FontFamily family) Parameters Type Name Description String fontFamily The font family to find. CultureInfo culture The culture to find the font from of font family for. FontFamily family The found family. Returns Type Description Boolean true if a font of that family has been installed into the font collection. | Improve this Doc View Source TryFind(String, out FontFamily) Finds the specified font family from the system font store. Declaration public static bool TryFind(string fontFamily, out FontFamily family) Parameters Type Name Description String fontFamily The font family to find. FontFamily family The found family. Returns Type Description Boolean True if a font of that family has been installed into the font collection."
  },
  "api/Fonts/SixLabors.Fonts.TextMeasurer.html": {
    "href": "api/Fonts/SixLabors.Fonts.TextMeasurer.html",
    "title": "Class TextMeasurer",
    "keywords": "Class TextMeasurer Encapulated logic for laying out and measuring text. Inheritance Object TextMeasurer Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public static class TextMeasurer : object Methods | Improve this Doc View Source Measure(ReadOnlySpan<Char>, RendererOptions) Measures the text. Declaration public static FontRectangle Measure(ReadOnlySpan<char> text, RendererOptions options) Parameters Type Name Description ReadOnlySpan < Char > text The text. RendererOptions options The style. Returns Type Description FontRectangle The size of the text if it was to be rendered. | Improve this Doc View Source Measure(String, RendererOptions) Measures the text. Declaration public static FontRectangle Measure(string text, RendererOptions options) Parameters Type Name Description String text The text. RendererOptions options The style. Returns Type Description FontRectangle The size of the text if it was to be rendered. | Improve this Doc View Source MeasureBounds(ReadOnlySpan<Char>, RendererOptions) Measures the text. Declaration public static FontRectangle MeasureBounds(ReadOnlySpan<char> text, RendererOptions options) Parameters Type Name Description ReadOnlySpan < Char > text The text. RendererOptions options The style. Returns Type Description FontRectangle The size of the text if it was to be rendered. | Improve this Doc View Source MeasureBounds(String, RendererOptions) Measures the text. Declaration public static FontRectangle MeasureBounds(string text, RendererOptions options) Parameters Type Name Description String text The text. RendererOptions options The style. Returns Type Description FontRectangle The size of the text if it was to be rendered. | Improve this Doc View Source TryMeasureCharacterBounds(ReadOnlySpan<Char>, RendererOptions, out GlyphMetric[]) Measures the character bounds of the text. For each control character the list contains a null element. Declaration public static bool TryMeasureCharacterBounds(ReadOnlySpan<char> text, RendererOptions options, out GlyphMetric[] characterBounds) Parameters Type Name Description ReadOnlySpan < Char > text The text. RendererOptions options The style. GlyphMetric [] characterBounds The list of character bounds of the text if it was to be rendered. Returns Type Description Boolean Whether any of the characters had non-empty bounds."
  },
  "api/Fonts/SixLabors.Fonts.TextRenderer.html": {
    "href": "api/Fonts/SixLabors.Fonts.TextRenderer.html",
    "title": "Class TextRenderer",
    "keywords": "Class TextRenderer Encapulated logic for laying out and then rendering text to a IGlyphRenderer surface. Inheritance Object TextRenderer Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public class TextRenderer : object Constructors | Improve this Doc View Source TextRenderer(IGlyphRenderer) Initializes a new instance of the TextRenderer class. Declaration public TextRenderer(IGlyphRenderer renderer) Parameters Type Name Description IGlyphRenderer renderer The renderer. Methods | Improve this Doc View Source RenderText(ReadOnlySpan<Char>, RendererOptions) Renders the text. Declaration public void RenderText(ReadOnlySpan<char> text, RendererOptions options) Parameters Type Name Description ReadOnlySpan < Char > text The text. RendererOptions options The style. | Improve this Doc View Source RenderText(String, RendererOptions) Renders the text. Declaration public void RenderText(string text, RendererOptions options) Parameters Type Name Description String text The text. RendererOptions options The style. | Improve this Doc View Source RenderTextTo(IGlyphRenderer, ReadOnlySpan<Char>, RendererOptions) Renders the text to the renderer . Declaration public static void RenderTextTo(IGlyphRenderer renderer, ReadOnlySpan<char> text, RendererOptions options) Parameters Type Name Description IGlyphRenderer renderer The target renderer. ReadOnlySpan < Char > text The text. RendererOptions options The style. | Improve this Doc View Source RenderTextTo(IGlyphRenderer, String, RendererOptions) Renders the text to the renderer . Declaration public static void RenderTextTo(IGlyphRenderer renderer, string text, RendererOptions options) Parameters Type Name Description IGlyphRenderer renderer The target renderer. String text The text. RendererOptions options The style."
  },
  "api/Fonts/SixLabors.Fonts.VerticalAlignment.html": {
    "href": "api/Fonts/SixLabors.Fonts.VerticalAlignment.html",
    "title": "Enum VerticalAlignment",
    "keywords": "Enum VerticalAlignment Vertial alignment modes. Namespace : SixLabors.Fonts Assembly : SixLabors.Fonts.dll Syntax public enum VerticalAlignment : int Fields Name Description Bottom Aligns text upwards from the bottom Center Aligns text up and down from the middle. Top Aligns downward from the top."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.ClipperExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.ClipperExtensions.html",
    "title": "Class ClipperExtensions",
    "keywords": "Class ClipperExtensions Clipping extensions for shapes Inheritance Object ClipperExtensions Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class ClipperExtensions : object Methods | Improve this Doc View Source Clip(IPath, IEnumerable<IPath>) Clips the specified holes. Declaration public static IPath Clip(this IPath shape, IEnumerable<IPath> holes) Parameters Type Name Description IPath shape The shape. IEnumerable < IPath > holes The holes. Returns Type Description IPath Returns a new shape with the holes cliped out out the shape. | Improve this Doc View Source Clip(IPath, IPath[]) Clips the specified holes. Declaration public static IPath Clip(this IPath shape, params IPath[] holes) Parameters Type Name Description IPath shape The shape. IPath [] holes The holes. Returns Type Description IPath Returns a new shape with the holes cliped out out the shape."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.ComplexPolygon.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.ComplexPolygon.html",
    "title": "Class ComplexPolygon",
    "keywords": "Class ComplexPolygon Represents a complex polygon made up of one or more shapes overlayed on each other, where overlaps causes holes. Inheritance Object ComplexPolygon Implements IPath Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public sealed class ComplexPolygon : object, IPath, IInternalPathOwner Constructors | Improve this Doc View Source ComplexPolygon(IEnumerable<IPath>) Initializes a new instance of the ComplexPolygon class. Declaration public ComplexPolygon(IEnumerable<IPath> paths) Parameters Type Name Description IEnumerable < IPath > paths The paths. | Improve this Doc View Source ComplexPolygon(IPath[]) Initializes a new instance of the ComplexPolygon class. Declaration public ComplexPolygon(params IPath[] paths) Parameters Type Name Description IPath [] paths The paths. Properties | Improve this Doc View Source Bounds Gets the bounding box of this shape. Declaration public RectangleF Bounds { get; } Property Value Type Description RectangleF The bounds. | Improve this Doc View Source Length Gets the length of the path. Declaration public float Length { get; } Property Value Type Description Single | Improve this Doc View Source MaxIntersections Gets the maximum number intersections that a shape can have when testing a line. Declaration public int MaxIntersections { get; } Property Value Type Description Int32 The maximum intersections. | Improve this Doc View Source Paths Gets the paths that make up this shape Declaration public IEnumerable<IPath> Paths { get; } Property Value Type Description IEnumerable < IPath > The paths. | Improve this Doc View Source PathType Gets a value indicating whether this instance is closed, open or a composite path with a mixture of open and closed figures. Declaration public PathTypes PathType { get; } Property Value Type Description PathTypes Methods | Improve this Doc View Source AsClosedPath() Converts a path to a closed path. Declaration public IPath AsClosedPath() Returns Type Description IPath Returns the path as a closed path. | Improve this Doc View Source Contains(PointF) Determines whether the IPath contains the specified point Declaration public bool Contains(PointF point) Parameters Type Name Description PointF point The point. Returns Type Description Boolean true if the IPath contains the specified point; otherwise, false . | Improve this Doc View Source Distance(PointF) the distance of the point from the outline of the shape, if the value is negative it is inside the polygon bounds Declaration public PointInfo Distance(PointF point) Parameters Type Name Description PointF point The point. Returns Type Description PointInfo Returns the distance from thr shape to the point Remarks Due to the clipping we did during construction we know that out shapes do not overlap at there edges therefore for a point to be in more that one we must be in a hole of another, theoretically this could then flip again to be in a outline inside a hole inside an outline :) | Improve this Doc View Source FindIntersections(PointF, PointF, PointF[], Int32) Based on a line described by start and end populate a buffer for all points on all the polygons, that make up this complex shape, that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, PointF[] buffer, int offset) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, PointF[], Int32, IntersectionRule) Based on a line described by start and end populate a buffer for all points on all the polygons, that make up this complex shape, that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, PointF[] buffer, int offset, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer IntersectionRule intersectionRule The intersection rule to use Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, Span<PointF>) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, Span<PointF> buffer) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, Span<PointF>, IntersectionRule) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, Span<PointF> buffer, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. IntersectionRule intersectionRule How intersections are handled Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source Flatten() Converts the IPath into a simple linear path.. Declaration public IEnumerable<ISimplePath> Flatten() Returns Type Description IEnumerable < ISimplePath > Returns the current IPath as simple linear path. | Improve this Doc View Source PointAlongPath(Single) Calculates the point a certain distance a path. Declaration public SegmentInfo PointAlongPath(float distanceAlongPath) Parameters Type Name Description Single distanceAlongPath The distance along the path to find details of. Returns Type Description SegmentInfo Returns details about a point along a path. | Improve this Doc View Source Transform(Matrix3x2) Transforms the shape using the specified matrix. Declaration public IPath Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description IPath A new shape with the matrix applied to it. Implements IPath See Also IPath"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.CubicBezierLineSegment.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.CubicBezierLineSegment.html",
    "title": "Class CubicBezierLineSegment",
    "keywords": "Class CubicBezierLineSegment Represents a line segment that contains a lists of control points that will be rendered as a cubic bezier curve Inheritance Object CubicBezierLineSegment Implements ILineSegment Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public sealed class CubicBezierLineSegment : object, ILineSegment Constructors | Improve this Doc View Source CubicBezierLineSegment(PointF, PointF, PointF, PointF, PointF[]) Initializes a new instance of the CubicBezierLineSegment class. Declaration public CubicBezierLineSegment(PointF start, PointF controlPoint1, PointF controlPoint2, PointF end, params PointF[] additionalPoints) Parameters Type Name Description PointF start The start. PointF controlPoint1 The control point1. PointF controlPoint2 The control point2. PointF end The end. PointF [] additionalPoints The additional points. | Improve this Doc View Source CubicBezierLineSegment(PointF[]) Initializes a new instance of the CubicBezierLineSegment class. Declaration public CubicBezierLineSegment(PointF[] points) Parameters Type Name Description PointF [] points The points. Properties | Improve this Doc View Source ControlPoints Gets the control points. Declaration public IReadOnlyList<PointF> ControlPoints { get; } Property Value Type Description IReadOnlyList < PointF > The control points. | Improve this Doc View Source EndPoint Gets the end point. Declaration public PointF EndPoint { get; } Property Value Type Description PointF The end point. Methods | Improve this Doc View Source Flatten() Returns the current ILineSegment a simple linear path. Declaration public ReadOnlyMemory<PointF> Flatten() Returns Type Description ReadOnlyMemory < PointF > Returns the current ILineSegment as simple linear path. | Improve this Doc View Source Transform(Matrix3x2) Transforms the current LineSegment using specified matrix. Declaration public CubicBezierLineSegment Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description CubicBezierLineSegment A line segment with the matrix applied to it. Explicit Interface Implementations | Improve this Doc View Source ILineSegment.Transform(Matrix3x2) Transforms the current LineSegment using specified matrix. Declaration ILineSegment ILineSegment.Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description ILineSegment A line segment with the matrix applied to it. Implements ILineSegment See Also ILineSegment"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.EllipsePolygon.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.EllipsePolygon.html",
    "title": "Class EllipsePolygon",
    "keywords": "Class EllipsePolygon A shape made up of a single path made up of one of more ILineSegment s Inheritance Object EllipsePolygon Implements IPath ISimplePath Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class EllipsePolygon : object, IPath, ISimplePath, IInternalPathOwner Constructors | Improve this Doc View Source EllipsePolygon(PointF, SizeF) Initializes a new instance of the EllipsePolygon class. Declaration public EllipsePolygon(PointF location, SizeF size) Parameters Type Name Description PointF location The location the center of the ellipse will be placed. SizeF size The width/hight of the final ellipse. | Improve this Doc View Source EllipsePolygon(PointF, Single) Initializes a new instance of the EllipsePolygon class. Declaration public EllipsePolygon(PointF location, float radius) Parameters Type Name Description PointF location The location the center of the circle will be placed. Single radius The radius final circle. | Improve this Doc View Source EllipsePolygon(Single, Single, Single) Initializes a new instance of the EllipsePolygon class. Declaration public EllipsePolygon(float x, float y, float radius) Parameters Type Name Description Single x The X coordinate of the center of the circle. Single y The Y coordinate of the center of the circle. Single radius The radius final circle. | Improve this Doc View Source EllipsePolygon(Single, Single, Single, Single) Initializes a new instance of the EllipsePolygon class. Declaration public EllipsePolygon(float x, float y, float width, float height) Parameters Type Name Description Single x The X coordinate of the center of the ellipse. Single y The Y coordinate of the center of the ellipse. Single width The width the ellipse should have. Single height The height the ellipse should have. Properties | Improve this Doc View Source Bounds Gets the bounds enclosing the path Declaration public RectangleF Bounds { get; } Property Value Type Description RectangleF | Improve this Doc View Source Length Gets the length of the path. Declaration public float Length { get; } Property Value Type Description Single Methods | Improve this Doc View Source Contains(PointF) Determines whether the IPath contains the specified point Declaration public bool Contains(PointF point) Parameters Type Name Description PointF point The point. Returns Type Description Boolean true if the IPath contains the specified point; otherwise, false . | Improve this Doc View Source Distance(PointF) Calculates the distance along and away from the path for a specified point. Declaration public PointInfo Distance(PointF point) Parameters Type Name Description PointF point The point along the path. Returns Type Description PointInfo Returns details about the point and its distance away from the path. | Improve this Doc View Source Flatten() Converts the IPath into a simple linear path.. Declaration public IEnumerable<ISimplePath> Flatten() Returns Type Description IEnumerable < ISimplePath > Returns the current IPath as simple linear path. | Improve this Doc View Source PointAlongPath(Single) Calculates the point a certain distance along a path. Declaration public SegmentInfo PointAlongPath(float distanceAlongPath) Parameters Type Name Description Single distanceAlongPath The distance along the path to find details of. Returns Type Description SegmentInfo Returns details about a point along a path. | Improve this Doc View Source Transform(Matrix3x2) Transforms the rectangle using specified matrix. Declaration public EllipsePolygon Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description EllipsePolygon A new path with the matrix applied to it. Explicit Interface Implementations | Improve this Doc View Source IPath.AsClosedPath() Returns this polygon as a path Declaration IPath IPath.AsClosedPath() Returns Type Description IPath This polygon as a path | Improve this Doc View Source IPath.FindIntersections(PointF, PointF, PointF[], Int32) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration int IPath.FindIntersections(PointF start, PointF end, PointF[] buffer, int offset) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer to start. Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source IPath.FindIntersections(PointF, PointF, PointF[], Int32, IntersectionRule) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration int IPath.FindIntersections(PointF start, PointF end, PointF[] buffer, int offset, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer to start. IntersectionRule intersectionRule How intersections are handled Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source IPath.FindIntersections(PointF, PointF, Span<PointF>) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration int IPath.FindIntersections(PointF start, PointF end, Span<PointF> buffer) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source IPath.FindIntersections(PointF, PointF, Span<PointF>, IntersectionRule) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration int IPath.FindIntersections(PointF start, PointF end, Span<PointF> buffer, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. IntersectionRule intersectionRule How intersections are handled Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source IPath.MaxIntersections Gets the maximum number intersections that a shape can have when testing a line. Declaration int IPath.MaxIntersections { get; } Returns Type Description Int32 | Improve this Doc View Source IPath.PathType Gets a value indicating whether this instance is closed, open or a composite path with a mixture of open and closed figures. Declaration PathTypes IPath.PathType { get; } Returns Type Description PathTypes | Improve this Doc View Source IPath.Transform(Matrix3x2) Transforms the path using the specified matrix. Declaration IPath IPath.Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description IPath A new path with the matrix applied to it. | Improve this Doc View Source ISimplePath.IsClosed Gets a value indicating whether this instance is a closed path. Declaration bool ISimplePath.IsClosed { get; } Returns Type Description Boolean | Improve this Doc View Source ISimplePath.Points Gets the points that make up this simple linear path. Declaration ReadOnlyMemory<PointF> ISimplePath.Points { get; } Returns Type Description ReadOnlyMemory < PointF > Implements IPath ISimplePath"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.EndCapStyle.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.EndCapStyle.html",
    "title": "Enum EndCapStyle",
    "keywords": "Enum EndCapStyle The style to apply to the end cap when generating an outline. Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public enum EndCapStyle : int Fields Name Description Butt The outline stops exactly at the end of the path. Round The outline extends with a rounded style passed the end of the path. Square The outlines ends squared off passed the end of the path."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.html",
    "title": "Namespace SixLabors.ImageSharp.Drawing",
    "keywords": "Namespace SixLabors.ImageSharp.Drawing Classes ClipperExtensions Clipping extensions for shapes ComplexPolygon Represents a complex polygon made up of one or more shapes overlayed on each other, where overlaps causes holes. CubicBezierLineSegment Represents a line segment that contains a lists of control points that will be rendered as a cubic bezier curve EllipsePolygon A shape made up of a single path made up of one of more ILineSegment s LinearLineSegment Represents a series of control points that will be joined by straight lines Outliner Path extensions to generate outlines of paths. Path A aggregate of ILineSegment s making a single logical path PathBuilder Allow you to derivatively build shapes and paths. PathCollection A aggregate of IPath s to apply common operations to them. PathExtensions Convenience methods that can be applied to shapes and paths Polygon A shape made up of a single path made up of one of more ILineSegment s RectangularPolygon A way of optimizing drawing rectangles. Region Represents a region of an image. RegularPolygon A shape made up of a single path made up of one of more ILineSegment s Star A shape made up of a single path made up of one of more ILineSegment s TextBuilder Text drawing extensions for a PathBuilder Structs PointInfo Returns meta data about the nearest point on a path from a vector SegmentInfo Returns metadata about the point along a path. Interfaces ILineSegment Represents a simple path segment IPath Represents a logic path that can be drawn IPathCollection Represents a logic path that can be drawn ISimplePath Represents a logic path that can be drawn Enums EndCapStyle The style to apply to the end cap when generating an outline. IntersectionRule Rule for calulating intersection points, JointStyle The style we use to generate the joints when outlining. PathTypes Describes the different type of paths."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.ILineSegment.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.ILineSegment.html",
    "title": "Interface ILineSegment",
    "keywords": "Interface ILineSegment Represents a simple path segment Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public interface ILineSegment Properties | Improve this Doc View Source EndPoint Gets the end point. Declaration PointF EndPoint { get; } Property Value Type Description PointF The end point. Methods | Improve this Doc View Source Flatten() Converts the ILineSegment into a simple linear path.. Declaration ReadOnlyMemory<PointF> Flatten() Returns Type Description ReadOnlyMemory < PointF > Returns the current ILineSegment as simple linear path. | Improve this Doc View Source Transform(Matrix3x2) Transforms the current LineSegment using specified matrix. Declaration ILineSegment Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description ILineSegment A line segment with the matrix applied to it."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.IntersectionRule.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.IntersectionRule.html",
    "title": "Enum IntersectionRule",
    "keywords": "Enum IntersectionRule Rule for calulating intersection points, Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public enum IntersectionRule : int Fields Name Description Nonzero Nonzero rule treats intersecting holes as inside the path thus being ignored by intersections. OddEven Use odd/even intersection rules, self intersection will cause holes."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.IPath.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.IPath.html",
    "title": "Interface IPath",
    "keywords": "Interface IPath Represents a logic path that can be drawn Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public interface IPath Properties | Improve this Doc View Source Bounds Gets the bounds enclosing the path Declaration RectangleF Bounds { get; } Property Value Type Description RectangleF | Improve this Doc View Source Length Gets the length of the path. Declaration float Length { get; } Property Value Type Description Single | Improve this Doc View Source MaxIntersections Gets the maximum number intersections that a shape can have when testing a line. Declaration int MaxIntersections { get; } Property Value Type Description Int32 | Improve this Doc View Source PathType Gets a value indicating whether this instance is closed, open or a composite path with a mixture of open and closed figures. Declaration PathTypes PathType { get; } Property Value Type Description PathTypes Methods | Improve this Doc View Source AsClosedPath() Returns this path with all figures closed. Declaration IPath AsClosedPath() Returns Type Description IPath Returns the path as a closed path. | Improve this Doc View Source Contains(PointF) Determines whether the IPath contains the specified point Declaration bool Contains(PointF point) Parameters Type Name Description PointF point The point. Returns Type Description Boolean true if the IPath contains the specified point; otherwise, false . | Improve this Doc View Source Distance(PointF) Calculates the distance along and away from the path for a specified point. Declaration PointInfo Distance(PointF point) Parameters Type Name Description PointF point The point along the path. Returns Type Description PointInfo Returns details about the point and its distance away from the path. | Improve this Doc View Source FindIntersections(PointF, PointF, PointF[], Int32) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration int FindIntersections(PointF start, PointF end, PointF[] buffer, int offset) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer to start. Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, PointF[], Int32, IntersectionRule) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration int FindIntersections(PointF start, PointF end, PointF[] buffer, int offset, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer to start. IntersectionRule intersectionRule How intersections are handled Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, Span<PointF>) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration int FindIntersections(PointF start, PointF end, Span<PointF> buffer) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, Span<PointF>, IntersectionRule) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration int FindIntersections(PointF start, PointF end, Span<PointF> buffer, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. IntersectionRule intersectionRule How intersections are handled Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source Flatten() Converts the IPath into a simple linear path. Declaration IEnumerable<ISimplePath> Flatten() Returns Type Description IEnumerable < ISimplePath > Returns the current IPath as simple linear path. | Improve this Doc View Source PointAlongPath(Single) Calculates the point a certain distance along a path. Declaration SegmentInfo PointAlongPath(float distanceAlongPath) Parameters Type Name Description Single distanceAlongPath The distance along the path to find details of. Returns Type Description SegmentInfo Returns details about a point along a path. | Improve this Doc View Source Transform(Matrix3x2) Transforms the path using the specified matrix. Declaration IPath Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description IPath A new path with the matrix applied to it. Extension Methods ClipperExtensions.Clip(IPath, IEnumerable<IPath>) ClipperExtensions.Clip(IPath, IPath[]) Outliner.GenerateOutline(IPath, Single, Single[]) Outliner.GenerateOutline(IPath, Single, ReadOnlySpan<Single>) Outliner.GenerateOutline(IPath, Single, Single[], Boolean) Outliner.GenerateOutline(IPath, Single, ReadOnlySpan<Single>, Boolean) Outliner.GenerateOutline(IPath, Single, ReadOnlySpan<Single>, Boolean, JointStyle, EndCapStyle) Outliner.GenerateOutline(IPath, Single) Outliner.GenerateOutline(IPath, Single, JointStyle, EndCapStyle) PathExtensions.Rotate(IPath, Single) PathExtensions.RotateDegree(IPath, Single) PathExtensions.Translate(IPath, PointF) PathExtensions.Translate(IPath, Single, Single) PathExtensions.Scale(IPath, Single, Single) PathExtensions.Scale(IPath, Single) PathExtensions.FindIntersections(IPath, PointF, PointF)"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.IPathCollection.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.IPathCollection.html",
    "title": "Interface IPathCollection",
    "keywords": "Interface IPathCollection Represents a logic path that can be drawn Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public interface IPathCollection : IEnumerable<IPath> Properties | Improve this Doc View Source Bounds Gets the bounds enclosing the path Declaration RectangleF Bounds { get; } Property Value Type Description RectangleF Methods | Improve this Doc View Source Transform(Matrix3x2) Transforms the path using the specified matrix. Declaration IPathCollection Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description IPathCollection A new path with the matrix applied to it. Extension Methods PathExtensions.Rotate(IPathCollection, Single) PathExtensions.RotateDegree(IPathCollection, Single) PathExtensions.Translate(IPathCollection, PointF) PathExtensions.Translate(IPathCollection, Single, Single) PathExtensions.Scale(IPathCollection, Single, Single) PathExtensions.Scale(IPathCollection, Single)"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.ISimplePath.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.ISimplePath.html",
    "title": "Interface ISimplePath",
    "keywords": "Interface ISimplePath Represents a logic path that can be drawn Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public interface ISimplePath Properties | Improve this Doc View Source IsClosed Gets a value indicating whether this instance is a closed path. Declaration bool IsClosed { get; } Property Value Type Description Boolean | Improve this Doc View Source Points Gets the points that make this up as a simple linear path. Declaration ReadOnlyMemory<PointF> Points { get; } Property Value Type Description ReadOnlyMemory < PointF >"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.JointStyle.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.JointStyle.html",
    "title": "Enum JointStyle",
    "keywords": "Enum JointStyle The style we use to generate the joints when outlining. Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public enum JointStyle : int Fields Name Description Miter Joints will generate to a long point unless the end of the point will exceed 20 times the width then we generate the joint using Square . Round Rounded joints. Joints generate with a rounded profile. Square Joints are squared off 1 width distance from the corner."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.LinearLineSegment.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.LinearLineSegment.html",
    "title": "Class LinearLineSegment",
    "keywords": "Class LinearLineSegment Represents a series of control points that will be joined by straight lines Inheritance Object LinearLineSegment Implements ILineSegment Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public sealed class LinearLineSegment : object, ILineSegment Constructors | Improve this Doc View Source LinearLineSegment(PointF, PointF) Initializes a new instance of the LinearLineSegment class. Declaration public LinearLineSegment(PointF start, PointF end) Parameters Type Name Description PointF start The start. PointF end The end. | Improve this Doc View Source LinearLineSegment(PointF, PointF, PointF[]) Initializes a new instance of the LinearLineSegment class. Declaration public LinearLineSegment(PointF point1, PointF point2, params PointF[] additionalPoints) Parameters Type Name Description PointF point1 The point1. PointF point2 The point2. PointF [] additionalPoints Additional points | Improve this Doc View Source LinearLineSegment(PointF[]) Initializes a new instance of the LinearLineSegment class. Declaration public LinearLineSegment(PointF[] points) Parameters Type Name Description PointF [] points The points. Properties | Improve this Doc View Source EndPoint Gets the end point. Declaration public PointF EndPoint { get; } Property Value Type Description PointF The end point. Methods | Improve this Doc View Source Flatten() Converts the ILineSegment into a simple linear path.. Declaration public ReadOnlyMemory<PointF> Flatten() Returns Type Description ReadOnlyMemory < PointF > Returns the current ILineSegment as simple linear path. | Improve this Doc View Source Transform(Matrix3x2) Transforms the current LineSegment using specified matrix. Declaration public LinearLineSegment Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description LinearLineSegment A line segment with the matrix applied to it. Explicit Interface Implementations | Improve this Doc View Source ILineSegment.Transform(Matrix3x2) Transforms the current LineSegment using specified matrix. Declaration ILineSegment ILineSegment.Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description ILineSegment A line segment with the matrix applied to it. Implements ILineSegment See Also ILineSegment"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Outliner.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Outliner.html",
    "title": "Class Outliner",
    "keywords": "Class Outliner Path extensions to generate outlines of paths. Inheritance Object Outliner Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class Outliner : object Methods | Improve this Doc View Source GenerateOutline(IPath, Single) Generates a solid outline of the path. Declaration public static IPath GenerateOutline(this IPath path, float width) Parameters Type Name Description IPath path the path to outline Single width The final width outline Returns Type Description IPath A new path representing the outline. | Improve this Doc View Source GenerateOutline(IPath, Single, ReadOnlySpan<Single>) Generates a outline of the path with alternating on and off segments based on the pattern. Declaration public static IPath GenerateOutline(this IPath path, float width, ReadOnlySpan<float> pattern) Parameters Type Name Description IPath path the path to outline Single width The final width outline ReadOnlySpan < Single > pattern The pattern made of multiples of the width. Returns Type Description IPath A new path representing the outline. | Improve this Doc View Source GenerateOutline(IPath, Single, ReadOnlySpan<Single>, Boolean) Generates a outline of the path with alternating on and off segments based on the pattern. Declaration public static IPath GenerateOutline(this IPath path, float width, ReadOnlySpan<float> pattern, bool startOff) Parameters Type Name Description IPath path the path to outline Single width The final width outline ReadOnlySpan < Single > pattern The pattern made of multiples of the width. Boolean startOff Weather the first item in the pattern is on or off. Returns Type Description IPath A new path representing the outline. | Improve this Doc View Source GenerateOutline(IPath, Single, ReadOnlySpan<Single>, Boolean, JointStyle, EndCapStyle) Generates a outline of the path with alternating on and off segments based on the pattern. Declaration public static IPath GenerateOutline(this IPath path, float width, ReadOnlySpan<float> pattern, bool startOff, JointStyle jointStyle = default(JointStyle), EndCapStyle patternSectionCapStyle = default(EndCapStyle)) Parameters Type Name Description IPath path the path to outline Single width The final width outline ReadOnlySpan < Single > pattern The pattern made of multiples of the width. Boolean startOff Weather the first item in the pattern is on or off. JointStyle jointStyle The style to render the joints. EndCapStyle patternSectionCapStyle The style to render between sections of the specified pattern. Returns Type Description IPath A new path representing the outline. | Improve this Doc View Source GenerateOutline(IPath, Single, JointStyle, EndCapStyle) Generates a solid outline of the path. Declaration public static IPath GenerateOutline(this IPath path, float width, JointStyle jointStyle = default(JointStyle), EndCapStyle endCapStyle = default(EndCapStyle)) Parameters Type Name Description IPath path the path to outline Single width The final width outline JointStyle jointStyle The style to render the joints. EndCapStyle endCapStyle The style to render the end caps of open paths (ignored on closed paths). Returns Type Description IPath A new path representing the outline. | Improve this Doc View Source GenerateOutline(IPath, Single, Single[]) Generates a outline of the path with alternating on and off segments based on the pattern. Declaration public static IPath GenerateOutline(this IPath path, float width, float[] pattern) Parameters Type Name Description IPath path the path to outline Single width The final width outline Single [] pattern The pattern made of multiples of the width. Returns Type Description IPath A new path representing the outline. | Improve this Doc View Source GenerateOutline(IPath, Single, Single[], Boolean) Generates a outline of the path with alternating on and off segments based on the pattern. Declaration public static IPath GenerateOutline(this IPath path, float width, float[] pattern, bool startOff) Parameters Type Name Description IPath path the path to outline Single width The final width outline Single [] pattern The pattern made of multiples of the width. Boolean startOff Weather the first item in the pattern is on or off. Returns Type Description IPath A new path representing the outline."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Path.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Path.html",
    "title": "Class Path",
    "keywords": "Class Path A aggregate of ILineSegment s making a single logical path Inheritance Object Path Polygon Implements IPath ISimplePath Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class Path : object, IPath, ISimplePath, IInternalPathOwner Constructors | Improve this Doc View Source Path(IEnumerable<ILineSegment>) Initializes a new instance of the Path class. Declaration public Path(IEnumerable<ILineSegment> segments) Parameters Type Name Description IEnumerable < ILineSegment > segments The segments. | Improve this Doc View Source Path(ILineSegment[]) Initializes a new instance of the Path class. Declaration public Path(params ILineSegment[] segments) Parameters Type Name Description ILineSegment [] segments The segments. | Improve this Doc View Source Path(Path) Initializes a new instance of the Path class. Declaration public Path(Path path) Parameters Type Name Description Path path The path. Properties | Improve this Doc View Source Bounds Gets the bounds enclosing the path Declaration public RectangleF Bounds { get; } Property Value Type Description RectangleF | Improve this Doc View Source IsClosed Gets a value indicating whether this instance is a closed path. Declaration protected virtual bool IsClosed { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the length of the path. Declaration public float Length { get; } Property Value Type Description Single | Improve this Doc View Source LineSegments Gets the line segments Declaration public IReadOnlyList<ILineSegment> LineSegments { get; } Property Value Type Description IReadOnlyList < ILineSegment > | Improve this Doc View Source MaxIntersections Gets the maximum number intersections that a shape can have when testing a line. Declaration public int MaxIntersections { get; } Property Value Type Description Int32 | Improve this Doc View Source PathType Gets a value indicating whether this instance is closed, open or a composite path with a mixture of open and closed figures. Declaration public PathTypes PathType { get; } Property Value Type Description PathTypes Methods | Improve this Doc View Source AsClosedPath() Returns this polygon as a path Declaration public IPath AsClosedPath() Returns Type Description IPath This polygon as a path | Improve this Doc View Source Contains(PointF) Determines whether the IPath contains the specified point Declaration public bool Contains(PointF point) Parameters Type Name Description PointF point The point. Returns Type Description Boolean true if the IPath contains the specified point; otherwise, false . | Improve this Doc View Source Distance(PointF) Calculates the distance along and away from the path for a specified point. Declaration public PointInfo Distance(PointF point) Parameters Type Name Description PointF point The point along the path. Returns Type Description PointInfo Returns details about the point and its distance away from the path. | Improve this Doc View Source FindIntersections(PointF, PointF, PointF[], Int32) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, PointF[] buffer, int offset) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer to start. Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, PointF[], Int32, IntersectionRule) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, PointF[] buffer, int offset, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer to start. IntersectionRule intersectionRule How intersections are handled Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, Span<PointF>) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, Span<PointF> buffer) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, Span<PointF>, IntersectionRule) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, Span<PointF> buffer, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. IntersectionRule intersectionRule How intersections are handled Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source Flatten() Converts the IPath into a simple linear path.. Declaration public IEnumerable<ISimplePath> Flatten() Returns Type Description IEnumerable < ISimplePath > Returns the current IPath as simple linear path. | Improve this Doc View Source PointAlongPath(Single) Calculates the point a certain distance a path. Declaration public SegmentInfo PointAlongPath(float distanceAlongPath) Parameters Type Name Description Single distanceAlongPath The distance along the path to find details of. Returns Type Description SegmentInfo Returns details about a point along a path. | Improve this Doc View Source Transform(Matrix3x2) Transforms the rectangle using specified matrix. Declaration public virtual IPath Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description IPath A new path with the matrix applied to it. Explicit Interface Implementations | Improve this Doc View Source ISimplePath.IsClosed Gets a value indicating whether this instance is a closed path. Declaration bool ISimplePath.IsClosed { get; } Returns Type Description Boolean | Improve this Doc View Source ISimplePath.Points Gets the points that make up this simple linear path. Declaration ReadOnlyMemory<PointF> ISimplePath.Points { get; } Returns Type Description ReadOnlyMemory < PointF > Implements IPath ISimplePath See Also IPath"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PathBuilder.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PathBuilder.html",
    "title": "Class PathBuilder",
    "keywords": "Class PathBuilder Allow you to derivatively build shapes and paths. Inheritance Object PathBuilder Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class PathBuilder : object Constructors | Improve this Doc View Source PathBuilder() Initializes a new instance of the PathBuilder class. Declaration public PathBuilder() | Improve this Doc View Source PathBuilder(Matrix3x2) Initializes a new instance of the PathBuilder class. Declaration public PathBuilder(Matrix3x2 defaultTransform) Parameters Type Name Description Matrix3x2 defaultTransform The default transform. Methods | Improve this Doc View Source AddBezier(PointF, PointF, PointF) Adds a quadratic bezier curve to the current figure joining the last point to the endPoint. Declaration public PathBuilder AddBezier(PointF startPoint, PointF controlPoint, PointF endPoint) Parameters Type Name Description PointF startPoint The start point. PointF controlPoint The control point1. PointF endPoint The end point. Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source AddBezier(PointF, PointF, PointF, PointF) Adds a cubic bezier curve to the current figure joining the last point to the endPoint. Declaration public PathBuilder AddBezier(PointF startPoint, PointF controlPoint1, PointF controlPoint2, PointF endPoint) Parameters Type Name Description PointF startPoint The start point. PointF controlPoint1 The control point1. PointF controlPoint2 The control point2. PointF endPoint The end point. Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source AddLine(PointF, PointF) Adds the line connecting the current point to the new point. Declaration public PathBuilder AddLine(PointF start, PointF end) Parameters Type Name Description PointF start The start. PointF end The end. Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source AddLine(Single, Single, Single, Single) Adds the line connecting the current point to the new point. Declaration public PathBuilder AddLine(float x1, float y1, float x2, float y2) Parameters Type Name Description Single x1 The x1. Single y1 The y1. Single x2 The x2. Single y2 The y2. Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source AddLines(IEnumerable<PointF>) Adds a series of line segments connecting the current point to the new points. Declaration public PathBuilder AddLines(IEnumerable<PointF> points) Parameters Type Name Description IEnumerable < PointF > points The points. Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source AddLines(PointF[]) Adds a series of line segments connecting the current point to the new points. Declaration public PathBuilder AddLines(params PointF[] points) Parameters Type Name Description PointF [] points The points. Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source AddSegment(ILineSegment) Adds the segment. Declaration public PathBuilder AddSegment(ILineSegment segment) Parameters Type Name Description ILineSegment segment The segment. Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source Build() Builds a complex polygon fromn the current working set of working operations. Declaration public IPath Build() Returns Type Description IPath The current set of operations as a complex polygon | Improve this Doc View Source Clear() Clears all drawn paths, Leaving any applied transforms. Declaration public void Clear() | Improve this Doc View Source CloseAllFigures() Closes the current figure. Declaration public PathBuilder CloseAllFigures() Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source CloseFigure() Closes the current figure. Declaration public PathBuilder CloseFigure() Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source Reset() Resets this instance, clearing any drawn paths and reseting any transforms. Declaration public PathBuilder Reset() Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source ResetOrigin() Resets the origin to the default. Declaration public PathBuilder ResetOrigin() Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source ResetTransform() Resets the translation to the default. Declaration public PathBuilder ResetTransform() Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source SetOrigin(PointF) Sets the origin all subsequent point should be relative to. Declaration public PathBuilder SetOrigin(PointF origin) Parameters Type Name Description PointF origin The origin. Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source SetTransform(Matrix3x2) Sets the translation to be applied to all items to follow being applied to the PathBuilder . Declaration public PathBuilder SetTransform(Matrix3x2 translation) Parameters Type Name Description Matrix3x2 translation The translation. Returns Type Description PathBuilder The PathBuilder | Improve this Doc View Source StartFigure() Starts a new figure but leaves the previous one open. Declaration public PathBuilder StartFigure() Returns Type Description PathBuilder The PathBuilder"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PathCollection.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PathCollection.html",
    "title": "Class PathCollection",
    "keywords": "Class PathCollection A aggregate of IPath s to apply common operations to them. Inheritance Object PathCollection Implements IPathCollection IEnumerable < IPath > Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class PathCollection : object, IPathCollection, IEnumerable<IPath> Constructors | Improve this Doc View Source PathCollection(IEnumerable<IPath>) Initializes a new instance of the PathCollection class. Declaration public PathCollection(IEnumerable<IPath> paths) Parameters Type Name Description IEnumerable < IPath > paths The collection of paths | Improve this Doc View Source PathCollection(IPath[]) Initializes a new instance of the PathCollection class. Declaration public PathCollection(params IPath[] paths) Parameters Type Name Description IPath [] paths The collection of paths Properties | Improve this Doc View Source Bounds Gets the bounds enclosing the path Declaration public RectangleF Bounds { get; } Property Value Type Description RectangleF Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<IPath> GetEnumerator() Returns Type Description IEnumerator < IPath > | Improve this Doc View Source Transform(Matrix3x2) Transforms the path using the specified matrix. Declaration public IPathCollection Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description IPathCollection A new path with the matrix applied to it. Implements IPathCollection IEnumerable<> See Also IPath"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PathExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PathExtensions.html",
    "title": "Class PathExtensions",
    "keywords": "Class PathExtensions Convenience methods that can be applied to shapes and paths Inheritance Object PathExtensions Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class PathExtensions : object Methods | Improve this Doc View Source FindIntersections(IPath, PointF, PointF) Finds the intersections. Declaration public static IEnumerable<PointF> FindIntersections(this IPath path, PointF start, PointF end) Parameters Type Name Description IPath path The path. PointF start The start. PointF end The end. Returns Type Description IEnumerable < PointF > The points along the line the intersect with the boundaries of the polygon. | Improve this Doc View Source Rotate(IPath, Single) Creates a path rotated by the specified radians around its center. Declaration public static IPath Rotate(this IPath path, float radians) Parameters Type Name Description IPath path The path to rotate. Single radians The radians to rotate the path. Returns Type Description IPath A IPath with a rotate transform applied. | Improve this Doc View Source Rotate(IPathCollection, Single) Creates a path rotated by the specified radians around its center. Declaration public static IPathCollection Rotate(this IPathCollection path, float radians) Parameters Type Name Description IPathCollection path The path to rotate. Single radians The radians to rotate the path. Returns Type Description IPathCollection A IPath with a rotate transform applied. | Improve this Doc View Source RotateDegree(IPath, Single) Creates a path rotated by the specified degrees around its center. Declaration public static IPath RotateDegree(this IPath shape, float degrees) Parameters Type Name Description IPath shape The path to rotate. Single degrees The degrees to rotate the path. Returns Type Description IPath A IPath with a rotate transform applied. | Improve this Doc View Source RotateDegree(IPathCollection, Single) Creates a path rotated by the specified degrees around its center. Declaration public static IPathCollection RotateDegree(this IPathCollection shape, float degrees) Parameters Type Name Description IPathCollection shape The path to rotate. Single degrees The degrees to rotate the path. Returns Type Description IPathCollection A IPath with a rotate transform applied. | Improve this Doc View Source Scale(IPath, Single) Creates a path translated by the supplied postion Declaration public static IPath Scale(this IPath path, float scale) Parameters Type Name Description IPath path The path to translate. Single scale The amount to scale along both the x and y axis. Returns Type Description IPath A IPath with a translate transform applied. | Improve this Doc View Source Scale(IPath, Single, Single) Creates a path translated by the supplied postion Declaration public static IPath Scale(this IPath path, float scaleX, float scaleY) Parameters Type Name Description IPath path The path to translate. Single scaleX The amount to scale along the X axis. Single scaleY The amount to scale along the Y axis. Returns Type Description IPath A IPath with a translate transform applied. | Improve this Doc View Source Scale(IPathCollection, Single) Creates a path translated by the supplied postion Declaration public static IPathCollection Scale(this IPathCollection path, float scale) Parameters Type Name Description IPathCollection path The path to translate. Single scale The amount to scale along both the x and y axis. Returns Type Description IPathCollection A IPath with a translate transform applied. | Improve this Doc View Source Scale(IPathCollection, Single, Single) Creates a path translated by the supplied postion Declaration public static IPathCollection Scale(this IPathCollection path, float scaleX, float scaleY) Parameters Type Name Description IPathCollection path The path to translate. Single scaleX The amount to scale along the X axis. Single scaleY The amount to scale along the Y axis. Returns Type Description IPathCollection A IPath with a translate transform applied. | Improve this Doc View Source Translate(IPath, PointF) Creates a path translated by the supplied postion Declaration public static IPath Translate(this IPath path, PointF position) Parameters Type Name Description IPath path The path to translate. PointF position The translation position. Returns Type Description IPath A IPath with a translate transform applied. | Improve this Doc View Source Translate(IPath, Single, Single) Creates a path translated by the supplied postion Declaration public static IPath Translate(this IPath path, float x, float y) Parameters Type Name Description IPath path The path to translate. Single x The amount to translate along the X axis. Single y The amount to translate along the Y axis. Returns Type Description IPath A IPath with a translate transform applied. | Improve this Doc View Source Translate(IPathCollection, PointF) Creates a path translated by the supplied postion Declaration public static IPathCollection Translate(this IPathCollection path, PointF position) Parameters Type Name Description IPathCollection path The path to translate. PointF position The translation position. Returns Type Description IPathCollection A IPath with a translate transform applied. | Improve this Doc View Source Translate(IPathCollection, Single, Single) Creates a path translated by the supplied postion Declaration public static IPathCollection Translate(this IPathCollection path, float x, float y) Parameters Type Name Description IPathCollection path The path to translate. Single x The amount to translate along the X axis. Single y The amount to translate along the Y axis. Returns Type Description IPathCollection A IPath with a translate transform applied."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PathTypes.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PathTypes.html",
    "title": "Enum PathTypes",
    "keywords": "Enum PathTypes Describes the different type of paths. Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public enum PathTypes : int Fields Name Description Closed Denotes a path describing a single simple closed shape Mixed Denotes a path containing one or more child paths that could be open or closed. Open Denotes a path containing a single simple open path"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PointInfo.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PointInfo.html",
    "title": "Struct PointInfo",
    "keywords": "Struct PointInfo Returns meta data about the nearest point on a path from a vector Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public struct PointInfo Fields | Improve this Doc View Source ClosestPointOnPath The closest point to SearchPoint that lies on the path. Declaration public PointF ClosestPointOnPath Field Value Type Description PointF | Improve this Doc View Source DistanceAlongPath The distance along path ClosestPointOnPath is away from the start of the path Declaration public float DistanceAlongPath Field Value Type Description Single | Improve this Doc View Source DistanceFromPath The distance SearchPoint is away from ClosestPointOnPath . Declaration public float DistanceFromPath Field Value Type Description Single | Improve this Doc View Source SearchPoint The search point Declaration public PointF SearchPoint Field Value Type Description PointF"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Polygon.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Polygon.html",
    "title": "Class Polygon",
    "keywords": "Class Polygon A shape made up of a single path made up of one of more ILineSegment s Inheritance Object Path Polygon RegularPolygon Star Implements IPath ISimplePath Inherited Members Path.Length Path.ISimplePath.IsClosed Path.ISimplePath.Points Path.Bounds Path.PathType Path.MaxIntersections Path.LineSegments Path.Distance(PointF) Path.AsClosedPath() Path.Flatten() Path.FindIntersections(PointF, PointF, PointF[], Int32) Path.FindIntersections(PointF, PointF, Span<PointF>) Path.FindIntersections(PointF, PointF, PointF[], Int32, IntersectionRule) Path.FindIntersections(PointF, PointF, Span<PointF>, IntersectionRule) Path.Contains(PointF) Path.PointAlongPath(Single) Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class Polygon : Path, IPath, ISimplePath, IInternalPathOwner Constructors | Improve this Doc View Source Polygon(IEnumerable<ILineSegment>) Initializes a new instance of the Polygon class. Declaration public Polygon(IEnumerable<ILineSegment> segments) Parameters Type Name Description IEnumerable < ILineSegment > segments The segments. | Improve this Doc View Source Polygon(ILineSegment) Initializes a new instance of the Polygon class. Declaration public Polygon(ILineSegment segment) Parameters Type Name Description ILineSegment segment The segment. | Improve this Doc View Source Polygon(ILineSegment[]) Initializes a new instance of the Polygon class. Declaration public Polygon(params ILineSegment[] segments) Parameters Type Name Description ILineSegment [] segments The segments. Properties | Improve this Doc View Source IsClosed Gets a value indicating whether this instance is a closed path. Declaration protected override bool IsClosed { get; } Property Value Type Description Boolean Overrides Path.IsClosed Methods | Improve this Doc View Source Transform(Matrix3x2) Transforms the rectangle using specified matrix. Declaration public override IPath Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description IPath A new shape with the matrix applied to it. Overrides Path.Transform(Matrix3x2) Implements IPath ISimplePath"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PolygonClipper.ClippablePath.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PolygonClipper.ClippablePath.html",
    "title": "Struct ClippablePath",
    "keywords": "Struct ClippablePath Represents a shape and its type for when clipping is applies. Namespace : SixLabors.ImageSharp.Drawing.PolygonClipper Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public struct ClippablePath Constructors | Improve this Doc View Source ClippablePath(IPath, ClippingType) Initializes a new instance of the ClippablePath struct. Declaration public ClippablePath(IPath path, ClippingType type) Parameters Type Name Description IPath path The path. ClippingType type The type. Properties | Improve this Doc View Source Path Gets the path. Declaration public IPath Path { get; } Property Value Type Description IPath | Improve this Doc View Source Type Gets the type. Declaration public ClippingType Type { get; } Property Value Type Description ClippingType The type."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PolygonClipper.Clipper.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PolygonClipper.Clipper.html",
    "title": "Class Clipper",
    "keywords": "Class Clipper Library to clip polygons. Inheritance Object Clipper Namespace : SixLabors.ImageSharp.Drawing.PolygonClipper Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class Clipper : object Constructors | Improve this Doc View Source Clipper() Initializes a new instance of the Clipper class. Declaration public Clipper() | Improve this Doc View Source Clipper(ClippablePath[]) Initializes a new instance of the Clipper class. Declaration public Clipper(params ClippablePath[] shapes) Parameters Type Name Description ClippablePath [] shapes The shapes. Methods | Improve this Doc View Source AddPath(IPath, ClippingType) Adds the path. Declaration public void AddPath(IPath path, ClippingType clippingType) Parameters Type Name Description IPath path The path. ClippingType clippingType The clipping type. | Improve this Doc View Source AddPaths(IEnumerable<IPath>, ClippingType) Adds the shapes. Declaration public void AddPaths(IEnumerable<IPath> paths, ClippingType clippingType) Parameters Type Name Description IEnumerable < IPath > paths The paths. ClippingType clippingType The clipping type. | Improve this Doc View Source AddPaths(ClippablePath[]) Adds the paths. Declaration public void AddPaths(ClippablePath[] paths) Parameters Type Name Description ClippablePath [] paths The paths. | Improve this Doc View Source GenerateClippedShapes() Executes the specified clip type. Declaration public IPath[] GenerateClippedShapes() Returns Type Description IPath [] Returns the IPath array containing the converted polygons."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PolygonClipper.ClippingType.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PolygonClipper.ClippingType.html",
    "title": "Enum ClippingType",
    "keywords": "Enum ClippingType Poly Type Namespace : SixLabors.ImageSharp.Drawing.PolygonClipper Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public enum ClippingType : int Fields Name Description Clip Represents a shape to act as a clipped path. Subject Represent a main shape to act as a main subject whoes path will be clipped or merged."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PolygonClipper.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.PolygonClipper.html",
    "title": "Namespace SixLabors.ImageSharp.Drawing.PolygonClipper",
    "keywords": "Namespace SixLabors.ImageSharp.Drawing.PolygonClipper Classes Clipper Library to clip polygons. Structs ClippablePath Represents a shape and its type for when clipping is applies. Enums ClippingType Poly Type"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.BrushApplicator-1.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.BrushApplicator-1.html",
    "title": "Class BrushApplicator<TPixel>",
    "keywords": "Class BrushApplicator<TPixel> A primitive that converts a point into a color for discovering the fill color based on an implementation. Inheritance Object BrushApplicator<TPixel> Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public abstract class BrushApplicator<TPixel> : IDisposable where TPixel : struct, IPixel<TPixel> Type Parameters Name Description TPixel The pixel format. Properties | Improve this Doc View Source Configuration Gets the configuration instance to use when performing operations. Declaration protected Configuration Configuration { get; } Property Value Type Description Configuration | Improve this Doc View Source Options Gets thegraphics options Declaration protected GraphicsOptions Options { get; } Property Value Type Description GraphicsOptions | Improve this Doc View Source Target Gets the target image. Declaration protected ImageFrame<TPixel> Target { get; } Property Value Type Description ImageFrame <TPixel> Methods | Improve this Doc View Source Apply(Span<Single>, Int32, Int32) Applies the opacity weighting for each pixel in a scanline to the target based on the pattern contained in the brush. Declaration public virtual void Apply(Span<float> scanline, int x, int y) Parameters Type Name Description Span < Single > scanline A collection of opacity values between 0 and 1 to be merged with the brushed color value before being applied to the target. Int32 x The x-position in the target pixel space that the start of the scanline data corresponds to. Int32 y The y-position in the target pixel space that whole scanline corresponds to. Remarks scanlineBuffer will be > scanlineWidth but provide and offset in case we want to share a larger buffer across runs. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes the object and frees resources for the Garbage Collector. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Whether to dispose managed and unmanaged objects."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Brushes.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Brushes.html",
    "title": "Class Brushes",
    "keywords": "Class Brushes A collection of methods for creating generic brushes. Inheritance Object Brushes Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class Brushes : object Methods | Improve this Doc View Source BackwardDiagonal(Color) Create as brush that will paint a Backward Diagonal Hatch Pattern with the specified foreground color and a transparent background. Declaration public static PatternBrush BackwardDiagonal(Color foreColor) Parameters Type Name Description Color foreColor Color of the foreground. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source BackwardDiagonal(Color, Color) Create as brush that will paint a Backward Diagonal Hatch Pattern with the specified colors Declaration public static PatternBrush BackwardDiagonal(Color foreColor, Color backColor) Parameters Type Name Description Color foreColor Color of the foreground. Color backColor Color of the background. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source ForwardDiagonal(Color) Create as brush that will paint a Forward Diagonal Hatch Pattern with the specified foreground color and a transparent background. Declaration public static PatternBrush ForwardDiagonal(Color foreColor) Parameters Type Name Description Color foreColor Color of the foreground. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source ForwardDiagonal(Color, Color) Create as brush that will paint a Forward Diagonal Hatch Pattern with the specified colors Declaration public static PatternBrush ForwardDiagonal(Color foreColor, Color backColor) Parameters Type Name Description Color foreColor Color of the foreground. Color backColor Color of the background. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Horizontal(Color) Create as brush that will paint a Horizontal Hatch Pattern with the specified foreground color and a transparent background. Declaration public static PatternBrush Horizontal(Color foreColor) Parameters Type Name Description Color foreColor Color of the foreground. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Horizontal(Color, Color) Create as brush that will paint a Horizontal Hatch Pattern with the specified colors Declaration public static PatternBrush Horizontal(Color foreColor, Color backColor) Parameters Type Name Description Color foreColor Color of the foreground. Color backColor Color of the background. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Min(Color) Create as brush that will paint a Min Hatch Pattern with the specified foreground color and a transparent background. Declaration public static PatternBrush Min(Color foreColor) Parameters Type Name Description Color foreColor Color of the foreground. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Min(Color, Color) Create as brush that will paint a Min Hatch Pattern with the specified colors Declaration public static PatternBrush Min(Color foreColor, Color backColor) Parameters Type Name Description Color foreColor Color of the foreground. Color backColor Color of the background. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Percent10(Color) Create as brush that will paint a Percent10 Hatch Pattern with the specified colors Declaration public static PatternBrush Percent10(Color foreColor) Parameters Type Name Description Color foreColor Color of the foreground. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Percent10(Color, Color) Create as brush that will paint a Percent10 Hatch Pattern with the specified colors Declaration public static PatternBrush Percent10(Color foreColor, Color backColor) Parameters Type Name Description Color foreColor Color of the foreground. Color backColor Color of the background. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Percent20(Color) Create as brush that will paint a Percent20 Hatch Pattern with the specified foreground color and a transparent background. Declaration public static PatternBrush Percent20(Color foreColor) Parameters Type Name Description Color foreColor Color of the foreground. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Percent20(Color, Color) Create as brush that will paint a Percent20 Hatch Pattern with the specified colors Declaration public static PatternBrush Percent20(Color foreColor, Color backColor) Parameters Type Name Description Color foreColor Color of the foreground. Color backColor Color of the background. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Solid(Color) Create as brush that will paint a solid color Declaration public static SolidBrush Solid(Color color) Parameters Type Name Description Color color The color. Returns Type Description SolidBrush A New PatternBrush | Improve this Doc View Source Vertical(Color) Create as brush that will paint a Vertical Hatch Pattern with the specified foreground color and a transparent background. Declaration public static PatternBrush Vertical(Color foreColor) Parameters Type Name Description Color foreColor Color of the foreground. Returns Type Description PatternBrush A New PatternBrush | Improve this Doc View Source Vertical(Color, Color) Create as brush that will paint a Vertical Hatch Pattern with the specified colors Declaration public static PatternBrush Vertical(Color foreColor, Color backColor) Parameters Type Name Description Color foreColor Color of the foreground. Color backColor Color of the background. Returns Type Description PatternBrush A New PatternBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ClearExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ClearExtensions.html",
    "title": "Class ClearExtensions",
    "keywords": "Class ClearExtensions Adds extensions that allow the clearing of regions with various brushes to the type. Inheritance Object ClearExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class ClearExtensions : object Methods | Improve this Doc View Source Clear(IImageProcessingContext, Color) Flood fills the image with the specified color without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, Color color) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, GraphicsOptions, Color) Flood fills the image with the specified color without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, GraphicsOptions options, Color color) Parameters Type Name Description IImageProcessingContext source The image this method extends. GraphicsOptions options The graphics options. Color color The color. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, GraphicsOptions, IBrush) Flood fills the image with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, GraphicsOptions options, IBrush brush) Parameters Type Name Description IImageProcessingContext source The image this method extends. GraphicsOptions options The graphics options. IBrush brush The details how to fill the region of interest. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, IBrush) Flood fills the image with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, IBrush brush) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The details how to fill the region of interest. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ClearPathExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ClearPathExtensions.html",
    "title": "Class ClearPathExtensions",
    "keywords": "Class ClearPathExtensions Adds extensions that allow the filling of polygon outlines to the type. Inheritance Object ClearPathExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class ClearPathExtensions : object Methods | Improve this Doc View Source Clear(IImageProcessingContext, Color, IPath) Flood fills the image in the shape of the provided polygon with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, Color color, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, IBrush, IPath) Flood fills the image in the shape of the provided polygon with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, IBrush brush, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, ShapeGraphicsOptions, Color, IPath) Flood fills the image in the shape of the provided polygon with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, ShapeGraphicsOptions, IBrush, IPath) Flood fills the image in the shape of the provided polygon with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The graphics options. IBrush brush The brush. IPath path The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ClearRectangleExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ClearRectangleExtensions.html",
    "title": "Class ClearRectangleExtensions",
    "keywords": "Class ClearRectangleExtensions Adds extensions that allow the filling of rectangles to the type. Inheritance Object ClearRectangleExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class ClearRectangleExtensions : object Methods | Improve this Doc View Source Clear(IImageProcessingContext, Color, RectangleF) Flood fills the image in the shape of the provided rectangle with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, Color color, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, IBrush, RectangleF) Flood fills the image in the shape of the provided rectangle with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, IBrush brush, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, ShapeGraphicsOptions, Color, RectangleF) Flood fills the image in the shape of the provided rectangle with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, ShapeGraphicsOptions, IBrush, RectangleF) Flood fills the image in the shape of the provided rectangle with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IBrush brush The brush. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ClearRegionExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ClearRegionExtensions.html",
    "title": "Class ClearRegionExtensions",
    "keywords": "Class ClearRegionExtensions Adds extensions that allow the filling of regions with various brushes to the type. Inheritance Object ClearRegionExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class ClearRegionExtensions : object Methods | Improve this Doc View Source Clear(IImageProcessingContext, Color, Region) Flood fills the image with in the region with the specified color without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, Color color, Region region) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Region region The region. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, IBrush, Region) Flood fills the image with in the region with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, IBrush brush, Region region) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. Region region The region. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, ShapeGraphicsOptions, Color, Region) Flood fills the image with in the region with the specified color without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, Region region) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. Region region The region. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Clear(IImageProcessingContext, ShapeGraphicsOptions, IBrush, Region) Flood fills the image with in the region with the specified brush without any blending. Declaration public static IImageProcessingContext Clear(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, Region region) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The graphics options. IBrush brush The brush. Region region The region. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ColorStop.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ColorStop.html",
    "title": "Struct ColorStop",
    "keywords": "Struct ColorStop A struct that defines a single color stop. Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public struct ColorStop Constructors | Improve this Doc View Source ColorStop(Single, Color) Initializes a new instance of the ColorStop struct. Declaration public ColorStop(float ratio, in Color color) Parameters Type Name Description Single ratio Where should it be? 0 is at the start, 1 at the end of the Gradient. Color color What color should be used at that point? Properties | Improve this Doc View Source Color Gets the color to be used. Declaration public Color Color { get; } Property Value Type Description Color | Improve this Doc View Source Ratio Gets the point along the defined gradient axis. Declaration public float Ratio { get; } Property Value Type Description Single"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawBezierExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawBezierExtensions.html",
    "title": "Class DrawBezierExtensions",
    "keywords": "Class DrawBezierExtensions Adds extensions that allow the drawing of Bezier paths to the type. Inheritance Object DrawBezierExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class DrawBezierExtensions : object Methods | Improve this Doc View Source DrawBeziers(IImageProcessingContext, Color, Single, PointF[]) Draws the provided points as an open Bezier path at the provided thickness with the supplied brush Declaration public static IImageProcessingContext DrawBeziers(this IImageProcessingContext source, Color color, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawBeziers(IImageProcessingContext, IBrush, Single, PointF[]) Draws the provided points as an open Bezier path at the provided thickness with the supplied brush Declaration public static IImageProcessingContext DrawBeziers(this IImageProcessingContext source, IBrush brush, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawBeziers(IImageProcessingContext, IPen, PointF[]) Draws the provided points as an open Bezier path with the supplied pen Declaration public static IImageProcessingContext DrawBeziers(this IImageProcessingContext source, IPen pen, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. IPen pen The pen. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawBeziers(IImageProcessingContext, ShapeGraphicsOptions, Color, Single, PointF[]) Draws the provided points as an open Bezier path at the provided thickness with the supplied brush Declaration public static IImageProcessingContext DrawBeziers(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawBeziers(IImageProcessingContext, ShapeGraphicsOptions, IBrush, Single, PointF[]) Draws the provided points as an open Bezier path at the provided thickness with the supplied brush Declaration public static IImageProcessingContext DrawBeziers(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IBrush brush The brush. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawBeziers(IImageProcessingContext, ShapeGraphicsOptions, IPen, PointF[]) Draws the provided points as an open Bezier path with the supplied pen Declaration public static IImageProcessingContext DrawBeziers(this IImageProcessingContext source, ShapeGraphicsOptions options, IPen pen, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IPen pen The pen. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawLineExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawLineExtensions.html",
    "title": "Class DrawLineExtensions",
    "keywords": "Class DrawLineExtensions Adds extensions that allow the drawing of lines to the type. Inheritance Object DrawLineExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class DrawLineExtensions : object Methods | Improve this Doc View Source DrawLines(IImageProcessingContext, Color, Single, PointF[]) Draws the provided Points as an open Linear path at the provided thickness with the supplied brush Declaration public static IImageProcessingContext DrawLines(this IImageProcessingContext source, Color color, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawLines(IImageProcessingContext, IBrush, Single, PointF[]) Draws the provided Points as an open Linear path at the provided thickness with the supplied brush Declaration public static IImageProcessingContext DrawLines(this IImageProcessingContext source, IBrush brush, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawLines(IImageProcessingContext, IPen, PointF[]) Draws the provided Points as an open Linear path with the supplied pen Declaration public static IImageProcessingContext DrawLines(this IImageProcessingContext source, IPen pen, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. IPen pen The pen. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawLines(IImageProcessingContext, ShapeGraphicsOptions, Color, Single, PointF[]) Draws the provided Points as an open Linear path at the provided thickness with the supplied brush Declaration public static IImageProcessingContext DrawLines(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawLines(IImageProcessingContext, ShapeGraphicsOptions, IBrush, Single, PointF[]) Draws the provided Points as an open Linear path at the provided thickness with the supplied brush Declaration public static IImageProcessingContext DrawLines(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IBrush brush The brush. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawLines(IImageProcessingContext, ShapeGraphicsOptions, IPen, PointF[]) Draws the provided Points as an open Linear path with the supplied pen Declaration public static IImageProcessingContext DrawLines(this IImageProcessingContext source, ShapeGraphicsOptions options, IPen pen, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IPen pen The pen. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawPathCollectionExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawPathCollectionExtensions.html",
    "title": "Class DrawPathCollectionExtensions",
    "keywords": "Class DrawPathCollectionExtensions Adds extensions that allow the drawing of collections of polygon outlines to the type. Inheritance Object DrawPathCollectionExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class DrawPathCollectionExtensions : object Methods | Improve this Doc View Source Draw(IImageProcessingContext, Color, Single, IPathCollection) Draws the outline of the polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, Color color, float thickness, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Single thickness The thickness. IPathCollection paths The paths. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, IBrush, Single, IPathCollection) Draws the outline of the polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, IBrush brush, float thickness, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. Single thickness The thickness. IPathCollection paths The paths. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, IPen, IPathCollection) Draws the outline of the polygon with the provided pen. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, IPen pen, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. IPen pen The pen. IPathCollection paths The paths. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, ShapeGraphicsOptions, Color, Single, IPathCollection) Draws the outline of the polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, float thickness, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. Single thickness The thickness. IPathCollection paths The paths. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, ShapeGraphicsOptions, IBrush, Single, IPathCollection) Draws the outline of the polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, float thickness, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IBrush brush The brush. Single thickness The thickness. IPathCollection paths The shapes. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, ShapeGraphicsOptions, IPen, IPathCollection) Draws the outline of the polygon with the provided pen. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, ShapeGraphicsOptions options, IPen pen, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IPen pen The pen. IPathCollection paths The paths. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawPathExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawPathExtensions.html",
    "title": "Class DrawPathExtensions",
    "keywords": "Class DrawPathExtensions Adds extensions that allow the drawing of polygon outlines to the type. Inheritance Object DrawPathExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class DrawPathExtensions : object Methods | Improve this Doc View Source Draw(IImageProcessingContext, Color, Single, IPath) Draws the outline of the polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, Color color, float thickness, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Single thickness The thickness. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, IBrush, Single, IPath) Draws the outline of the polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, IBrush brush, float thickness, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. Single thickness The thickness. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, IPen, IPath) Draws the outline of the polygon with the provided pen. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, IPen pen, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. IPen pen The pen. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, ShapeGraphicsOptions, Color, Single, IPath) Draws the outline of the polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, float thickness, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. Single thickness The thickness. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, ShapeGraphicsOptions, IBrush, Single, IPath) Draws the outline of the polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, float thickness, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IBrush brush The brush. Single thickness The thickness. IPath path The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, ShapeGraphicsOptions, IPen, IPath) Draws the outline of the polygon with the provided pen. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, ShapeGraphicsOptions options, IPen pen, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IPen pen The pen. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawPolygonExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawPolygonExtensions.html",
    "title": "Class DrawPolygonExtensions",
    "keywords": "Class DrawPolygonExtensions Adds extensions that allow the drawing of closed linear polygons to the type. Inheritance Object DrawPolygonExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class DrawPolygonExtensions : object Methods | Improve this Doc View Source DrawPolygon(IImageProcessingContext, Color, Single, PointF[]) Draws the provided Points as a closed Linear Polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext DrawPolygon(this IImageProcessingContext source, Color color, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawPolygon(IImageProcessingContext, IBrush, Single, PointF[]) Draws the provided Points as a closed Linear Polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext DrawPolygon(this IImageProcessingContext source, IBrush brush, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawPolygon(IImageProcessingContext, IPen, PointF[]) Draws the provided Points as a closed Linear Polygon with the provided Pen. Declaration public static IImageProcessingContext DrawPolygon(this IImageProcessingContext source, IPen pen, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. IPen pen The pen. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawPolygon(IImageProcessingContext, ShapeGraphicsOptions, Color, Single, PointF[]) Draws the provided Points as a closed Linear Polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext DrawPolygon(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawPolygon(IImageProcessingContext, ShapeGraphicsOptions, IBrush, Single, PointF[]) Draws the provided Points as a closed Linear Polygon with the provided brush at the provided thickness. Declaration public static IImageProcessingContext DrawPolygon(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, float thickness, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IBrush brush The brush. Single thickness The thickness. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source DrawPolygon(IImageProcessingContext, ShapeGraphicsOptions, IPen, PointF[]) Draws the provided Points as a closed Linear Polygon with the provided Pen. Declaration public static IImageProcessingContext DrawPolygon(this IImageProcessingContext source, ShapeGraphicsOptions options, IPen pen, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IPen pen The pen. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawRectangleExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawRectangleExtensions.html",
    "title": "Class DrawRectangleExtensions",
    "keywords": "Class DrawRectangleExtensions Adds extensions that allow the drawing of rectangles to the type. Inheritance Object DrawRectangleExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class DrawRectangleExtensions : object Methods | Improve this Doc View Source Draw(IImageProcessingContext, Color, Single, RectangleF) Draws the outline of the rectangle with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, Color color, float thickness, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Single thickness The thickness. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, IBrush, Single, RectangleF) Draws the outline of the rectangle with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, IBrush brush, float thickness, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. Single thickness The thickness. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, IPen, RectangleF) Draws the outline of the rectangle with the provided pen. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, IPen pen, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. IPen pen The pen. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, ShapeGraphicsOptions, Color, Single, RectangleF) Draws the outline of the rectangle with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, float thickness, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. Single thickness The thickness. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, ShapeGraphicsOptions, IBrush, Single, RectangleF) Draws the outline of the rectangle with the provided brush at the provided thickness. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, float thickness, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IBrush brush The brush. Single thickness The thickness. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Draw(IImageProcessingContext, ShapeGraphicsOptions, IPen, RectangleF) Draws the outline of the rectangle with the provided pen. Declaration public static IImageProcessingContext Draw(this IImageProcessingContext source, ShapeGraphicsOptions options, IPen pen, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IPen pen The pen. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawTextExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.DrawTextExtensions.html",
    "title": "Class DrawTextExtensions",
    "keywords": "Class DrawTextExtensions Adds extensions that allow the drawing of text to the type. Inheritance Object DrawTextExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class DrawTextExtensions : object Methods | Improve this Doc View Source DrawText(IImageProcessingContext, TextGraphicsOptions, String, Font, Color, PointF) Draws the text onto the image filled via the brush. Declaration public static IImageProcessingContext DrawText(this IImageProcessingContext source, TextGraphicsOptions options, string text, Font font, Color color, PointF location) Parameters Type Name Description IImageProcessingContext source The image this method extends. TextGraphicsOptions options The options. String text The text. Font font The font. Color color The color. PointF location The location. Returns Type Description IImageProcessingContext The . | Improve this Doc View Source DrawText(IImageProcessingContext, TextGraphicsOptions, String, Font, IBrush, PointF) Draws the text onto the image filled via the brush. Declaration public static IImageProcessingContext DrawText(this IImageProcessingContext source, TextGraphicsOptions options, string text, Font font, IBrush brush, PointF location) Parameters Type Name Description IImageProcessingContext source The image this method extends. TextGraphicsOptions options The options. String text The text. Font font The font. IBrush brush The brush. PointF location The location. Returns Type Description IImageProcessingContext The . | Improve this Doc View Source DrawText(IImageProcessingContext, TextGraphicsOptions, String, Font, IBrush, IPen, PointF) Draws the text using the default resolution of 72dpi onto the image filled via the brush then outlined via the pen. Declaration public static IImageProcessingContext DrawText(this IImageProcessingContext source, TextGraphicsOptions options, string text, Font font, IBrush brush, IPen pen, PointF location) Parameters Type Name Description IImageProcessingContext source The image this method extends. TextGraphicsOptions options The options. String text The text. Font font The font. IBrush brush The brush. IPen pen The pen. PointF location The location. Returns Type Description IImageProcessingContext The . | Improve this Doc View Source DrawText(IImageProcessingContext, TextGraphicsOptions, String, Font, IPen, PointF) Draws the text onto the image outlined via the pen. Declaration public static IImageProcessingContext DrawText(this IImageProcessingContext source, TextGraphicsOptions options, string text, Font font, IPen pen, PointF location) Parameters Type Name Description IImageProcessingContext source The image this method extends. TextGraphicsOptions options The options. String text The text. Font font The font. IPen pen The pen. PointF location The location. Returns Type Description IImageProcessingContext The . | Improve this Doc View Source DrawText(IImageProcessingContext, String, Font, Color, PointF) Draws the text onto the image filled via the brush. Declaration public static IImageProcessingContext DrawText(this IImageProcessingContext source, string text, Font font, Color color, PointF location) Parameters Type Name Description IImageProcessingContext source The image this method extends. String text The text. Font font The font. Color color The color. PointF location The location. Returns Type Description IImageProcessingContext The . | Improve this Doc View Source DrawText(IImageProcessingContext, String, Font, IBrush, PointF) Draws the text onto the image filled via the brush. Declaration public static IImageProcessingContext DrawText(this IImageProcessingContext source, string text, Font font, IBrush brush, PointF location) Parameters Type Name Description IImageProcessingContext source The image this method extends. String text The text. Font font The font. IBrush brush The brush. PointF location The location. Returns Type Description IImageProcessingContext The . | Improve this Doc View Source DrawText(IImageProcessingContext, String, Font, IBrush, IPen, PointF) Draws the text onto the image filled via the brush then outlined via the pen. Declaration public static IImageProcessingContext DrawText(this IImageProcessingContext source, string text, Font font, IBrush brush, IPen pen, PointF location) Parameters Type Name Description IImageProcessingContext source The image this method extends. String text The text. Font font The font. IBrush brush The brush. IPen pen The pen. PointF location The location. Returns Type Description IImageProcessingContext The . | Improve this Doc View Source DrawText(IImageProcessingContext, String, Font, IPen, PointF) Draws the text onto the image outlined via the pen. Declaration public static IImageProcessingContext DrawText(this IImageProcessingContext source, string text, Font font, IPen pen, PointF location) Parameters Type Name Description IImageProcessingContext source The image this method extends. String text The text. Font font The font. IPen pen The pen. PointF location The location. Returns Type Description IImageProcessingContext The ."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.EllipticGradientBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.EllipticGradientBrush.html",
    "title": "Class EllipticGradientBrush",
    "keywords": "Class EllipticGradientBrush Gradient Brush with elliptic shape. The ellipse is defined by a center point, a point on the longest extension of the ellipse and the ratio between longest and shortest extension. Inheritance Object GradientBrush EllipticGradientBrush Implements IBrush Inherited Members GradientBrush.RepetitionMode GradientBrush.ColorStops Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public sealed class EllipticGradientBrush : GradientBrush, IBrush Constructors | Improve this Doc View Source EllipticGradientBrush(PointF, PointF, Single, GradientRepetitionMode, ColorStop[]) Declaration public EllipticGradientBrush(PointF center, PointF referenceAxisEnd, float axisRatio, GradientRepetitionMode repetitionMode, params ColorStop[] colorStops) Parameters Type Name Description PointF center The center of the elliptical gradient and 0 for the color stops. PointF referenceAxisEnd The end point of the reference axis of the ellipse. Single axisRatio The ratio of the axis widths. The second axis' is perpendicular to the reference axis and it's length is the reference axis' length multiplied by this factor. GradientRepetitionMode repetitionMode Defines how the colors of the gradients are repeated. ColorStop [] colorStops the color stops as defined in base class. Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration public override BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Overrides SixLabors.ImageSharp.Drawing.Processing.GradientBrush.CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image. Implements IBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillExtensions.html",
    "title": "Class FillExtensions",
    "keywords": "Class FillExtensions Adds extensions that allow the filling of regions with various brushes to the type. Inheritance Object FillExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class FillExtensions : object Methods | Improve this Doc View Source Fill(IImageProcessingContext, Color) Flood fills the image with the specified color. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, Color color) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, GraphicsOptions, Color) Flood fills the image with the specified color. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, GraphicsOptions options, Color color) Parameters Type Name Description IImageProcessingContext source The image this method extends. GraphicsOptions options The graphics options. Color color The color. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, GraphicsOptions, IBrush) Flood fills the image with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, GraphicsOptions options, IBrush brush) Parameters Type Name Description IImageProcessingContext source The image this method extends. GraphicsOptions options The graphics options. IBrush brush The details how to fill the region of interest. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, IBrush) Flood fills the image with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, IBrush brush) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The details how to fill the region of interest. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillPathBuilderExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillPathBuilderExtensions.html",
    "title": "Class FillPathBuilderExtensions",
    "keywords": "Class FillPathBuilderExtensions Adds extensions that allow the filling of polygons with various brushes to the type. Inheritance Object FillPathBuilderExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class FillPathBuilderExtensions : object Methods | Improve this Doc View Source Fill(IImageProcessingContext, Color, Action<PathBuilder>) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, Color color, Action<PathBuilder> path) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Action < PathBuilder > path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, IBrush, Action<PathBuilder>) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, IBrush brush, Action<PathBuilder> path) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. Action < PathBuilder > path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, Color, Action<PathBuilder>) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, Action<PathBuilder> path) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. Action < PathBuilder > path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, IBrush, Action<PathBuilder>) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, Action<PathBuilder> path) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The graphics options. IBrush brush The brush. Action < PathBuilder > path The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillPathCollectionExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillPathCollectionExtensions.html",
    "title": "Class FillPathCollectionExtensions",
    "keywords": "Class FillPathCollectionExtensions Adds extensions that allow the filling of collections of polygon outlines to the type. Inheritance Object FillPathCollectionExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class FillPathCollectionExtensions : object Methods | Improve this Doc View Source Fill(IImageProcessingContext, Color, IPathCollection) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, Color color, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. IPathCollection paths The paths. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, IBrush, IPathCollection) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, IBrush brush, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. IPathCollection paths The paths. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, Color, IPathCollection) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. IPathCollection paths The paths. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, IBrush, IPathCollection) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, IPathCollection paths) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The graphics options. IBrush brush The brush. IPathCollection paths The shapes. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillPathExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillPathExtensions.html",
    "title": "Class FillPathExtensions",
    "keywords": "Class FillPathExtensions Adds extensions that allow the filling of polygon outlines to the type. Inheritance Object FillPathExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class FillPathExtensions : object Methods | Improve this Doc View Source Fill(IImageProcessingContext, Color, IPath) Flood fills the image in the shape of the provided polygon with the specified brush.. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, Color color, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, IBrush, IPath) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, IBrush brush, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, Color, IPath) Flood fills the image in the shape of the provided polygon with the specified brush.. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. IPath path The path. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, IBrush, IPath) Flood fills the image in the shape of the provided polygon with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, IPath path) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The graphics options. IBrush brush The brush. IPath path The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillPolygonExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillPolygonExtensions.html",
    "title": "Class FillPolygonExtensions",
    "keywords": "Class FillPolygonExtensions Adds extensions that allow the filling of closed linear polygons to the type. Inheritance Object FillPolygonExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class FillPolygonExtensions : object Methods | Improve this Doc View Source FillPolygon(IImageProcessingContext, Color, PointF[]) Flood fills the image in the shape of a Linear polygon described by the points Declaration public static IImageProcessingContext FillPolygon(this IImageProcessingContext source, Color color, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source FillPolygon(IImageProcessingContext, IBrush, PointF[]) Flood fills the image in the shape of a Linear polygon described by the points Declaration public static IImageProcessingContext FillPolygon(this IImageProcessingContext source, IBrush brush, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source FillPolygon(IImageProcessingContext, ShapeGraphicsOptions, Color, PointF[]) Flood fills the image in the shape of a Linear polygon described by the points Declaration public static IImageProcessingContext FillPolygon(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source FillPolygon(IImageProcessingContext, ShapeGraphicsOptions, IBrush, PointF[]) Flood fills the image in the shape of a Linear polygon described by the points Declaration public static IImageProcessingContext FillPolygon(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, params PointF[] points) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IBrush brush The brush. PointF [] points The points. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillRectangleExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillRectangleExtensions.html",
    "title": "Class FillRectangleExtensions",
    "keywords": "Class FillRectangleExtensions Adds extensions that allow the filling of rectangles to the type. Inheritance Object FillRectangleExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class FillRectangleExtensions : object Methods | Improve this Doc View Source Fill(IImageProcessingContext, Color, RectangleF) Flood fills the image in the shape of the provided rectangle with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, Color color, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, IBrush, RectangleF) Flood fills the image in the shape of the provided rectangle with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, IBrush brush, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, Color, RectangleF) Flood fills the image in the shape of the provided rectangle with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, IBrush, RectangleF) Flood fills the image in the shape of the provided rectangle with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, RectangleF shape) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. IBrush brush The brush. RectangleF shape The shape. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillRegionExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.FillRegionExtensions.html",
    "title": "Class FillRegionExtensions",
    "keywords": "Class FillRegionExtensions Adds extensions that allow the filling of regions with various brushes to the type. Inheritance Object FillRegionExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class FillRegionExtensions : object Methods | Improve this Doc View Source Fill(IImageProcessingContext, Color, Region) Flood fills the image with in the region with the specified color. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, Color color, Region region) Parameters Type Name Description IImageProcessingContext source The image this method extends. Color color The color. Region region The region. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, IBrush, Region) Flood fills the image with in the region with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, IBrush brush, Region region) Parameters Type Name Description IImageProcessingContext source The image this method extends. IBrush brush The brush. Region region The region. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, Color, Region) Flood fills the image with in the region with the specified color. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, Color color, Region region) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The options. Color color The color. Region region The region. Returns Type Description IImageProcessingContext The to allow chaining of operations. | Improve this Doc View Source Fill(IImageProcessingContext, ShapeGraphicsOptions, IBrush, Region) Flood fills the image with in the region with the specified brush. Declaration public static IImageProcessingContext Fill(this IImageProcessingContext source, ShapeGraphicsOptions options, IBrush brush, Region region) Parameters Type Name Description IImageProcessingContext source The image this method extends. ShapeGraphicsOptions options The graphics options. IBrush brush The brush. Region region The region. Returns Type Description IImageProcessingContext The to allow chaining of operations."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.GradientBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.GradientBrush.html",
    "title": "Class GradientBrush",
    "keywords": "Class GradientBrush Base class for Gradient brushes Inheritance Object GradientBrush EllipticGradientBrush LinearGradientBrush RadialGradientBrush Implements IBrush Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public abstract class GradientBrush : object, IBrush Constructors | Improve this Doc View Source GradientBrush(GradientRepetitionMode, ColorStop[]) Declaration protected GradientBrush(GradientRepetitionMode repetitionMode, params ColorStop[] colorStops) Parameters Type Name Description GradientRepetitionMode repetitionMode Defines how the colors are repeated beyond the interval [0..1] ColorStop [] colorStops The gradient colors. Properties | Improve this Doc View Source ColorStops Gets the list of color stops for this gradient. Declaration protected ColorStop[] ColorStops { get; } Property Value Type Description ColorStop [] | Improve this Doc View Source RepetitionMode Gets how the colors are repeated beyond the interval [0..1]. Declaration protected GradientRepetitionMode RepetitionMode { get; } Property Value Type Description GradientRepetitionMode Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration public abstract BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image. Implements IBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.GradientRepetitionMode.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.GradientRepetitionMode.html",
    "title": "Enum GradientRepetitionMode",
    "keywords": "Enum GradientRepetitionMode Modes to repeat a gradient. Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public enum GradientRepetitionMode : int Fields Name Description DontFill With DontFill a gradient does not touch any pixel beyond it's borders. For the LinearGradientBrush this is beyond the orthogonal through start and end, TODO For the cref=\"PolygonalGradientBrush\" it's outside the polygon, For RadialGradientBrush and EllipticGradientBrush it's beyond 1.0. None don't repeat, keep the color of start and end beyond those points stable. Reflect Reflect the gradient. Similar to Repeat , but each other repetition uses inverse order of ColorStop s. Used on a Black-White gradient, Reflect leads to Black->{gray}->White->{gray}->White... Repeat Repeat the gradient. If it's a black-white gradient, with Repeat it will be Black->{gray}->White|Black->{gray}->White|..."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.html",
    "title": "Namespace SixLabors.ImageSharp.Drawing.Processing",
    "keywords": "Namespace SixLabors.ImageSharp.Drawing.Processing Classes BrushApplicator<TPixel> A primitive that converts a point into a color for discovering the fill color based on an implementation. Brushes A collection of methods for creating generic brushes. ClearExtensions Adds extensions that allow the clearing of regions with various brushes to the type. ClearPathExtensions Adds extensions that allow the filling of polygon outlines to the type. ClearRectangleExtensions Adds extensions that allow the filling of rectangles to the type. ClearRegionExtensions Adds extensions that allow the filling of regions with various brushes to the type. DrawBezierExtensions Adds extensions that allow the drawing of Bezier paths to the type. DrawLineExtensions Adds extensions that allow the drawing of lines to the type. DrawPathCollectionExtensions Adds extensions that allow the drawing of collections of polygon outlines to the type. DrawPathExtensions Adds extensions that allow the drawing of polygon outlines to the type. DrawPolygonExtensions Adds extensions that allow the drawing of closed linear polygons to the type. DrawRectangleExtensions Adds extensions that allow the drawing of rectangles to the type. DrawTextExtensions Adds extensions that allow the drawing of text to the type. EllipticGradientBrush Gradient Brush with elliptic shape. The ellipse is defined by a center point, a point on the longest extension of the ellipse and the ratio between longest and shortest extension. FillExtensions Adds extensions that allow the filling of regions with various brushes to the type. FillPathBuilderExtensions Adds extensions that allow the filling of polygons with various brushes to the type. FillPathCollectionExtensions Adds extensions that allow the filling of collections of polygon outlines to the type. FillPathExtensions Adds extensions that allow the filling of polygon outlines to the type. FillPolygonExtensions Adds extensions that allow the filling of closed linear polygons to the type. FillRectangleExtensions Adds extensions that allow the filling of rectangles to the type. FillRegionExtensions Adds extensions that allow the filling of regions with various brushes to the type. GradientBrush Base class for Gradient brushes ImageBrush Provides an implementation of an image brush for painting images within areas. LinearGradientBrush Provides an implementation of a brush for painting linear gradients within areas. Supported right now: a set of colors in relative distances to each other. PathGradientBrush Provides an implementation of a brush for painting gradients between multiple color positions in 2D coordinates. It works similarly with the class in System.Drawing.Drawing2D of the same name. PatternBrush Provides an implementation of a pattern brush for painting patterns. Pen Provides a pen that can apply a pattern to a line with a set brush and thickness Pens Contains a collection of common Pen styles RadialGradientBrush A radial gradient brush, defined by center point and radius. RecolorBrush Provides an implementation of a brush that can recolor an image ShapeGraphicOptionsDefaultsExtensions Adds extensions that allow the processing of images to the type. ShapeGraphicsOptions Options for influencing the drawing functions. ShapeOptions Options for influencing the drawing functions. SolidBrush Provides an implementation of a solid brush for painting solid color areas. TextGraphicsOptions Options for influencing the drawing functions. TextOptions Options for influencing text parts of the drawing functions. TextOptionsDefaultsExtensions Adds extensions that allow the processing of images to the type. Structs ColorStop A struct that defines a single color stop. Interfaces IBrush Brush represents a logical configuration of a brush which can be used to source pixel colors IPen Interface representing the pattern and size of the stroke to apply with a Pen. Enums GradientRepetitionMode Modes to repeat a gradient."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.IBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.IBrush.html",
    "title": "Interface IBrush",
    "keywords": "Interface IBrush Brush represents a logical configuration of a brush which can be used to source pixel colors Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public interface IBrush Remarks A brush is a simple class that will return an BrushApplicator<TPixel> that will perform the logic for retrieving pixel values for specific locations. Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ImageBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ImageBrush.html",
    "title": "Class ImageBrush",
    "keywords": "Class ImageBrush Provides an implementation of an image brush for painting images within areas. Inheritance Object ImageBrush Implements IBrush Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class ImageBrush : object, IBrush Constructors | Improve this Doc View Source ImageBrush(Image) Initializes a new instance of the ImageBrush class. Declaration public ImageBrush(Image image) Parameters Type Name Description Image image The image. Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration public BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image. Implements IBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.IPen.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.IPen.html",
    "title": "Interface IPen",
    "keywords": "Interface IPen Interface representing the pattern and size of the stroke to apply with a Pen. Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public interface IPen Properties | Improve this Doc View Source StrokeFill Gets the stroke fill. Declaration IBrush StrokeFill { get; } Property Value Type Description IBrush | Improve this Doc View Source StrokePattern Gets the stoke pattern. Declaration ReadOnlySpan<float> StrokePattern { get; } Property Value Type Description ReadOnlySpan < Single > | Improve this Doc View Source StrokeWidth Gets the width to apply to the stroke Declaration float StrokeWidth { get; } Property Value Type Description Single"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.LinearGradientBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.LinearGradientBrush.html",
    "title": "Class LinearGradientBrush",
    "keywords": "Class LinearGradientBrush Provides an implementation of a brush for painting linear gradients within areas. Supported right now: a set of colors in relative distances to each other. Inheritance Object GradientBrush LinearGradientBrush Implements IBrush Inherited Members GradientBrush.RepetitionMode GradientBrush.ColorStops Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public sealed class LinearGradientBrush : GradientBrush, IBrush Constructors | Improve this Doc View Source LinearGradientBrush(PointF, PointF, GradientRepetitionMode, ColorStop[]) Initializes a new instance of the LinearGradientBrush class. Declaration public LinearGradientBrush(PointF p1, PointF p2, GradientRepetitionMode repetitionMode, params ColorStop[] colorStops) Parameters Type Name Description PointF p1 Start point PointF p2 End point GradientRepetitionMode repetitionMode defines how colors are repeated. ColorStop [] colorStops Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration public override BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Overrides SixLabors.ImageSharp.Drawing.Processing.GradientBrush.CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image. Implements IBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.PathGradientBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.PathGradientBrush.html",
    "title": "Class PathGradientBrush",
    "keywords": "Class PathGradientBrush Provides an implementation of a brush for painting gradients between multiple color positions in 2D coordinates. It works similarly with the class in System.Drawing.Drawing2D of the same name. Inheritance Object PathGradientBrush Implements IBrush Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public sealed class PathGradientBrush : object, IBrush Constructors | Improve this Doc View Source PathGradientBrush(PointF[], Color[]) Initializes a new instance of the PathGradientBrush class. Declaration public PathGradientBrush(PointF[] points, Color[] colors) Parameters Type Name Description PointF [] points Points that constitute a polygon that represents the gradient area. Color [] colors Array of colors that correspond to each point in the polygon. | Improve this Doc View Source PathGradientBrush(PointF[], Color[], Color) Initializes a new instance of the PathGradientBrush class. Declaration public PathGradientBrush(PointF[] points, Color[] colors, Color centerColor) Parameters Type Name Description PointF [] points Points that constitute a polygon that represents the gradient area. Color [] colors Array of colors that correspond to each point in the polygon. Color centerColor Color at the center of the gradient area to which the other colors converge. Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration public BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image. Implements IBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.PatternBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.PatternBrush.html",
    "title": "Class PatternBrush",
    "keywords": "Class PatternBrush Provides an implementation of a pattern brush for painting patterns. Inheritance Object PatternBrush Implements IBrush Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class PatternBrush : object, IBrush Remarks The patterns that are used to create a custom pattern brush are made up of a repeating matrix of flags, where each flag denotes whether to draw the foreground color or the background color. so to create a new bool[,] with your flags For example if you wanted to create a diagonal line that repeat every 4 pixels you would use a pattern like so 1000 0100 0010 0001 or you want a horizontal stripe which is 3 pixels apart you would use a pattern like 1 0 0 Constructors | Improve this Doc View Source PatternBrush(Color, Color, Boolean[,]) Initializes a new instance of the PatternBrush class. Declaration public PatternBrush(Color foreColor, Color backColor, bool[, ] pattern) Parameters Type Name Description Color foreColor Color of the fore. Color backColor Color of the back. Boolean [,] pattern The pattern. Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration public BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image. Implements IBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Pen.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Pen.html",
    "title": "Class Pen",
    "keywords": "Class Pen Provides a pen that can apply a pattern to a line with a set brush and thickness Inheritance Object Pen Implements IPen Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class Pen : object, IPen Remarks The pattern will be in to the form of new float[]{ 1f, 2f, 0.5f} this will be converted into a pattern that is 3.5 times longer that the width with 3 sections section 1 will be width long (making a square) and will be filled by the brush section 2 will be width * 2 long and will be empty section 3 will be width/2 long and will be filled the pattern will immediately repeat without gap. Constructors | Improve this Doc View Source Pen(Color, Single) Initializes a new instance of the Pen class. Declaration public Pen(Color color, float width) Parameters Type Name Description Color color The color. Single width The width. | Improve this Doc View Source Pen(Color, Single, Single[]) Initializes a new instance of the Pen class. Declaration public Pen(Color color, float width, float[] pattern) Parameters Type Name Description Color color The color. Single width The width. Single [] pattern The pattern. | Improve this Doc View Source Pen(IBrush, Single) Initializes a new instance of the Pen class. Declaration public Pen(IBrush brush, float width) Parameters Type Name Description IBrush brush The brush. Single width The width. | Improve this Doc View Source Pen(IBrush, Single, Single[]) Initializes a new instance of the Pen class. Declaration public Pen(IBrush brush, float width, float[] pattern) Parameters Type Name Description IBrush brush The brush. Single width The width. Single [] pattern The pattern. Properties | Improve this Doc View Source StrokeFill Gets the stroke fill. Declaration public IBrush StrokeFill { get; } Property Value Type Description IBrush | Improve this Doc View Source StrokePattern Gets the stoke pattern. Declaration public ReadOnlySpan<float> StrokePattern { get; } Property Value Type Description ReadOnlySpan < Single > | Improve this Doc View Source StrokeWidth Gets the width to apply to the stroke Declaration public float StrokeWidth { get; } Property Value Type Description Single Implements IPen"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Pens.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Pens.html",
    "title": "Class Pens",
    "keywords": "Class Pens Contains a collection of common Pen styles Inheritance Object Pens Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class Pens : object Methods | Improve this Doc View Source Dash(Color, Single) Create a pen with a 'Dash' drawing patterns Declaration public static Pen Dash(Color color, float width) Parameters Type Name Description Color color The color. Single width The width. Returns Type Description Pen The Pen | Improve this Doc View Source Dash(IBrush, Single) Create a pen with a 'Dash' drawing patterns Declaration public static Pen Dash(IBrush brush, float width) Parameters Type Name Description IBrush brush The brush. Single width The width. Returns Type Description Pen The Pen | Improve this Doc View Source DashDot(Color, Single) Create a pen with a 'Dash Dot' drawing patterns Declaration public static Pen DashDot(Color color, float width) Parameters Type Name Description Color color The color. Single width The width. Returns Type Description Pen The Pen | Improve this Doc View Source DashDot(IBrush, Single) Create a pen with a 'Dash Dot' drawing patterns Declaration public static Pen DashDot(IBrush brush, float width) Parameters Type Name Description IBrush brush The brush. Single width The width. Returns Type Description Pen The Pen | Improve this Doc View Source DashDotDot(Color, Single) Create a pen with a 'Dash Dot Dot' drawing patterns Declaration public static Pen DashDotDot(Color color, float width) Parameters Type Name Description Color color The color. Single width The width. Returns Type Description Pen The Pen | Improve this Doc View Source DashDotDot(IBrush, Single) Create a pen with a 'Dash Dot Dot' drawing patterns Declaration public static Pen DashDotDot(IBrush brush, float width) Parameters Type Name Description IBrush brush The brush. Single width The width. Returns Type Description Pen The Pen | Improve this Doc View Source Dot(Color, Single) Create a pen with a 'Dot' drawing patterns Declaration public static Pen Dot(Color color, float width) Parameters Type Name Description Color color The color. Single width The width. Returns Type Description Pen The Pen | Improve this Doc View Source Dot(IBrush, Single) Create a pen with a 'Dot' drawing patterns Declaration public static Pen Dot(IBrush brush, float width) Parameters Type Name Description IBrush brush The brush. Single width The width. Returns Type Description Pen The Pen | Improve this Doc View Source Solid(Color, Single) Create a solid pen with out any drawing patterns Declaration public static Pen Solid(Color color, float width) Parameters Type Name Description Color color The color. Single width The width. Returns Type Description Pen The Pen | Improve this Doc View Source Solid(IBrush, Single) Create a solid pen with out any drawing patterns Declaration public static Pen Solid(IBrush brush, float width) Parameters Type Name Description IBrush brush The brush. Single width The width. Returns Type Description Pen The Pen"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.DrawPathProcessor.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.DrawPathProcessor.html",
    "title": "Class DrawPathProcessor",
    "keywords": "Class DrawPathProcessor Defines a processor to fill pixels withing a given IPath with the given IBrush and blending defined by the given ShapeGraphicsOptions . Inheritance Object DrawPathProcessor Namespace : SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class DrawPathProcessor : IImageProcessor Constructors | Improve this Doc View Source DrawPathProcessor(ShapeGraphicsOptions, IPen, IPath) Initializes a new instance of the DrawPathProcessor class. Declaration public DrawPathProcessor(ShapeGraphicsOptions options, IPen pen, IPath shape) Parameters Type Name Description ShapeGraphicsOptions options The graphics options. IPen pen The details how to outline the region of interest. IPath shape The shape to be filled. Properties | Improve this Doc View Source Options Gets the ShapeGraphicsOptions defining how to blend the brush pixels over the image pixels. Declaration public ShapeGraphicsOptions Options { get; } Property Value Type Description ShapeGraphicsOptions | Improve this Doc View Source Pen Gets the IBrush used for filling the destination image. Declaration public IPen Pen { get; } Property Value Type Description IPen | Improve this Doc View Source Shape Gets the region that this processor applies to. Declaration public IPath Shape { get; } Property Value Type Description IPath Methods | Improve this Doc View Source CreatePixelSpecificProcessor<TPixel>(Configuration, Image<TPixel>, Rectangle) Declaration public IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(Configuration configuration, Image<TPixel> source, Rectangle sourceRectangle) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration Image <TPixel> source Rectangle sourceRectangle Returns Type Description IImageProcessor <TPixel> Type Parameters Name Description TPixel"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.FillPathProcessor.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.FillPathProcessor.html",
    "title": "Class FillPathProcessor",
    "keywords": "Class FillPathProcessor Defines a processor to fill pixels withing a given IPath with the given IBrush and blending defined by the given ShapeGraphicsOptions . Inheritance Object FillPathProcessor Namespace : SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class FillPathProcessor : IImageProcessor Constructors | Improve this Doc View Source FillPathProcessor(ShapeGraphicsOptions, IBrush, IPath) Initializes a new instance of the FillPathProcessor class. Declaration public FillPathProcessor(ShapeGraphicsOptions options, IBrush brush, IPath shape) Parameters Type Name Description ShapeGraphicsOptions options The graphics options. IBrush brush The details how to fill the region of interest. IPath shape The shape to be filled. Properties | Improve this Doc View Source Brush Gets the IBrush used for filling the destination image. Declaration public IBrush Brush { get; } Property Value Type Description IBrush | Improve this Doc View Source Options Gets the defining how to blend the brush pixels over the image pixels. Declaration public ShapeGraphicsOptions Options { get; } Property Value Type Description ShapeGraphicsOptions | Improve this Doc View Source Shape Gets the region that this processor applies to. Declaration public IPath Shape { get; } Property Value Type Description IPath Methods | Improve this Doc View Source CreatePixelSpecificProcessor<TPixel>(Configuration, Image<TPixel>, Rectangle) Declaration public IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(Configuration configuration, Image<TPixel> source, Rectangle sourceRectangle) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration Image <TPixel> source Rectangle sourceRectangle Returns Type Description IImageProcessor <TPixel> Type Parameters Name Description TPixel"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.FillProcessor.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.FillProcessor.html",
    "title": "Class FillProcessor",
    "keywords": "Class FillProcessor Defines a processor to fill an with the given IBrush using blending defined by the given . Inheritance Object FillProcessor Namespace : SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class FillProcessor : IImageProcessor Constructors | Improve this Doc View Source FillProcessor(GraphicsOptions, IBrush) Initializes a new instance of the FillProcessor class. Declaration public FillProcessor(GraphicsOptions options, IBrush brush) Parameters Type Name Description GraphicsOptions options The defining how to blend the brush pixels over the image pixels. IBrush brush The brush to use for filling. Properties | Improve this Doc View Source Brush Gets the IBrush used for filling the destination image. Declaration public IBrush Brush { get; } Property Value Type Description IBrush | Improve this Doc View Source Options Gets the defining how to blend the brush pixels over the image pixels. Declaration public GraphicsOptions Options { get; } Property Value Type Description GraphicsOptions Methods | Improve this Doc View Source CreatePixelSpecificProcessor<TPixel>(Configuration, Image<TPixel>, Rectangle) Declaration public IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(Configuration configuration, Image<TPixel> source, Rectangle sourceRectangle) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration Image <TPixel> source Rectangle sourceRectangle Returns Type Description IImageProcessor <TPixel> Type Parameters Name Description TPixel"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.FillRegionProcessor.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.FillRegionProcessor.html",
    "title": "Class FillRegionProcessor",
    "keywords": "Class FillRegionProcessor Defines a processor to fill pixels withing a given Region with the given IBrush and blending defined by the given . Inheritance Object FillRegionProcessor Namespace : SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class FillRegionProcessor : IImageProcessor Constructors | Improve this Doc View Source FillRegionProcessor(ShapeGraphicsOptions, IBrush, Region) Initializes a new instance of the FillRegionProcessor class. Declaration public FillRegionProcessor(ShapeGraphicsOptions options, IBrush brush, Region region) Parameters Type Name Description ShapeGraphicsOptions options The graphics options. IBrush brush The details how to fill the region of interest. Region region The region of interest to be filled. Properties | Improve this Doc View Source Brush Gets the IBrush used for filling the destination image. Declaration public IBrush Brush { get; } Property Value Type Description IBrush | Improve this Doc View Source Options Gets the defining how to blend the brush pixels over the image pixels. Declaration public ShapeGraphicsOptions Options { get; } Property Value Type Description ShapeGraphicsOptions | Improve this Doc View Source Region Gets the region that this processor applies to. Declaration public Region Region { get; } Property Value Type Description Region Methods | Improve this Doc View Source CreatePixelSpecificProcessor<TPixel>(Configuration, Image<TPixel>, Rectangle) Declaration public IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(Configuration configuration, Image<TPixel> source, Rectangle sourceRectangle) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration Image <TPixel> source Rectangle sourceRectangle Returns Type Description IImageProcessor <TPixel> Type Parameters Name Description TPixel"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing.html",
    "title": "Namespace SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing",
    "keywords": "Namespace SixLabors.ImageSharp.Drawing.Processing.Processors.Drawing Classes DrawPathProcessor Defines a processor to fill pixels withing a given IPath with the given IBrush and blending defined by the given ShapeGraphicsOptions . FillPathProcessor Defines a processor to fill pixels withing a given IPath with the given IBrush and blending defined by the given ShapeGraphicsOptions . FillProcessor Defines a processor to fill an with the given IBrush using blending defined by the given . FillRegionProcessor Defines a processor to fill pixels withing a given Region with the given IBrush and blending defined by the given ."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Text.DrawTextProcessor.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Text.DrawTextProcessor.html",
    "title": "Class DrawTextProcessor",
    "keywords": "Class DrawTextProcessor Defines a processor to draw text on an . Inheritance Object DrawTextProcessor Namespace : SixLabors.ImageSharp.Drawing.Processing.Processors.Text Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class DrawTextProcessor : IImageProcessor Constructors | Improve this Doc View Source DrawTextProcessor(TextGraphicsOptions, String, Font, IBrush, IPen, PointF) Initializes a new instance of the DrawTextProcessor class. Declaration public DrawTextProcessor(TextGraphicsOptions options, string text, Font font, IBrush brush, IPen pen, PointF location) Parameters Type Name Description TextGraphicsOptions options The options String text The text we want to render Font font The font we want to render with IBrush brush The brush to source pixel colors from. IPen pen The pen to outline text with. PointF location The location on the image to start drawing the text from. Properties | Improve this Doc View Source Brush Gets the brush used to fill the glyphs. Declaration public IBrush Brush { get; } Property Value Type Description IBrush | Improve this Doc View Source Font Gets the font used to render the text. Declaration public Font Font { get; } Property Value Type Description Font | Improve this Doc View Source Location Gets the location to draw the text at. Declaration public PointF Location { get; } Property Value Type Description PointF | Improve this Doc View Source Options Gets the TextGraphicsOptions defining blending modes and text-specific drawing settings. Declaration public TextGraphicsOptions Options { get; } Property Value Type Description TextGraphicsOptions | Improve this Doc View Source Pen Gets the pen used for outlining the text, if Null then we will not outline Declaration public IPen Pen { get; } Property Value Type Description IPen | Improve this Doc View Source Text Gets the text to draw. Declaration public string Text { get; } Property Value Type Description String Methods | Improve this Doc View Source CreatePixelSpecificProcessor<TPixel>(Configuration, Image<TPixel>, Rectangle) Declaration public IImageProcessor<TPixel> CreatePixelSpecificProcessor<TPixel>(Configuration configuration, Image<TPixel> source, Rectangle sourceRectangle) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration Image <TPixel> source Rectangle sourceRectangle Returns Type Description IImageProcessor <TPixel> Type Parameters Name Description TPixel"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Text.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.Processors.Text.html",
    "title": "Namespace SixLabors.ImageSharp.Drawing.Processing.Processors.Text",
    "keywords": "Namespace SixLabors.ImageSharp.Drawing.Processing.Processors.Text Classes DrawTextProcessor Defines a processor to draw text on an ."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.RadialGradientBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.RadialGradientBrush.html",
    "title": "Class RadialGradientBrush",
    "keywords": "Class RadialGradientBrush A radial gradient brush, defined by center point and radius. Inheritance Object GradientBrush RadialGradientBrush Implements IBrush Inherited Members GradientBrush.RepetitionMode GradientBrush.ColorStops Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public sealed class RadialGradientBrush : GradientBrush, IBrush Constructors | Improve this Doc View Source RadialGradientBrush(PointF, Single, GradientRepetitionMode, ColorStop[]) Declaration public RadialGradientBrush(PointF center, float radius, GradientRepetitionMode repetitionMode, params ColorStop[] colorStops) Parameters Type Name Description PointF center The center of the circular gradient and 0 for the color stops. Single radius The radius of the circular gradient and 1 for the color stops. GradientRepetitionMode repetitionMode Defines how the colors in the gradient are repeated. ColorStop [] colorStops the color stops as defined in base class. Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration public override BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Overrides SixLabors.ImageSharp.Drawing.Processing.GradientBrush.CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image. Implements IBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.RecolorBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.RecolorBrush.html",
    "title": "Class RecolorBrush",
    "keywords": "Class RecolorBrush Provides an implementation of a brush that can recolor an image Inheritance Object RecolorBrush Implements IBrush Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class RecolorBrush : object, IBrush Constructors | Improve this Doc View Source RecolorBrush(Color, Color, Single) Initializes a new instance of the RecolorBrush class. Declaration public RecolorBrush(Color sourceColor, Color targetColor, float threshold) Parameters Type Name Description Color sourceColor Color of the source. Color targetColor Color of the target. Single threshold The threshold as a value between 0 and 1. Properties | Improve this Doc View Source SourceColor Gets the source color. Declaration public Color SourceColor { get; } Property Value Type Description Color | Improve this Doc View Source TargetColor Gets the target color. Declaration public Color TargetColor { get; } Property Value Type Description Color | Improve this Doc View Source Threshold Gets the threshold. Declaration public float Threshold { get; } Property Value Type Description Single Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration public BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image. Implements IBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ShapeGraphicOptionsDefaultsExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ShapeGraphicOptionsDefaultsExtensions.html",
    "title": "Class ShapeGraphicOptionsDefaultsExtensions",
    "keywords": "Class ShapeGraphicOptionsDefaultsExtensions Adds extensions that allow the processing of images to the type. Inheritance Object ShapeGraphicOptionsDefaultsExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class ShapeGraphicOptionsDefaultsExtensions : object Methods | Improve this Doc View Source GetShapeGraphicsOptions(IImageProcessingContext) Gets the default shape processing options against the image processing context. Declaration public static ShapeGraphicsOptions GetShapeGraphicsOptions(this IImageProcessingContext context) Parameters Type Name Description IImageProcessingContext context The image processing context to retrieve defaults from. Returns Type Description ShapeGraphicsOptions The globaly configued default options. | Improve this Doc View Source GetShapeOptions(Configuration) Gets the default shape processing options against the image processing context. Declaration public static ShapeOptions GetShapeOptions(this Configuration configuration) Parameters Type Name Description Configuration configuration The configuration to retrieve defaults from. Returns Type Description ShapeOptions The globaly configued default options. | Improve this Doc View Source GetShapeOptions(IImageProcessingContext) Gets the default shape processing options against the image processing context. Declaration public static ShapeOptions GetShapeOptions(this IImageProcessingContext context) Parameters Type Name Description IImageProcessingContext context The image processing context to retrieve defaults from. Returns Type Description ShapeOptions The globaly configued default options. | Improve this Doc View Source SetShapeOptions(Configuration, Action<ShapeOptions>) Sets the default shape processing options against the configuration. Declaration public static void SetShapeOptions(this Configuration configuration, Action<ShapeOptions> optionsBuilder) Parameters Type Name Description Configuration configuration The configuration to store default against. Action < ShapeOptions > optionsBuilder The default options to use. | Improve this Doc View Source SetShapeOptions(Configuration, ShapeOptions) Sets the default shape processing options against the configuration. Declaration public static void SetShapeOptions(this Configuration configuration, ShapeOptions options) Parameters Type Name Description Configuration configuration The configuration to store default against. ShapeOptions options The default options to use. | Improve this Doc View Source SetShapeOptions(IImageProcessingContext, Action<ShapeOptions>) Sets the default shape processing options against the image processing context. Declaration public static IImageProcessingContext SetShapeOptions(this IImageProcessingContext context, Action<ShapeOptions> optionsBuilder) Parameters Type Name Description IImageProcessingContext context The image processing context to store default against. Action < ShapeOptions > optionsBuilder The action to update instance of the default options used. Returns Type Description IImageProcessingContext The passed in context to allow chaining. | Improve this Doc View Source SetShapeOptions(IImageProcessingContext, ShapeOptions) Sets the default shape processing options against the image processing context. Declaration public static IImageProcessingContext SetShapeOptions(this IImageProcessingContext context, ShapeOptions options) Parameters Type Name Description IImageProcessingContext context The image processing context to store default against. ShapeOptions options The default options to use. Returns Type Description IImageProcessingContext The passed in context to allow chaining."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ShapeGraphicsOptions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ShapeGraphicsOptions.html",
    "title": "Class ShapeGraphicsOptions",
    "keywords": "Class ShapeGraphicsOptions Options for influencing the drawing functions. Inheritance Object ShapeGraphicsOptions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class ShapeGraphicsOptions : object Constructors | Improve this Doc View Source ShapeGraphicsOptions() Initializes a new instance of the ShapeGraphicsOptions class. Declaration public ShapeGraphicsOptions() | Improve this Doc View Source ShapeGraphicsOptions(GraphicsOptions, ShapeOptions) Initializes a new instance of the ShapeGraphicsOptions class. Declaration public ShapeGraphicsOptions(GraphicsOptions graphicsOptions, ShapeOptions shapeOptions) Parameters Type Name Description GraphicsOptions graphicsOptions The graphic options to use ShapeOptions shapeOptions The text options to use Properties | Improve this Doc View Source GraphicsOptions Gets or sets the Graphics Options. Declaration public GraphicsOptions GraphicsOptions { get; set; } Property Value Type Description GraphicsOptions | Improve this Doc View Source ShapeOptions Gets or sets the Text Options. Declaration public ShapeOptions ShapeOptions { get; set; } Property Value Type Description ShapeOptions"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ShapeOptions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.ShapeOptions.html",
    "title": "Class ShapeOptions",
    "keywords": "Class ShapeOptions Options for influencing the drawing functions. Inheritance Object ShapeOptions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class ShapeOptions : IDeepCloneable<ShapeOptions> Constructors | Improve this Doc View Source ShapeOptions() Initializes a new instance of the ShapeOptions class. Declaration public ShapeOptions() Properties | Improve this Doc View Source IntersectionRule Gets or sets a value indicating whether antialiasing should be applied. Defaults to true. Declaration public IntersectionRule IntersectionRule { get; set; } Property Value Type Description IntersectionRule Methods | Improve this Doc View Source DeepClone() Declaration public ShapeOptions DeepClone() Returns Type Description ShapeOptions"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.SolidBrush.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.SolidBrush.html",
    "title": "Class SolidBrush",
    "keywords": "Class SolidBrush Provides an implementation of a solid brush for painting solid color areas. Inheritance Object SolidBrush Implements IBrush Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class SolidBrush : object, IBrush Constructors | Improve this Doc View Source SolidBrush(Color) Initializes a new instance of the SolidBrush class. Declaration public SolidBrush(Color color) Parameters Type Name Description Color color The color. Properties | Improve this Doc View Source Color Gets the color. Declaration public Color Color { get; } Property Value Type Description Color Methods | Improve this Doc View Source CreateApplicator<TPixel>(Configuration, GraphicsOptions, ImageFrame<TPixel>, RectangleF) Creates the applicator for this brush. Declaration public BrushApplicator<TPixel> CreateApplicator<TPixel>(Configuration configuration, GraphicsOptions options, ImageFrame<TPixel> source, RectangleF region) where TPixel : struct, IPixel<TPixel> Parameters Type Name Description Configuration configuration The configuration instance to use when performing operations. GraphicsOptions options The graphic options. ImageFrame <TPixel> source The source image. RectangleF region The region the brush will be applied to. Returns Type Description BrushApplicator <TPixel> The BrushApplicator<TPixel> for this brush. Type Parameters Name Description TPixel The pixel type. Remarks The region when being applied to things like shapes would usually be the bounding box of the shape not necessarily the bounds of the whole image. Implements IBrush"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.TextGraphicsOptions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.TextGraphicsOptions.html",
    "title": "Class TextGraphicsOptions",
    "keywords": "Class TextGraphicsOptions Options for influencing the drawing functions. Inheritance Object TextGraphicsOptions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class TextGraphicsOptions : object Constructors | Improve this Doc View Source TextGraphicsOptions() Initializes a new instance of the TextGraphicsOptions class. Declaration public TextGraphicsOptions() | Improve this Doc View Source TextGraphicsOptions(GraphicsOptions, TextOptions) Initializes a new instance of the TextGraphicsOptions class. Declaration public TextGraphicsOptions(GraphicsOptions graphicsOptions, TextOptions textOptions) Parameters Type Name Description GraphicsOptions graphicsOptions The graphic options to use TextOptions textOptions The text options to use Properties | Improve this Doc View Source GraphicsOptions Gets or sets the Graphics Options. Declaration public GraphicsOptions GraphicsOptions { get; set; } Property Value Type Description GraphicsOptions | Improve this Doc View Source TextOptions Gets or sets the Text Options. Declaration public TextOptions TextOptions { get; set; } Property Value Type Description TextOptions"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.TextOptions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.TextOptions.html",
    "title": "Class TextOptions",
    "keywords": "Class TextOptions Options for influencing text parts of the drawing functions. Inheritance Object TextOptions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class TextOptions : IDeepCloneable<TextOptions> Constructors | Improve this Doc View Source TextOptions() Initializes a new instance of the TextOptions class. Declaration public TextOptions() Properties | Improve this Doc View Source ApplyKerning Gets or sets a value indicating whether the text should be drawing with kerning enabled. Defaults to true; Declaration public bool ApplyKerning { get; set; } Property Value Type Description Boolean | Improve this Doc View Source DpiX Gets or sets a value indicating the DPI (Dots Per Inch) to render text along the X axis. Defaults to 72. Declaration public float DpiX { get; set; } Property Value Type Description Single | Improve this Doc View Source DpiY Gets or sets a value indicating the DPI (Dots Per Inch) to render text along the Y axis. Defaults to 72. Declaration public float DpiY { get; set; } Property Value Type Description Single | Improve this Doc View Source FallbackFonts Gets the list of fallback font families to apply to the text drawing operation. Defaults to . Declaration public List<FontFamily> FallbackFonts { get; } Property Value Type Description List < FontFamily > | Improve this Doc View Source HorizontalAlignment Gets or sets a value indicating how to align the text relative to the rendering space. If WrapTextWidth is greater than zero it will align relative to the space defined by the location and width, if WrapTextWidth equals zero, and thus wrapping disabled, then the alignment is relative to the drawing location. Defaults to . Declaration public HorizontalAlignment HorizontalAlignment { get; set; } Property Value Type Description HorizontalAlignment | Improve this Doc View Source RenderColorFonts Gets or sets a value indicating whether we should render color(emoji) fonts. Defaults to true. Declaration public bool RenderColorFonts { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TabWidth Gets or sets a value indicating the number of space widths a tab should lock to. Defaults to 4. Declaration public float TabWidth { get; set; } Property Value Type Description Single | Improve this Doc View Source VerticalAlignment Gets or sets a value indicating how to align the text relative to the rendering space. Defaults to . Declaration public VerticalAlignment VerticalAlignment { get; set; } Property Value Type Description VerticalAlignment | Improve this Doc View Source WrapTextWidth Gets or sets a value, if greater than 0, indicating the width at which text should wrap. Defaults to 0. Declaration public float WrapTextWidth { get; set; } Property Value Type Description Single Methods | Improve this Doc View Source DeepClone() Declaration public TextOptions DeepClone() Returns Type Description TextOptions"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.TextOptionsDefaultsExtensions.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Processing.TextOptionsDefaultsExtensions.html",
    "title": "Class TextOptionsDefaultsExtensions",
    "keywords": "Class TextOptionsDefaultsExtensions Adds extensions that allow the processing of images to the type. Inheritance Object TextOptionsDefaultsExtensions Namespace : SixLabors.ImageSharp.Drawing.Processing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class TextOptionsDefaultsExtensions : object Methods | Improve this Doc View Source GetTextGraphicsOptions(IImageProcessingContext) Gets the default shape processing options against the image processing context. Declaration public static TextGraphicsOptions GetTextGraphicsOptions(this IImageProcessingContext context) Parameters Type Name Description IImageProcessingContext context The image processing context to retrieve defaults from. Returns Type Description TextGraphicsOptions The globaly configued default options. | Improve this Doc View Source GetTextOptions(Configuration) Gets the default shape processing options against the image processing context. Declaration public static TextOptions GetTextOptions(this Configuration configuration) Parameters Type Name Description Configuration configuration The configuration to retrieve defaults from. Returns Type Description TextOptions The globaly configued default options. | Improve this Doc View Source GetTextOptions(IImageProcessingContext) Gets the default shape processing options against the image processing context. Declaration public static TextOptions GetTextOptions(this IImageProcessingContext context) Parameters Type Name Description IImageProcessingContext context The image processing context to retrieve defaults from. Returns Type Description TextOptions The globaly configued default options. | Improve this Doc View Source SetTextOptions(Configuration, Action<TextOptions>) Sets the default shape processing options against the configuration. Declaration public static void SetTextOptions(this Configuration configuration, Action<TextOptions> optionsBuilder) Parameters Type Name Description Configuration configuration The configuration to store default against. Action < TextOptions > optionsBuilder The default options to use. | Improve this Doc View Source SetTextOptions(Configuration, TextOptions) Sets the default shape processing options against the configuration. Declaration public static void SetTextOptions(this Configuration configuration, TextOptions options) Parameters Type Name Description Configuration configuration The configuration to store default against. TextOptions options The default options to use. | Improve this Doc View Source SetTextOptions(IImageProcessingContext, Action<TextOptions>) Sets the default shape processing options against the image processing context. Declaration public static IImageProcessingContext SetTextOptions(this IImageProcessingContext context, Action<TextOptions> optionsBuilder) Parameters Type Name Description IImageProcessingContext context The image processing context to store default against. Action < TextOptions > optionsBuilder The action to update instance of the default options used. Returns Type Description IImageProcessingContext The passed in context to allow chaining. | Improve this Doc View Source SetTextOptions(IImageProcessingContext, TextOptions) Sets the default shape processing options against the image processing context. Declaration public static IImageProcessingContext SetTextOptions(this IImageProcessingContext context, TextOptions options) Parameters Type Name Description IImageProcessingContext context The image processing context to store default against. TextOptions options The default options to use. Returns Type Description IImageProcessingContext The passed in context to allow chaining."
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.RectangularPolygon.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.RectangularPolygon.html",
    "title": "Class RectangularPolygon",
    "keywords": "Class RectangularPolygon A way of optimizing drawing rectangles. Inheritance Object RectangularPolygon Implements IPath ISimplePath Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class RectangularPolygon : object, IPath, ISimplePath Constructors | Improve this Doc View Source RectangularPolygon(PointF, PointF) Initializes a new instance of the RectangularPolygon class. Declaration public RectangularPolygon(PointF topLeft, PointF bottomRight) Parameters Type Name Description PointF topLeft The top left. PointF bottomRight The bottom right. | Improve this Doc View Source RectangularPolygon(PointF, SizeF) Initializes a new instance of the RectangularPolygon class. Declaration public RectangularPolygon(PointF location, SizeF size) Parameters Type Name Description PointF location The location. SizeF size The size. | Improve this Doc View Source RectangularPolygon(RectangleF) Initializes a new instance of the RectangularPolygon class. Declaration public RectangularPolygon(RectangleF rectangle) Parameters Type Name Description RectangleF rectangle The rectangle. | Improve this Doc View Source RectangularPolygon(Single, Single, Single, Single) Initializes a new instance of the RectangularPolygon class. Declaration public RectangularPolygon(float x, float y, float width, float height) Parameters Type Name Description Single x The x. Single y The y. Single width The width. Single height The height. Properties | Improve this Doc View Source Bottom Gets the bottom. Declaration public float Bottom { get; } Property Value Type Description Single The bottom. | Improve this Doc View Source Center Gets the center. Declaration public PointF Center { get; } Property Value Type Description PointF The center. | Improve this Doc View Source Height Gets the height. Declaration public float Height { get; } Property Value Type Description Single The height. | Improve this Doc View Source Left Gets the left. Declaration public float Left { get; } Property Value Type Description Single The left. | Improve this Doc View Source Location Gets the location. Declaration public PointF Location { get; } Property Value Type Description PointF The location. | Improve this Doc View Source Right Gets the right. Declaration public float Right { get; } Property Value Type Description Single The right. | Improve this Doc View Source Size Gets the size. Declaration public SizeF Size { get; } Property Value Type Description SizeF The size. | Improve this Doc View Source Top Gets the top. Declaration public float Top { get; } Property Value Type Description Single The top. | Improve this Doc View Source Width Gets the size. Declaration public float Width { get; } Property Value Type Description Single The size. | Improve this Doc View Source X Gets the X. Declaration public float X { get; } Property Value Type Description Single The X. | Improve this Doc View Source Y Gets the Y. Declaration public float Y { get; } Property Value Type Description Single The Y. Methods | Improve this Doc View Source Contains(PointF) Determines if the specified point is contained within the rectangular region defined by this RectangularPolygon . Declaration public bool Contains(PointF point) Parameters Type Name Description PointF point The point. Returns Type Description Boolean The | Improve this Doc View Source Distance(PointF) Calculates the distance along and away from the path for a specified point. Declaration public PointInfo Distance(PointF point) Parameters Type Name Description PointF point The point along the path. Returns Type Description PointInfo Returns details about the point and its distance away from the path. | Improve this Doc View Source Equals(RectangularPolygon) Returns whether the rectangles are equal. Declaration public bool Equals(RectangularPolygon other) Parameters Type Name Description RectangularPolygon other The other recentalge. Returns Type Description Boolean Returns a value indicating if the rectangles are equal. | Improve this Doc View Source Equals(Object) Equality comparer for two RectangularPolygons Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The polygon to compare to. Returns Type Description Boolean Returns a value indicating if the rectangles are equal. | Improve this Doc View Source FindIntersections(PointF, PointF, PointF[], Int32) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, PointF[] buffer, int offset) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer to start. Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, PointF[], Int32, IntersectionRule) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, PointF[] buffer, int offset, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. PointF [] buffer The buffer that will be populated with intersections. Int32 offset The offset within the buffer to start. IntersectionRule intersectionRule How intersections are handled Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, Span<PointF>) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, Span<PointF> buffer) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source FindIntersections(PointF, PointF, Span<PointF>, IntersectionRule) Based on a line described by start and end populate a buffer for all points on the polygon that the line intersects. Declaration public int FindIntersections(PointF start, PointF end, Span<PointF> buffer, IntersectionRule intersectionRule) Parameters Type Name Description PointF start The start point of the line. PointF end The end point of the line. Span < PointF > buffer The buffer that will be populated with intersections. IntersectionRule intersectionRule How intersections are handled Returns Type Description Int32 The number of intersections populated into the buffer. | Improve this Doc View Source Flatten() Converts the IPath into a simple linear path.. Declaration public IEnumerable<ISimplePath> Flatten() Returns Type Description IEnumerable < ISimplePath > Returns the current IPath as simple linear path. | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. | Improve this Doc View Source PointAlongPath(Single) Calculates the point a certain distance along a path. Declaration public SegmentInfo PointAlongPath(float distanceAlongPath) Parameters Type Name Description Single distanceAlongPath The distance along the path to find details of. Returns Type Description SegmentInfo Returns details about a point along a path. | Improve this Doc View Source Transform(Matrix3x2) Transforms the rectangle using specified matrix. Declaration public IPath Transform(Matrix3x2 matrix) Parameters Type Name Description Matrix3x2 matrix The matrix. Returns Type Description IPath A new shape with the matrix applied to it. Operators | Improve this Doc View Source Explicit(Polygon to RectangularPolygon) Converts the polygon to a rectangular polygon from its bounds. Declaration public static explicit operator RectangularPolygon(Polygon polygon) Parameters Type Name Description Polygon polygon The polygon to convert. Returns Type Description RectangularPolygon Explicit Interface Implementations | Improve this Doc View Source IPath.AsClosedPath() Converts a path to a closed path. Declaration IPath IPath.AsClosedPath() Returns Type Description IPath Returns the path as a closed path. | Improve this Doc View Source IPath.Bounds Gets the bounding box of this shape. Declaration RectangleF IPath.Bounds { get; } Returns Type Description RectangleF The bounds. | Improve this Doc View Source IPath.Length Gets the length of the path. Declaration float IPath.Length { get; } Returns Type Description Single | Improve this Doc View Source IPath.MaxIntersections Gets the maximum number intersections that a shape can have when testing a line. Declaration int IPath.MaxIntersections { get; } Returns Type Description Int32 The maximum intersections. | Improve this Doc View Source IPath.PathType Gets a value indicating whether this instance is closed, open or a composite path with a mixture of open and closed figures. Declaration PathTypes IPath.PathType { get; } Returns Type Description PathTypes | Improve this Doc View Source ISimplePath.IsClosed Gets a value indicating whether this instance is a closed path. Declaration bool ISimplePath.IsClosed { get; } Returns Type Description Boolean | Improve this Doc View Source ISimplePath.Points Gets the points that make this up as a simple linear path. Declaration ReadOnlyMemory<PointF> ISimplePath.Points { get; } Returns Type Description ReadOnlyMemory < PointF > Implements IPath ISimplePath See Also IPath"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Region.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Region.html",
    "title": "Class Region",
    "keywords": "Class Region Represents a region of an image. Inheritance Object Region Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public abstract class Region : object Properties | Improve this Doc View Source Bounds Gets the bounding box that entirely surrounds this region. Declaration public abstract Rectangle Bounds { get; } Property Value Type Description Rectangle"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.RegularPolygon.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.RegularPolygon.html",
    "title": "Class RegularPolygon",
    "keywords": "Class RegularPolygon A shape made up of a single path made up of one of more ILineSegment s Inheritance Object Path Polygon RegularPolygon Implements IPath ISimplePath Inherited Members Polygon.IsClosed Polygon.Transform(Matrix3x2) Path.Length Path.ISimplePath.IsClosed Path.ISimplePath.Points Path.Bounds Path.PathType Path.MaxIntersections Path.LineSegments Path.Distance(PointF) Path.AsClosedPath() Path.Flatten() Path.FindIntersections(PointF, PointF, PointF[], Int32) Path.FindIntersections(PointF, PointF, Span<PointF>) Path.FindIntersections(PointF, PointF, PointF[], Int32, IntersectionRule) Path.FindIntersections(PointF, PointF, Span<PointF>, IntersectionRule) Path.Contains(PointF) Path.PointAlongPath(Single) Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public class RegularPolygon : Polygon, IPath, ISimplePath, IInternalPathOwner Constructors | Improve this Doc View Source RegularPolygon(PointF, Int32, Single) Initializes a new instance of the RegularPolygon class. Declaration public RegularPolygon(PointF location, int verticies, float radius) Parameters Type Name Description PointF location The location the center of the polygon will be placed. Int32 verticies The number of verticies the RegularPolygon should have. Single radius The radius of the circle that would touch all verticies. | Improve this Doc View Source RegularPolygon(PointF, Int32, Single, Single) Initializes a new instance of the RegularPolygon class. Declaration public RegularPolygon(PointF location, int verticies, float radius, float angle) Parameters Type Name Description PointF location The location the center of the polygon will be placed. Int32 verticies The number of verticies the RegularPolygon should have. Single radius The radius of the circle that would touch all verticies. Single angle The angle of rotation in Radians | Improve this Doc View Source RegularPolygon(Single, Single, Int32, Single) Initializes a new instance of the RegularPolygon class. Declaration public RegularPolygon(float x, float y, int verticies, float radius) Parameters Type Name Description Single x The X coordinate of the center of the polygon. Single y The Y coordinate of the center of the polygon. Int32 verticies The number of verticies the RegularPolygon should have. Single radius The radius of the circle that would touch all verticies. | Improve this Doc View Source RegularPolygon(Single, Single, Int32, Single, Single) Initializes a new instance of the RegularPolygon class. Declaration public RegularPolygon(float x, float y, int verticies, float radius, float angle) Parameters Type Name Description Single x The X coordinate of the center of the polygon. Single y The Y coordinate of the center of the polygon. Int32 verticies The number of verticies the RegularPolygon should have. Single radius The radius of the circle that would touch all verticies. Single angle The angle of rotation in Radians Implements IPath ISimplePath"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.SegmentInfo.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.SegmentInfo.html",
    "title": "Struct SegmentInfo",
    "keywords": "Struct SegmentInfo Returns metadata about the point along a path. Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public struct SegmentInfo Fields | Improve this Doc View Source Angle The angle of the segment. Declaration public float Angle Field Value Type Description Single | Improve this Doc View Source Point The point on the path Declaration public PointF Point Field Value Type Description PointF"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Star.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.Star.html",
    "title": "Class Star",
    "keywords": "Class Star A shape made up of a single path made up of one of more ILineSegment s Inheritance Object Path Polygon Star Implements IPath ISimplePath Inherited Members Polygon.IsClosed Polygon.Transform(Matrix3x2) Path.Length Path.ISimplePath.IsClosed Path.ISimplePath.Points Path.Bounds Path.PathType Path.MaxIntersections Path.LineSegments Path.Distance(PointF) Path.AsClosedPath() Path.Flatten() Path.FindIntersections(PointF, PointF, PointF[], Int32) Path.FindIntersections(PointF, PointF, Span<PointF>) Path.FindIntersections(PointF, PointF, PointF[], Int32, IntersectionRule) Path.FindIntersections(PointF, PointF, Span<PointF>, IntersectionRule) Path.Contains(PointF) Path.PointAlongPath(Single) Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public sealed class Star : Polygon, IPath, ISimplePath, IInternalPathOwner Constructors | Improve this Doc View Source Star(PointF, Int32, Single, Single) Initializes a new instance of the Star class. Declaration public Star(PointF location, int prongs, float innerRadii, float outerRadii) Parameters Type Name Description PointF location The location the center of the polygon will be placed. Int32 prongs The number of verticies the Star should have. Single innerRadii The inner radii. Single outerRadii The outer radii. | Improve this Doc View Source Star(PointF, Int32, Single, Single, Single) Initializes a new instance of the Star class. Declaration public Star(PointF location, int prongs, float innerRadii, float outerRadii, float angle) Parameters Type Name Description PointF location The location the center of the polygon will be placed. Int32 prongs The number of points the Star should have. Single innerRadii The inner radii. Single outerRadii The outer radii. Single angle The angle of rotation in Radians | Improve this Doc View Source Star(Single, Single, Int32, Single, Single) Initializes a new instance of the Star class. Declaration public Star(float x, float y, int prongs, float innerRadii, float outerRadii) Parameters Type Name Description Single x The X coordinate of the center of the polygon. Single y The Y coordinate of the center of the polygon. Int32 prongs The number of verticies the RegularPolygon should have. Single innerRadii The inner radii. Single outerRadii The outer radii. | Improve this Doc View Source Star(Single, Single, Int32, Single, Single, Single) Initializes a new instance of the Star class. Declaration public Star(float x, float y, int prongs, float innerRadii, float outerRadii, float angle) Parameters Type Name Description Single x The X coordinate of the center of the polygon. Single y The Y coordinate of the center of the polygon. Int32 prongs The number of verticies the RegularPolygon should have. Single innerRadii The inner radii. Single outerRadii The outer radii. Single angle The angle of rotation in Radians Implements IPath ISimplePath"
  },
  "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.TextBuilder.html": {
    "href": "api/ImageSharp.Drawing/SixLabors.ImageSharp.Drawing.TextBuilder.html",
    "title": "Class TextBuilder",
    "keywords": "Class TextBuilder Text drawing extensions for a PathBuilder Inheritance Object TextBuilder Namespace : SixLabors.ImageSharp.Drawing Assembly : SixLabors.ImageSharp.Drawing.dll Syntax public static class TextBuilder : object Methods | Improve this Doc View Source GenerateGlyphs(String, PointF, RendererOptions) Generates the shapes corresponding the glyphs described by the font and with the settings withing the FontSpan Declaration public static IPathCollection GenerateGlyphs(string text, PointF location, RendererOptions style) Parameters Type Name Description String text The text to generate glyphs for PointF location The location RendererOptions style The style and settings to use while rendering the glyphs Returns Type Description IPathCollection The IPathCollection | Improve this Doc View Source GenerateGlyphs(String, RendererOptions) Generates the shapes corresponding the glyphs described by the font and with the settings withing the FontSpan Declaration public static IPathCollection GenerateGlyphs(string text, RendererOptions style) Parameters Type Name Description String text The text to generate glyphs for RendererOptions style The style and settings to use while rendering the glyphs Returns Type Description IPathCollection The IPathCollection | Improve this Doc View Source GenerateGlyphs(String, IPath, RendererOptions) Generates the shapes corresponding the glyphs described by the font and with the setting in within the FontSpan along the described path. Declaration public static IPathCollection GenerateGlyphs(string text, IPath path, RendererOptions style) Parameters Type Name Description String text The text to generate glyphs for IPath path The path to draw the text in relation to RendererOptions style The style and settings to use while rendering the glyphs Returns Type Description IPathCollection The IPathCollection"
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Caching.Azure.AzureBlobStorageCache.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Caching.Azure.AzureBlobStorageCache.html",
    "title": "Class AzureBlobStorageCache",
    "keywords": "Class AzureBlobStorageCache Implements an Azure Blob Storage based cache. Inheritance Object AzureBlobStorageCache Implements IImageCache Namespace : SixLabors.ImageSharp.Web.Caching.Azure Assembly : SixLabors.ImageSharp.Web.Providers.Azure.dll Syntax public class AzureBlobStorageCache : object, IImageCache Constructors | Improve this Doc View Source AzureBlobStorageCache(IOptions<AzureBlobStorageCacheOptions>) Initializes a new instance of the AzureBlobStorageCache class. Declaration public AzureBlobStorageCache(IOptions<AzureBlobStorageCacheOptions> cacheOptions) Parameters Type Name Description IOptions < AzureBlobStorageCacheOptions > cacheOptions The cache options. Methods | Improve this Doc View Source CreateIfNotExists(AzureBlobStorageCacheOptions, PublicAccessType) Creates a new container under the specified account if a container with the same name does not already exist. Declaration public static Response<BlobContainerInfo> CreateIfNotExists(AzureBlobStorageCacheOptions options, PublicAccessType accessType) Parameters Type Name Description AzureBlobStorageCacheOptions options The Azure Blob Storage cache options. PublicAccessType accessType Optionally specifies whether data in the container may be accessed publicly and the level of access. specifies full public read access for container and blob data. Clients can enumerate blobs within the container via anonymous request, but cannot enumerate containers within the storage account. specifies public read access for blobs. Blob data within this container can be read via anonymous request, but container data is not available. Clients cannot enumerate blobs within the container via anonymous request. specifies that the container data is private to the account owner. Returns Type Description Response < BlobContainerInfo > If the container does not already exist, a describing the newly created container. If the container already exists, null . | Improve this Doc View Source GetAsync(String) Declaration public Task<IImageCacheResolver> GetAsync(string key) Parameters Type Name Description String key Returns Type Description Task < IImageCacheResolver > | Improve this Doc View Source SetAsync(String, Stream, ImageCacheMetadata) Declaration public Task SetAsync(string key, Stream stream, ImageCacheMetadata metadata) Parameters Type Name Description String key Stream stream ImageCacheMetadata metadata Returns Type Description Task Implements IImageCache"
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Caching.Azure.AzureBlobStorageCacheOptions.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Caching.Azure.AzureBlobStorageCacheOptions.html",
    "title": "Class AzureBlobStorageCacheOptions",
    "keywords": "Class AzureBlobStorageCacheOptions Configuration options for the AzureBlobStorageCache . Inheritance Object AzureBlobStorageCacheOptions Namespace : SixLabors.ImageSharp.Web.Caching.Azure Assembly : SixLabors.ImageSharp.Web.Providers.Azure.dll Syntax public class AzureBlobStorageCacheOptions : object Properties | Improve this Doc View Source ConnectionString Gets or sets the Azure Blob Storage connection string. https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string. Declaration public string ConnectionString { get; set; } Property Value Type Description String | Improve this Doc View Source ContainerName Gets or sets the Azure Blob Storage container name. Must conform to Azure Blob Storage containiner naming guidlines. https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#container-names Declaration public string ContainerName { get; set; } Property Value Type Description String"
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Caching.Azure.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Caching.Azure.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Caching.Azure",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Caching.Azure Classes AzureBlobStorageCache Implements an Azure Blob Storage based cache. AzureBlobStorageCacheOptions Configuration options for the AzureBlobStorageCache ."
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Providers.Azure.AzureBlobContainerClientOptions.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Providers.Azure.AzureBlobContainerClientOptions.html",
    "title": "Class AzureBlobContainerClientOptions",
    "keywords": "Class AzureBlobContainerClientOptions Represents a single Azure Blob Storage connection and container. Inheritance Object AzureBlobContainerClientOptions Namespace : SixLabors.ImageSharp.Web.Providers.Azure Assembly : SixLabors.ImageSharp.Web.Providers.Azure.dll Syntax public class AzureBlobContainerClientOptions : object Properties | Improve this Doc View Source ConnectionString Gets or sets the Azure Blob Storage connection string. https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string. Declaration public string ConnectionString { get; set; } Property Value Type Description String | Improve this Doc View Source ContainerName Gets or sets the Azure Blob Storage container name. Must conform to Azure Blob Storage containiner naming guidlines. https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#container-names Declaration public string ContainerName { get; set; } Property Value Type Description String"
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Providers.Azure.AzureBlobStorageImageProvider.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Providers.Azure.AzureBlobStorageImageProvider.html",
    "title": "Class AzureBlobStorageImageProvider",
    "keywords": "Class AzureBlobStorageImageProvider Returns images stored in Azure Blob Storage. Inheritance Object AzureBlobStorageImageProvider Implements IImageProvider Namespace : SixLabors.ImageSharp.Web.Providers.Azure Assembly : SixLabors.ImageSharp.Web.Providers.Azure.dll Syntax public class AzureBlobStorageImageProvider : object, IImageProvider Constructors | Improve this Doc View Source AzureBlobStorageImageProvider(IOptions<AzureBlobStorageImageProviderOptions>, FormatUtilities) Initializes a new instance of the AzureBlobStorageImageProvider class. Declaration public AzureBlobStorageImageProvider(IOptions<AzureBlobStorageImageProviderOptions> storageOptions, FormatUtilities formatUtilities) Parameters Type Name Description IOptions < AzureBlobStorageImageProviderOptions > storageOptions The blob storage options. FormatUtilities formatUtilities Contains various format helper methods based on the current configuration. Properties | Improve this Doc View Source Match Declaration public Func<HttpContext, bool> Match { get; set; } Property Value Type Description Func < HttpContext , Boolean > | Improve this Doc View Source ProcessingBehavior Declaration public ProcessingBehavior ProcessingBehavior { get; } Property Value Type Description ProcessingBehavior Methods | Improve this Doc View Source GetAsync(HttpContext) Declaration public Task<IImageResolver> GetAsync(HttpContext context) Parameters Type Name Description HttpContext context Returns Type Description Task < IImageResolver > | Improve this Doc View Source IsValidRequest(HttpContext) Declaration public bool IsValidRequest(HttpContext context) Parameters Type Name Description HttpContext context Returns Type Description Boolean Implements IImageProvider"
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Providers.Azure.AzureBlobStorageImageProviderOptions.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Providers.Azure.AzureBlobStorageImageProviderOptions.html",
    "title": "Class AzureBlobStorageImageProviderOptions",
    "keywords": "Class AzureBlobStorageImageProviderOptions Configuration options for the AzureBlobStorageImageProvider provider. Inheritance Object AzureBlobStorageImageProviderOptions Namespace : SixLabors.ImageSharp.Web.Providers.Azure Assembly : SixLabors.ImageSharp.Web.Providers.Azure.dll Syntax public class AzureBlobStorageImageProviderOptions : object Properties | Improve this Doc View Source BlobContainers Gets or sets the collection of blob container client options. Declaration public ICollection<AzureBlobContainerClientOptions> BlobContainers { get; set; } Property Value Type Description ICollection < AzureBlobContainerClientOptions >"
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Providers.Azure.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Providers.Azure.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Providers.Azure",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Providers.Azure Classes AzureBlobContainerClientOptions Represents a single Azure Blob Storage connection and container. AzureBlobStorageImageProvider Returns images stored in Azure Blob Storage. AzureBlobStorageImageProviderOptions Configuration options for the AzureBlobStorageImageProvider provider."
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Resolvers.Azure.AzureBlobStorageCacheResolver.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Resolvers.Azure.AzureBlobStorageCacheResolver.html",
    "title": "Class AzureBlobStorageCacheResolver",
    "keywords": "Class AzureBlobStorageCacheResolver Provides means to manage image buffers within the AzureBlobStorageCache . Inheritance Object AzureBlobStorageCacheResolver Implements IImageCacheResolver Namespace : SixLabors.ImageSharp.Web.Resolvers.Azure Assembly : SixLabors.ImageSharp.Web.Providers.Azure.dll Syntax public class AzureBlobStorageCacheResolver : object, IImageCacheResolver Constructors | Improve this Doc View Source AzureBlobStorageCacheResolver(BlobClient) Initializes a new instance of the AzureBlobStorageCacheResolver class. Declaration public AzureBlobStorageCacheResolver(BlobClient blob) Parameters Type Name Description BlobClient blob The Azure blob. Methods | Improve this Doc View Source GetMetaDataAsync() Declaration public Task<ImageCacheMetadata> GetMetaDataAsync() Returns Type Description Task < ImageCacheMetadata > | Improve this Doc View Source OpenReadAsync() Declaration public Task<Stream> OpenReadAsync() Returns Type Description Task < Stream > Implements IImageCacheResolver"
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Resolvers.Azure.AzureBlobStorageImageResolver.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Resolvers.Azure.AzureBlobStorageImageResolver.html",
    "title": "Class AzureBlobStorageImageResolver",
    "keywords": "Class AzureBlobStorageImageResolver Provides means to manage image buffers within the Azure Blob file system. Inheritance Object AzureBlobStorageImageResolver Implements IImageResolver Namespace : SixLabors.ImageSharp.Web.Resolvers.Azure Assembly : SixLabors.ImageSharp.Web.Providers.Azure.dll Syntax public class AzureBlobStorageImageResolver : object, IImageResolver Constructors | Improve this Doc View Source AzureBlobStorageImageResolver(BlobClient) Initializes a new instance of the AzureBlobStorageImageResolver class. Declaration public AzureBlobStorageImageResolver(BlobClient blob) Parameters Type Name Description BlobClient blob The Azure blob. Methods | Improve this Doc View Source GetMetaDataAsync() Declaration public Task<ImageMetadata> GetMetaDataAsync() Returns Type Description Task < ImageMetadata > | Improve this Doc View Source OpenReadAsync() Declaration public Task<Stream> OpenReadAsync() Returns Type Description Task < Stream > Implements IImageResolver"
  },
  "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Resolvers.Azure.html": {
    "href": "api/ImageSharp.Web.Providers.Azure/SixLabors.ImageSharp.Web.Resolvers.Azure.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Resolvers.Azure",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Resolvers.Azure Classes AzureBlobStorageCacheResolver Provides means to manage image buffers within the AzureBlobStorageCache . AzureBlobStorageImageResolver Provides means to manage image buffers within the Azure Blob file system."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.CacheHash.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.CacheHash.html",
    "title": "Class CacheHash",
    "keywords": "Class CacheHash Creates hashed keys for the given inputs hashing them to string of length ranging from 2 to 64. Hashed keys are the result of the SHA256 computation of the input value for the given length. This ensures low collision rates with a shorter file name. Inheritance Object CacheHash Implements ICacheHash Namespace : SixLabors.ImageSharp.Web.Caching Assembly : SixLabors.ImageSharp.Web.dll Syntax public sealed class CacheHash : object, ICacheHash Constructors | Improve this Doc View Source CacheHash(IOptions<ImageSharpMiddlewareOptions>) Initializes a new instance of the CacheHash class. Declaration public CacheHash(IOptions<ImageSharpMiddlewareOptions> options) Parameters Type Name Description IOptions < ImageSharpMiddlewareOptions > options The middleware configuration options. Methods | Improve this Doc View Source Create(String, UInt32) Returns the hashed file name for the cached image file. Declaration public string Create(string value, uint length) Parameters Type Name Description String value The input value to hash. UInt32 length The length of the returned hash without any extensions. Returns Type Description String The . Implements ICacheHash"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Caching",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Caching Classes CacheHash Creates hashed keys for the given inputs hashing them to string of length ranging from 2 to 64. Hashed keys are the result of the SHA256 computation of the input value for the given length. This ensures low collision rates with a shorter file name. PhysicalFileSystemCache Implements a physical file system based cache. PhysicalFileSystemCacheOptions Configuration options for the PhysicalFileSystemCache . Interfaces ICacheHash Defines a contract that allows the creation of hashed file names for storing cached images. IImageCache Specifies the contract for caching images."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.ICacheHash.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.ICacheHash.html",
    "title": "Interface ICacheHash",
    "keywords": "Interface ICacheHash Defines a contract that allows the creation of hashed file names for storing cached images. Namespace : SixLabors.ImageSharp.Web.Caching Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface ICacheHash Methods | Improve this Doc View Source Create(String, UInt32) Returns the hashed file name for the cached image file. Declaration string Create(string value, uint length) Parameters Type Name Description String value The input value to hash. UInt32 length The length of the returned hash without any extensions. Returns Type Description String The ."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.IImageCache.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.IImageCache.html",
    "title": "Interface IImageCache",
    "keywords": "Interface IImageCache Specifies the contract for caching images. Namespace : SixLabors.ImageSharp.Web.Caching Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface IImageCache Methods | Improve this Doc View Source GetAsync(String) Gets the image resolver associated with the specified key. Declaration Task<IImageCacheResolver> GetAsync(string key) Parameters Type Name Description String key The cache key. Returns Type Description Task < IImageCacheResolver > The IImageResolver . | Improve this Doc View Source SetAsync(String, Stream, ImageCacheMetadata) Sets the value associated with the specified key. Declaration Task SetAsync(string key, Stream stream, ImageCacheMetadata metadata) Parameters Type Name Description String key The cache key. Stream stream The stream containing the image to store. ImageCacheMetadata metadata The ImageCacheMetadata associated with the image to store. Returns Type Description Task The task."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.PhysicalFileSystemCache.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.PhysicalFileSystemCache.html",
    "title": "Class PhysicalFileSystemCache",
    "keywords": "Class PhysicalFileSystemCache Implements a physical file system based cache. Inheritance Object PhysicalFileSystemCache Implements IImageCache Namespace : SixLabors.ImageSharp.Web.Caching Assembly : SixLabors.ImageSharp.Web.dll Syntax public class PhysicalFileSystemCache : object, IImageCache Constructors | Improve this Doc View Source PhysicalFileSystemCache(IOptions<PhysicalFileSystemCacheOptions>, IWebHostEnvironment, IOptions<ImageSharpMiddlewareOptions>, FormatUtilities) Initializes a new instance of the PhysicalFileSystemCache class. Declaration public PhysicalFileSystemCache(IOptions<PhysicalFileSystemCacheOptions> cacheOptions, IWebHostEnvironment environment, IOptions<ImageSharpMiddlewareOptions> options, FormatUtilities formatUtilities) Parameters Type Name Description IOptions < PhysicalFileSystemCacheOptions > cacheOptions The cache configuration options. IWebHostEnvironment environment The hosting environment the application is running in. IOptions < ImageSharpMiddlewareOptions > options The middleware configuration options. FormatUtilities formatUtilities Contains various format helper methods based on the current configuration. Methods | Improve this Doc View Source GetAsync(String) Gets the image resolver associated with the specified key. Declaration public Task<IImageCacheResolver> GetAsync(string key) Parameters Type Name Description String key The cache key. Returns Type Description Task < IImageCacheResolver > The IImageResolver . | Improve this Doc View Source SetAsync(String, Stream, ImageCacheMetadata) Sets the value associated with the specified key. Declaration public Task SetAsync(string key, Stream stream, ImageCacheMetadata metadata) Parameters Type Name Description String key The cache key. Stream stream The stream containing the image to store. ImageCacheMetadata metadata The ImageCacheMetadata associated with the image to store. Returns Type Description Task The task. Implements IImageCache"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.PhysicalFileSystemCacheOptions.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Caching.PhysicalFileSystemCacheOptions.html",
    "title": "Class PhysicalFileSystemCacheOptions",
    "keywords": "Class PhysicalFileSystemCacheOptions Configuration options for the PhysicalFileSystemCache . Inheritance Object PhysicalFileSystemCacheOptions Namespace : SixLabors.ImageSharp.Web.Caching Assembly : SixLabors.ImageSharp.Web.dll Syntax public class PhysicalFileSystemCacheOptions : object Properties | Improve this Doc View Source CacheFolder Gets or sets the cache folder name. Declaration public string CacheFolder { get; set; } Property Value Type Description String | Improve this Doc View Source CacheRoot Gets or sets the optional cache root folder. This value can be null , a fully qualified absolute path, or a path relative to the directory that contains the application content files. If not set, this will default to the directory that contains the web-servable application content files; commonly 'wwwroot'. Declaration public string CacheRoot { get; set; } Property Value Type Description String"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.CommandParser.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.CommandParser.html",
    "title": "Class CommandParser",
    "keywords": "Class CommandParser Parses URI derived command values into usable commands for processors. Inheritance Object CommandParser Namespace : SixLabors.ImageSharp.Web.Commands Assembly : SixLabors.ImageSharp.Web.dll Syntax public sealed class CommandParser : object Constructors | Improve this Doc View Source CommandParser(IEnumerable<ICommandConverter>) Initializes a new instance of the CommandParser class. Declaration public CommandParser(IEnumerable<ICommandConverter> converters) Parameters Type Name Description IEnumerable < ICommandConverter > converters The collection of command converters. Methods | Improve this Doc View Source ParseValue<T>(String, CultureInfo) Parses the given string value converting it to the given type. Declaration public T ParseValue<T>(string value, CultureInfo culture) Parameters Type Name Description String value The string value to parse. CultureInfo culture The to use as the current culture. Returns Type Description T The converted instance or the default. Type Parameters Name Description T The to convert the string to."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.Converters.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.Converters.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Commands.Converters",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Commands.Converters Interfaces ICommandConverter Defines a contract for converting the value of a string into a different data type. Implementations should be stateless by design and also implement ICommandConverter<T> . ICommandConverter<T>"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.Converters.ICommandConverter.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.Converters.ICommandConverter.html",
    "title": "Interface ICommandConverter",
    "keywords": "Interface ICommandConverter Defines a contract for converting the value of a string into a different data type. Implementations should be stateless by design and also implement ICommandConverter<T> . Namespace : SixLabors.ImageSharp.Web.Commands.Converters Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface ICommandConverter Properties | Improve this Doc View Source Type Gets the type this converter returns. Declaration Type Type { get; } Property Value Type Description Type"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.Converters.ICommandConverter-1.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.Converters.ICommandConverter-1.html",
    "title": "Interface ICommandConverter<T>",
    "keywords": "Interface ICommandConverter<T> Inherited Members ICommandConverter.Type Namespace : SixLabors.ImageSharp.Web.Commands.Converters Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface ICommandConverter<T> : ICommandConverter Type Parameters Name Description T The type this converter returns. Methods | Improve this Doc View Source ConvertFrom(CommandParser, CultureInfo, String, Type) Converts the given string to the type of this converter, using the specified culture information. Declaration T ConvertFrom(CommandParser parser, CultureInfo culture, string value, Type propertyType) Parameters Type Name Description CommandParser parser The command parser use for parting commands. CultureInfo culture The to use as the current parsing culture. String value The to convert. Type propertyType The property type that the converter will convert to. Returns Type Description T A that represents the converted value."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.DictionaryExtensions.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions",
    "keywords": "Class DictionaryExtensions Extension methods for . Inheritance Object DictionaryExtensions Namespace : SixLabors.ImageSharp.Web.Commands Assembly : SixLabors.ImageSharp.Web.dll Syntax public static class DictionaryExtensions : object Methods | Improve this Doc View Source GetValueOrDefault<TValue, TKey>(IDictionary<TKey, TValue>, TKey) Gets the value associated with the specified key or the default value. Declaration public static TValue GetValueOrDefault<TValue, TKey>(this IDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description IDictionary <TKey, TValue> dictionary The dictionary instance. TKey key The key of the value to get. Returns Type Description TValue The value associated with the specified key or the default value. Type Parameters Name Description TValue The value type. TKey The key type."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Commands",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Commands Classes CommandParser Parses URI derived command values into usable commands for processors. DictionaryExtensions Extension methods for . QueryCollectionRequestParser Parses commands from the request querystring. Interfaces IRequestParser Defines a contract for parsing commands from image requests."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.IRequestParser.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.IRequestParser.html",
    "title": "Interface IRequestParser",
    "keywords": "Interface IRequestParser Defines a contract for parsing commands from image requests. Namespace : SixLabors.ImageSharp.Web.Commands Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface IRequestParser Methods | Improve this Doc View Source ParseRequestCommands(HttpContext) Returns a collection of commands from the current request. Declaration IDictionary<string, string> ParseRequestCommands(HttpContext context) Parameters Type Name Description HttpContext context Encapsulates all HTTP-specific information about an individual HTTP request. Returns Type Description IDictionary < String , String > The ."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.QueryCollectionRequestParser.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Commands.QueryCollectionRequestParser.html",
    "title": "Class QueryCollectionRequestParser",
    "keywords": "Class QueryCollectionRequestParser Parses commands from the request querystring. Inheritance Object QueryCollectionRequestParser Implements IRequestParser Namespace : SixLabors.ImageSharp.Web.Commands Assembly : SixLabors.ImageSharp.Web.dll Syntax public sealed class QueryCollectionRequestParser : object, IRequestParser Methods | Improve this Doc View Source ParseRequestCommands(HttpContext) Returns a collection of commands from the current request. Declaration public IDictionary<string, string> ParseRequestCommands(HttpContext context) Parameters Type Name Description HttpContext context Encapsulates all HTTP-specific information about an individual HTTP request. Returns Type Description IDictionary < String , String > The . Implements IRequestParser"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.ApplicationBuilderExtensions.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions",
    "keywords": "Class ApplicationBuilderExtensions Extension methods for to simplify middleware registration. Inheritance Object ApplicationBuilderExtensions Namespace : SixLabors.ImageSharp.Web.DependencyInjection Assembly : SixLabors.ImageSharp.Web.dll Syntax public static class ApplicationBuilderExtensions : object Methods | Improve this Doc View Source UseImageSharp(IApplicationBuilder) Registers the ImageSharp middleware. Declaration public static IApplicationBuilder UseImageSharp(this IApplicationBuilder app) Parameters Type Name Description IApplicationBuilder app The application with the mechanism to configure a request pipeline. Returns Type Description IApplicationBuilder ."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.html",
    "title": "Namespace SixLabors.ImageSharp.Web.DependencyInjection",
    "keywords": "Namespace SixLabors.ImageSharp.Web.DependencyInjection Classes ApplicationBuilderExtensions Extension methods for to simplify middleware registration. ImageSharpBuilderExtensions Extension methods for IImageSharpBuilder that allow configuration of services. ImageSharpConfiguration Provides default configuration settings to be consumed by the middleware. ServiceCollectionExtensions Extension methods for to simplify middleware service registration. Interfaces IImageSharpBuilder Defines a contract for adding ImageSharp services."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.IImageSharpBuilder.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.IImageSharpBuilder.html",
    "title": "Interface IImageSharpBuilder",
    "keywords": "Interface IImageSharpBuilder Defines a contract for adding ImageSharp services. Namespace : SixLabors.ImageSharp.Web.DependencyInjection Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface IImageSharpBuilder Properties | Improve this Doc View Source Services Gets the where ImageSharp services are configured. Declaration IServiceCollection Services { get; } Property Value Type Description IServiceCollection Extension Methods ImageSharpBuilderExtensions.SetRequestParser<TParser>(IImageSharpBuilder) ImageSharpBuilderExtensions.SetRequestParser(IImageSharpBuilder, Func<IServiceProvider, IRequestParser>) ImageSharpBuilderExtensions.SetMemoryAllocator(IImageSharpBuilder, Func<IServiceProvider, MemoryAllocator>) ImageSharpBuilderExtensions.SetMemoryAllocator<TMemoryAllocator>(IImageSharpBuilder) ImageSharpBuilderExtensions.SetCache<TCache>(IImageSharpBuilder) ImageSharpBuilderExtensions.SetCache(IImageSharpBuilder, Func<IServiceProvider, IImageCache>) ImageSharpBuilderExtensions.SetCacheHash<TCacheHash>(IImageSharpBuilder) ImageSharpBuilderExtensions.SetCacheHash(IImageSharpBuilder, Func<IServiceProvider, ICacheHash>) ImageSharpBuilderExtensions.AddProvider<TProvider>(IImageSharpBuilder) ImageSharpBuilderExtensions.AddProvider<TProvider>(IImageSharpBuilder, Func<IServiceProvider, TProvider>) ImageSharpBuilderExtensions.RemoveProvider<TProvider>(IImageSharpBuilder) ImageSharpBuilderExtensions.ClearProviders(IImageSharpBuilder) ImageSharpBuilderExtensions.AddProcessor<TProcessor>(IImageSharpBuilder) ImageSharpBuilderExtensions.AddProcessor<TProcessor>(IImageSharpBuilder, Func<IServiceProvider, TProcessor>) ImageSharpBuilderExtensions.RemoveProcessor<TProcessor>(IImageSharpBuilder) ImageSharpBuilderExtensions.ClearProcessors(IImageSharpBuilder) ImageSharpBuilderExtensions.AddConverter<TConverter>(IImageSharpBuilder) ImageSharpBuilderExtensions.AddConverter<TConverter>(IImageSharpBuilder, Func<IServiceProvider, TConverter>) ImageSharpBuilderExtensions.RemoveConverter<TConverter>(IImageSharpBuilder) ImageSharpBuilderExtensions.ClearConverters(IImageSharpBuilder) ImageSharpBuilderExtensions.Configure<TOptions>(IImageSharpBuilder, IConfiguration) ImageSharpBuilderExtensions.Configure<TOptions>(IImageSharpBuilder, Action<TOptions>)"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.ImageSharpBuilderExtensions.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.ImageSharpBuilderExtensions.html",
    "title": "Class ImageSharpBuilderExtensions",
    "keywords": "Class ImageSharpBuilderExtensions Extension methods for IImageSharpBuilder that allow configuration of services. Inheritance Object ImageSharpBuilderExtensions Namespace : SixLabors.ImageSharp.Web.DependencyInjection Assembly : SixLabors.ImageSharp.Web.dll Syntax public static class ImageSharpBuilderExtensions : object Methods | Improve this Doc View Source AddConverter<TConverter>(IImageSharpBuilder) Adds the given ICommandConverter to the converter collection within the service collection. Declaration public static IImageSharpBuilder AddConverter<TConverter>(this IImageSharpBuilder builder) where TConverter : class, ICommandConverter Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TConverter The type of class implementing ICommandConverter to add. | Improve this Doc View Source AddConverter<TConverter>(IImageSharpBuilder, Func<IServiceProvider, TConverter>) Adds the given ICommandConverter to the converter collection within the service collection. Declaration public static IImageSharpBuilder AddConverter<TConverter>(this IImageSharpBuilder builder, Func<IServiceProvider, TConverter> implementationFactory) where TConverter : class, ICommandConverter Parameters Type Name Description IImageSharpBuilder builder The core builder. Func < IServiceProvider , TConverter> implementationFactory The factory method for returning a ICommandConverter . Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TConverter The type of class implementing ICommandConverter to add. | Improve this Doc View Source AddProcessor<TProcessor>(IImageSharpBuilder) Adds the given IImageWebProcessor to the processor collection within the service collection. Declaration public static IImageSharpBuilder AddProcessor<TProcessor>(this IImageSharpBuilder builder) where TProcessor : class, IImageWebProcessor Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TProcessor The type of class implementing IImageWebProcessor to add. | Improve this Doc View Source AddProcessor<TProcessor>(IImageSharpBuilder, Func<IServiceProvider, TProcessor>) Adds the given IImageWebProcessor to the processor collection within the service collection. Declaration public static IImageSharpBuilder AddProcessor<TProcessor>(this IImageSharpBuilder builder, Func<IServiceProvider, TProcessor> implementationFactory) where TProcessor : class, IImageWebProcessor Parameters Type Name Description IImageSharpBuilder builder The core builder. Func < IServiceProvider , TProcessor> implementationFactory The factory method for returning a IImageProvider . Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TProcessor The type of class implementing IImageWebProcessor to add. | Improve this Doc View Source AddProvider<TProvider>(IImageSharpBuilder) Adds the given IImageProvider to the provider collection within the service collection. Declaration public static IImageSharpBuilder AddProvider<TProvider>(this IImageSharpBuilder builder) where TProvider : class, IImageProvider Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TProvider The type of class implementing IImageProvider to add. | Improve this Doc View Source AddProvider<TProvider>(IImageSharpBuilder, Func<IServiceProvider, TProvider>) Adds the given IImageProvider to the provider collection within the service collection. Declaration public static IImageSharpBuilder AddProvider<TProvider>(this IImageSharpBuilder builder, Func<IServiceProvider, TProvider> implementationFactory) where TProvider : class, IImageProvider Parameters Type Name Description IImageSharpBuilder builder The core builder. Func < IServiceProvider , TProvider> implementationFactory The factory method for returning a IImageProvider . Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TProvider The type of class implementing IImageProvider to add. | Improve this Doc View Source ClearConverters(IImageSharpBuilder) Removes all ICommandConverter instances from the converter collection within the service collection. Declaration public static IImageSharpBuilder ClearConverters(this IImageSharpBuilder builder) Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . | Improve this Doc View Source ClearProcessors(IImageSharpBuilder) Removes all IImageWebProcessor instances from the processor collection within the service collection. Declaration public static IImageSharpBuilder ClearProcessors(this IImageSharpBuilder builder) Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . | Improve this Doc View Source ClearProviders(IImageSharpBuilder) Removes all IImageProvider instances from the provider collection within the service collection. Declaration public static IImageSharpBuilder ClearProviders(this IImageSharpBuilder builder) Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . | Improve this Doc View Source Configure<TOptions>(IImageSharpBuilder, Action<TOptions>) Registers an action used to configure a particular type of options. Declaration public static IImageSharpBuilder Configure<TOptions>(this IImageSharpBuilder builder, Action<TOptions> configureOptions) where TOptions : class Parameters Type Name Description IImageSharpBuilder builder The core builder. Action <TOptions> configureOptions The action used to configure the options. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TOptions The options type to be configured. | Improve this Doc View Source Configure<TOptions>(IImageSharpBuilder, IConfiguration) Registers an action used to configure a particular type of options. Declaration public static IImageSharpBuilder Configure<TOptions>(this IImageSharpBuilder builder, IConfiguration configuration) where TOptions : class Parameters Type Name Description IImageSharpBuilder builder The core builder. IConfiguration configuration The configuration being bound. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TOptions The options type to be configured. | Improve this Doc View Source RemoveConverter<TConverter>(IImageSharpBuilder) Removes the given ICommandConverter from the converter collection within the service collection. Declaration public static IImageSharpBuilder RemoveConverter<TConverter>(this IImageSharpBuilder builder) where TConverter : class, ICommandConverter Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TConverter The type of class implementing ICommandConverter to add. | Improve this Doc View Source RemoveProcessor<TProcessor>(IImageSharpBuilder) Removes the given IImageWebProcessor from the processor collection within the service collection. Declaration public static IImageSharpBuilder RemoveProcessor<TProcessor>(this IImageSharpBuilder builder) where TProcessor : class, IImageWebProcessor Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TProcessor The type of class implementing IImageWebProcessor to add. | Improve this Doc View Source RemoveProvider<TProvider>(IImageSharpBuilder) Removes the given IImageProvider from the provider collection within the service collection. Declaration public static IImageSharpBuilder RemoveProvider<TProvider>(this IImageSharpBuilder builder) where TProvider : class, IImageProvider Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TProvider The type of class implementing IImageProvider to add. | Improve this Doc View Source SetCache(IImageSharpBuilder, Func<IServiceProvider, IImageCache>) Sets the given IImageCache adding it to the service collection. Declaration public static IImageSharpBuilder SetCache(this IImageSharpBuilder builder, Func<IServiceProvider, IImageCache> implementationFactory) Parameters Type Name Description IImageSharpBuilder builder The core builder. Func < IServiceProvider , IImageCache > implementationFactory The factory method for returning a IImageCache . Returns Type Description IImageSharpBuilder The IImageSharpBuilder . | Improve this Doc View Source SetCache<TCache>(IImageSharpBuilder) Sets the given IImageCache adding it to the service collection. Declaration public static IImageSharpBuilder SetCache<TCache>(this IImageSharpBuilder builder) where TCache : class, IImageCache Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TCache The type of class implementing IImageCache to add. | Improve this Doc View Source SetCacheHash(IImageSharpBuilder, Func<IServiceProvider, ICacheHash>) Sets the given ICacheHash adding it to the service collection. Declaration public static IImageSharpBuilder SetCacheHash(this IImageSharpBuilder builder, Func<IServiceProvider, ICacheHash> implementationFactory) Parameters Type Name Description IImageSharpBuilder builder The core builder. Func < IServiceProvider , ICacheHash > implementationFactory The factory method for returning a ICacheHash . Returns Type Description IImageSharpBuilder The IImageSharpBuilder . | Improve this Doc View Source SetCacheHash<TCacheHash>(IImageSharpBuilder) Sets the given ICacheHash adding it to the service collection. Declaration public static IImageSharpBuilder SetCacheHash<TCacheHash>(this IImageSharpBuilder builder) where TCacheHash : class, ICacheHash Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TCacheHash The type of class implementing ICacheHash to add. | Improve this Doc View Source SetMemoryAllocator(IImageSharpBuilder, Func<IServiceProvider, MemoryAllocator>) Sets the given adding it to the service collection. Declaration public static IImageSharpBuilder SetMemoryAllocator(this IImageSharpBuilder builder, Func<IServiceProvider, MemoryAllocator> implementationFactory) Parameters Type Name Description IImageSharpBuilder builder The core builder. Func < IServiceProvider , MemoryAllocator > implementationFactory The factory method for returning a . Returns Type Description IImageSharpBuilder The IImageSharpBuilder . | Improve this Doc View Source SetMemoryAllocator<TMemoryAllocator>(IImageSharpBuilder) Sets the given adding it to the service collection. Declaration public static IImageSharpBuilder SetMemoryAllocator<TMemoryAllocator>(this IImageSharpBuilder builder) where TMemoryAllocator : MemoryAllocator Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TMemoryAllocator The type of class implementing to add. | Improve this Doc View Source SetRequestParser(IImageSharpBuilder, Func<IServiceProvider, IRequestParser>) Sets the given IRequestParser adding it to the service collection. Declaration public static IImageSharpBuilder SetRequestParser(this IImageSharpBuilder builder, Func<IServiceProvider, IRequestParser> implementationFactory) Parameters Type Name Description IImageSharpBuilder builder The core builder. Func < IServiceProvider , IRequestParser > implementationFactory The factory method for returning a IRequestParser . Returns Type Description IImageSharpBuilder The IImageSharpBuilder . | Improve this Doc View Source SetRequestParser<TParser>(IImageSharpBuilder) Sets the given IRequestParser adding it to the service collection. Declaration public static IImageSharpBuilder SetRequestParser<TParser>(this IImageSharpBuilder builder) where TParser : class, IRequestParser Parameters Type Name Description IImageSharpBuilder builder The core builder. Returns Type Description IImageSharpBuilder The IImageSharpBuilder . Type Parameters Name Description TParser The type of class implementing IRequestParser to add."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.ImageSharpConfiguration.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.ImageSharpConfiguration.html",
    "title": "Class ImageSharpConfiguration",
    "keywords": "Class ImageSharpConfiguration Provides default configuration settings to be consumed by the middleware. Inheritance Object ImageSharpConfiguration Namespace : SixLabors.ImageSharp.Web.DependencyInjection Assembly : SixLabors.ImageSharp.Web.dll Syntax public class ImageSharpConfiguration : IConfigureOptions<ImageSharpMiddlewareOptions> Methods | Improve this Doc View Source Configure(ImageSharpMiddlewareOptions) Declaration public void Configure(ImageSharpMiddlewareOptions options) Parameters Type Name Description ImageSharpMiddlewareOptions options"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.ServiceCollectionExtensions.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.DependencyInjection.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions",
    "keywords": "Class ServiceCollectionExtensions Extension methods for to simplify middleware service registration. Inheritance Object ServiceCollectionExtensions Namespace : SixLabors.ImageSharp.Web.DependencyInjection Assembly : SixLabors.ImageSharp.Web.dll Syntax public static class ServiceCollectionExtensions : object Methods | Improve this Doc View Source AddImageSharp(IServiceCollection) Adds ImageSharp services to the specified with the default options. Declaration public static IImageSharpBuilder AddImageSharp(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The to add services to. Returns Type Description IImageSharpBuilder An IImageSharpBuilder that can be used to further configure the ImageSharp services. | Improve this Doc View Source AddImageSharp(IServiceCollection, Action<ImageSharpMiddlewareOptions>) Adds ImageSharp services to the specified with the given options. Declaration public static IImageSharpBuilder AddImageSharp(this IServiceCollection services, Action<ImageSharpMiddlewareOptions> setupAction) Parameters Type Name Description IServiceCollection services The to add services to. Action < ImageSharpMiddlewareOptions > setupAction An to configure the provided ImageSharpMiddlewareOptions . Returns Type Description IImageSharpBuilder An IImageSharpBuilder that can be used to further configure the ImageSharp services."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.FormattedImage.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.FormattedImage.html",
    "title": "Class FormattedImage",
    "keywords": "Class FormattedImage A class encapsulating an image with a particular file encoding. Inheritance Object FormattedImage Namespace : SixLabors.ImageSharp.Web Assembly : SixLabors.ImageSharp.Web.dll Syntax public sealed class FormattedImage : IDisposable Properties | Improve this Doc View Source Encoder Gets or sets the encoder. Declaration public IImageEncoder Encoder { get; set; } Property Value Type Description IImageEncoder | Improve this Doc View Source Format Gets or sets the format. Declaration public IImageFormat Format { get; set; } Property Value Type Description IImageFormat | Improve this Doc View Source Image Gets the image. Declaration public Image<Rgba32> Image { get; } Property Value Type Description Image < Rgba32 > Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Load(Configuration, Stream) Loads the specified source. Declaration public static FormattedImage Load(Configuration configuration, Stream source) Parameters Type Name Description Configuration configuration The configuration. Stream source The source. Returns Type Description FormattedImage The FormattedImage . | Improve this Doc View Source Save(Stream) Saves image to the specified destination stream. Declaration public void Save(Stream destination) Parameters Type Name Description Stream destination The destination stream."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.FormatUtilities.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.FormatUtilities.html",
    "title": "Class FormatUtilities",
    "keywords": "Class FormatUtilities Contains various helper methods based on the given configuration. Inheritance Object FormatUtilities Namespace : SixLabors.ImageSharp.Web Assembly : SixLabors.ImageSharp.Web.dll Syntax public sealed class FormatUtilities : object Constructors | Improve this Doc View Source FormatUtilities(IOptions<ImageSharpMiddlewareOptions>) Initializes a new instance of the FormatUtilities class. Declaration public FormatUtilities(IOptions<ImageSharpMiddlewareOptions> options) Parameters Type Name Description IOptions < ImageSharpMiddlewareOptions > options The middleware options. Methods | Improve this Doc View Source GetExtensionFromContentType(String) Gets the correct extension for the given content type (mime-type). Declaration public string GetExtensionFromContentType(string contentType) Parameters Type Name Description String contentType The content type (mime-type). Returns Type Description String The . | Improve this Doc View Source GetExtensionFromUri(String) Gets the file extension for the given image uri. Declaration public string GetExtensionFromUri(string uri) Parameters Type Name Description String uri The full request uri. Returns Type Description String The ."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.html",
    "title": "Namespace SixLabors.ImageSharp.Web",
    "keywords": "Namespace SixLabors.ImageSharp.Web Classes FormattedImage A class encapsulating an image with a particular file encoding. FormatUtilities Contains various helper methods based on the given configuration. Structs ImageCacheMetadata Represents the metadata associated with an image file. ImageMetadata Represents the metadata associated with an image file."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.ImageCacheMetadata.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.ImageCacheMetadata.html",
    "title": "Struct ImageCacheMetadata",
    "keywords": "Struct ImageCacheMetadata Represents the metadata associated with an image file. Implements IEquatable < ImageCacheMetadata > Namespace : SixLabors.ImageSharp.Web Assembly : SixLabors.ImageSharp.Web.dll Syntax public struct ImageCacheMetadata : IEquatable<ImageCacheMetadata> Constructors | Improve this Doc View Source ImageCacheMetadata(DateTime, DateTime, String, TimeSpan, Int64) Initializes a new instance of the ImageCacheMetadata struct. Declaration public ImageCacheMetadata(DateTime sourceLastWriteTimeUtc, DateTime cacheLastWriteTimeUtc, string contentType, TimeSpan cacheControlMaxAge, long contentLength) Parameters Type Name Description DateTime sourceLastWriteTimeUtc The date and time in coordinated universal time (UTC) since the source file was last modified. DateTime cacheLastWriteTimeUtc The date and time in coordinated universal time (UTC) since the cache file was last modified. String contentType The content type for the source file. TimeSpan cacheControlMaxAge The maximum amount of time a resource will be considered fresh. Int64 contentLength The length of the image in bytes. Properties | Improve this Doc View Source CacheControlMaxAge Gets the maximum amount of time a resource will be considered fresh. Declaration public TimeSpan CacheControlMaxAge { get; } Property Value Type Description TimeSpan | Improve this Doc View Source CacheLastWriteTimeUtc Gets the date and time in coordinated universal time (UTC) since the cached file was last modified. Declaration public DateTime CacheLastWriteTimeUtc { get; } Property Value Type Description DateTime | Improve this Doc View Source ContentLength Gets the length of the image in bytes. Declaration public long ContentLength { get; } Property Value Type Description Int64 | Improve this Doc View Source ContentType Gets the content type of the source file. Declaration public string ContentType { get; } Property Value Type Description String | Improve this Doc View Source SourceLastWriteTimeUtc Gets the date and time in coordinated universal time (UTC) since the source file was last modified. Declaration public DateTime SourceLastWriteTimeUtc { get; } Property Value Type Description DateTime Methods | Improve this Doc View Source Equals(ImageCacheMetadata) Declaration public bool Equals(ImageCacheMetadata other) Parameters Type Name Description ImageCacheMetadata other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source FromDictionary(IDictionary<String, String>) Returns a new ImageCacheMetadata parsed from the given dictionary. Declaration public static ImageCacheMetadata FromDictionary(IDictionary<string, string> dictionary) Parameters Type Name Description IDictionary < String , String > dictionary The dictionary to parse and return the metadata from. Returns Type Description ImageCacheMetadata The ImageCacheMetadata . | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source ReadAsync(Stream) Asynchronously reads and returns an ImageCacheMetadata from the input stream. Declaration public static Task<ImageCacheMetadata> ReadAsync(Stream stream) Parameters Type Name Description Stream stream The input stream. Returns Type Description Task < ImageCacheMetadata > The ImageCacheMetadata . | Improve this Doc View Source ToDictionary() Returns a new representing the current instance. Declaration public Dictionary<string, string> ToDictionary() Returns Type Description Dictionary < String , String > The . | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source WriteAsync(Stream) Asynchronously writes the metadata to the target stream. Declaration public Task WriteAsync(Stream stream) Parameters Type Name Description Stream stream The target stream. Returns Type Description Task A representing the asynchronous operation. Operators | Improve this Doc View Source Equality(ImageCacheMetadata, ImageCacheMetadata) Compares two ImageCacheMetadata objects for equality. Declaration public static bool operator ==(in ImageCacheMetadata left, in ImageCacheMetadata right) Parameters Type Name Description ImageCacheMetadata left The ImageCacheMetadata on the left side of the operand. ImageCacheMetadata right The ImageCacheMetadata on the right side of the operand. Returns Type Description Boolean True if the current left is equal to the right parameter; otherwise, false. | Improve this Doc View Source Inequality(ImageCacheMetadata, ImageCacheMetadata) Compares two ImageCacheMetadata objects for inequality. Declaration public static bool operator !=(in ImageCacheMetadata left, in ImageCacheMetadata right) Parameters Type Name Description ImageCacheMetadata left The ImageCacheMetadata on the left side of the operand. ImageCacheMetadata right The ImageCacheMetadata on the right side of the operand. Returns Type Description Boolean True if the current left is unequal to the right parameter; otherwise, false. Implements IEquatable<>"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.ImageMetadata.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.ImageMetadata.html",
    "title": "Struct ImageMetadata",
    "keywords": "Struct ImageMetadata Represents the metadata associated with an image file. Implements IEquatable < ImageMetadata > Namespace : SixLabors.ImageSharp.Web Assembly : SixLabors.ImageSharp.Web.dll Syntax public struct ImageMetadata : IEquatable<ImageMetadata> Constructors | Improve this Doc View Source ImageMetadata(DateTime, Int64) Initializes a new instance of the ImageMetadata struct. Declaration public ImageMetadata(DateTime lastWriteTimeUtc, long contentLength) Parameters Type Name Description DateTime lastWriteTimeUtc The date and time in coordinated universal time (UTC) since the source file was last modified. Int64 contentLength The length of the image in bytes. | Improve this Doc View Source ImageMetadata(DateTime, TimeSpan, Int64) Initializes a new instance of the ImageMetadata struct. Declaration public ImageMetadata(DateTime lastWriteTimeUtc, TimeSpan cacheControlMaxAge, long contentLength) Parameters Type Name Description DateTime lastWriteTimeUtc The date and time in coordinated universal time (UTC) since the source file was last modified. TimeSpan cacheControlMaxAge The maximum amount of time a resource will be considered fresh. Int64 contentLength The length of the image in bytes. Properties | Improve this Doc View Source CacheControlMaxAge Gets the maximum amount of time a resource will be considered fresh. Declaration public TimeSpan CacheControlMaxAge { get; } Property Value Type Description TimeSpan | Improve this Doc View Source ContentLength Gets the length of the image in bytes. Declaration public long ContentLength { get; } Property Value Type Description Int64 | Improve this Doc View Source LastWriteTimeUtc Gets the date and time in coordinated universal time (UTC) since the source file was last modified. Declaration public DateTime LastWriteTimeUtc { get; } Property Value Type Description DateTime Methods | Improve this Doc View Source Equals(ImageMetadata) Declaration public bool Equals(ImageMetadata other) Parameters Type Name Description ImageMetadata other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(ImageMetadata, ImageMetadata) Compares two ImageMetadata objects for equality. Declaration public static bool operator ==(in ImageMetadata left, in ImageMetadata right) Parameters Type Name Description ImageMetadata left The ImageMetadata on the left side of the operand. ImageMetadata right The ImageMetadata on the right side of the operand. Returns Type Description Boolean True if the current left is equal to the right parameter; otherwise, false. | Improve this Doc View Source Inequality(ImageMetadata, ImageMetadata) Compares two ImageMetadata objects for inequality. Declaration public static bool operator !=(in ImageMetadata left, in ImageMetadata right) Parameters Type Name Description ImageMetadata left The ImageMetadata on the left side of the operand. ImageMetadata right The ImageMetadata on the right side of the operand. Returns Type Description Boolean True if the current left is unequal to the right parameter; otherwise, false. Implements IEquatable<>"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Middleware",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Middleware Classes ImageCommandContext Contains information about the current image request and parsed commands. ImageProcessingContext Contains information about the current image request and processed image. ImageSharpMiddleware Middleware for handling the processing of images via image requests. ImageSharpMiddlewareOptions Configuration options for the ImageSharpMiddleware middleware."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.ImageCommandContext.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.ImageCommandContext.html",
    "title": "Class ImageCommandContext",
    "keywords": "Class ImageCommandContext Contains information about the current image request and parsed commands. Inheritance Object ImageCommandContext Namespace : SixLabors.ImageSharp.Web.Middleware Assembly : SixLabors.ImageSharp.Web.dll Syntax public class ImageCommandContext : object Constructors | Improve this Doc View Source ImageCommandContext(HttpContext, IDictionary<String, String>, CommandParser, CultureInfo) Initializes a new instance of the ImageCommandContext class. Declaration public ImageCommandContext(HttpContext context, IDictionary<string, string> commands, CommandParser parser, CultureInfo culture) Parameters Type Name Description HttpContext context The current HTTP request context. IDictionary < String , String > commands The dictionary containing the collection of URI derived processing commands. CommandParser parser The command parser for parsing URI derived processing commands. CultureInfo culture The culture used to parse commands. Properties | Improve this Doc View Source Commands Gets the dictionary containing the collection of URI derived processing commands. Declaration public IDictionary<string, string> Commands { get; } Property Value Type Description IDictionary < String , String > | Improve this Doc View Source Context Gets the current HTTP request context. Declaration public HttpContext Context { get; } Property Value Type Description HttpContext | Improve this Doc View Source Culture Gets the culture used for parsing commands. Declaration public CultureInfo Culture { get; } Property Value Type Description CultureInfo | Improve this Doc View Source Parser Gets the command parser for parsing URI derived processing commands. Declaration public CommandParser Parser { get; } Property Value Type Description CommandParser"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.ImageProcessingContext.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.ImageProcessingContext.html",
    "title": "Class ImageProcessingContext",
    "keywords": "Class ImageProcessingContext Contains information about the current image request and processed image. Inheritance Object ImageProcessingContext Namespace : SixLabors.ImageSharp.Web.Middleware Assembly : SixLabors.ImageSharp.Web.dll Syntax public class ImageProcessingContext : object Constructors | Improve this Doc View Source ImageProcessingContext(HttpContext, Stream, IDictionary<String, String>, String, String) Initializes a new instance of the ImageProcessingContext class. Declaration public ImageProcessingContext(HttpContext context, Stream stream, IDictionary<string, string> commands, string contentType, string extension) Parameters Type Name Description HttpContext context The current HTTP request context. Stream stream The stream containing the processed image bytes. IDictionary < String , String > commands The parsed collection of processing commands. String contentType The content type for the processed image. String extension The file extension for the processed image. Properties | Improve this Doc View Source Commands Gets the parsed collection of processing commands. Declaration public IDictionary<string, string> Commands { get; } Property Value Type Description IDictionary < String , String > | Improve this Doc View Source ContentType Gets the content type for for the processed image. Declaration public string ContentType { get; } Property Value Type Description String | Improve this Doc View Source Context Gets the current HTTP request context. Declaration public HttpContext Context { get; } Property Value Type Description HttpContext | Improve this Doc View Source Extension Gets the file extension for the processed image. Declaration public string Extension { get; } Property Value Type Description String | Improve this Doc View Source Stream Gets the stream containing the processed image bytes. Declaration public Stream Stream { get; } Property Value Type Description Stream"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddleware.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddleware.html",
    "title": "Class ImageSharpMiddleware",
    "keywords": "Class ImageSharpMiddleware Middleware for handling the processing of images via image requests. Inheritance Object ImageSharpMiddleware Namespace : SixLabors.ImageSharp.Web.Middleware Assembly : SixLabors.ImageSharp.Web.dll Syntax public class ImageSharpMiddleware : object Constructors | Improve this Doc View Source ImageSharpMiddleware(RequestDelegate, IOptions<ImageSharpMiddlewareOptions>, ILoggerFactory, IRequestParser, IEnumerable<IImageProvider>, IEnumerable<IImageWebProcessor>, IImageCache, ICacheHash, CommandParser, FormatUtilities) Initializes a new instance of the ImageSharpMiddleware class. Declaration public ImageSharpMiddleware(RequestDelegate next, IOptions<ImageSharpMiddlewareOptions> options, ILoggerFactory loggerFactory, IRequestParser requestParser, IEnumerable<IImageProvider> resolvers, IEnumerable<IImageWebProcessor> processors, IImageCache cache, ICacheHash cacheHash, CommandParser commandParser, FormatUtilities formatUtilities) Parameters Type Name Description RequestDelegate next The next middleware in the pipeline. IOptions < ImageSharpMiddlewareOptions > options The middleware configuration options. ILoggerFactory loggerFactory An instance used to create loggers. IRequestParser requestParser An IRequestParser instance used to parse image requests for commands. IEnumerable < IImageProvider > resolvers A collection of IImageProvider instances used to resolve images. IEnumerable < IImageWebProcessor > processors A collection of IImageWebProcessor instances used to process images. IImageCache cache An IImageCache instance used for caching images. ICacheHash cacheHash An ICacheHash instance used for calculating cached file names. CommandParser commandParser The command parser FormatUtilities formatUtilities Contains various format helper methods based on the current configuration. Methods | Improve this Doc View Source Invoke(HttpContext) Performs operations upon the current request. Declaration public Task Invoke(HttpContext context) Parameters Type Name Description HttpContext context The current HTTP request context. Returns Type Description Task The ."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddlewareOptions.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Middleware.ImageSharpMiddlewareOptions.html",
    "title": "Class ImageSharpMiddlewareOptions",
    "keywords": "Class ImageSharpMiddlewareOptions Configuration options for the ImageSharpMiddleware middleware. Inheritance Object ImageSharpMiddlewareOptions Namespace : SixLabors.ImageSharp.Web.Middleware Assembly : SixLabors.ImageSharp.Web.dll Syntax public class ImageSharpMiddlewareOptions : object Properties | Improve this Doc View Source BrowserMaxAge Gets or sets the duration to store images in the browser cache. If an image provider provides a Max-Age for a source image then that will override this value. Defaults to 7 days. Declaration public TimeSpan BrowserMaxAge { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source CachedNameLength Gets or sets the length of the filename to use (minus the extension) when storing images in the image cache. Defaults to 12 characters. Declaration public uint CachedNameLength { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source CacheMaxAge Gets or sets the duration to store images in the image cache. Defaults to 365 days. Declaration public TimeSpan CacheMaxAge { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source Configuration Gets or sets the base library configuration. Declaration public Configuration Configuration { get; set; } Property Value Type Description Configuration | Improve this Doc View Source MemoryStreamManager Gets or sets the recyclable memorystream manager used for managing pooled stream buffers independently from image buffer pooling. Declaration public RecyclableMemoryStreamManager MemoryStreamManager { get; set; } Property Value Type Description RecyclableMemoryStreamManager | Improve this Doc View Source OnBeforeSaveAsync Gets or sets the additional method that can be used for final manipulation before the image is saved. This is called after image has been processed, but before the image has been saved to the output stream for caching. This can be used to alter the metadata of the resultant image. Declaration public Func<FormattedImage, Task> OnBeforeSaveAsync { get; set; } Property Value Type Description Func < FormattedImage , Task > | Improve this Doc View Source OnParseCommandsAsync Gets or sets the additional command parsing method that can be used to used to augment commands. This is called once the commands have been gathered and before an IImageProvider has been assigned. Declaration public Func<ImageCommandContext, Task> OnParseCommandsAsync { get; set; } Property Value Type Description Func < ImageCommandContext , Task > | Improve this Doc View Source OnPrepareResponseAsync Gets or sets the additional response method. This is called after the status code and headers have been set, but before the body has been written. This can be used to add or change the response headers. Declaration public Func<HttpContext, Task> OnPrepareResponseAsync { get; set; } Property Value Type Description Func < HttpContext , Task > | Improve this Doc View Source OnProcessedAsync Gets or sets the additional processing method. This is called after image has been processed, but before the result has been cached. This can be used to further optimize the resultant image. Declaration public Func<ImageProcessingContext, Task> OnProcessedAsync { get; set; } Property Value Type Description Func < ImageProcessingContext , Task > | Improve this Doc View Source UseInvariantParsingCulture Gets or sets a value indicating whether to use culture-independent (invariant) conversion when converting commands. If set to false the CommandParser will use the . Declaration public bool UseInvariantParsingCulture { get; set; } Property Value Type Description Boolean"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.BackgroundColorWebProcessor.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.BackgroundColorWebProcessor.html",
    "title": "Class BackgroundColorWebProcessor",
    "keywords": "Class BackgroundColorWebProcessor Allows setting of the background color. Inheritance Object BackgroundColorWebProcessor Implements IImageWebProcessor Namespace : SixLabors.ImageSharp.Web.Processors Assembly : SixLabors.ImageSharp.Web.dll Syntax public class BackgroundColorWebProcessor : object, IImageWebProcessor Fields | Improve this Doc View Source Color The command for changing the background color. Declaration public const string Color = null Field Value Type Description String Properties | Improve this Doc View Source Commands Gets the collection of recognized querystring commands. Declaration public IEnumerable<string> Commands { get; } Property Value Type Description IEnumerable < String > Methods | Improve this Doc View Source Process(FormattedImage, ILogger, IDictionary<String, String>, CommandParser, CultureInfo) Processes the image based on the querystring commands. Declaration public FormattedImage Process(FormattedImage image, ILogger logger, IDictionary<string, string> commands, CommandParser parser, CultureInfo culture) Parameters Type Name Description FormattedImage image The image to process. ILogger logger The type used for performing logging. IDictionary < String , String > commands The querystring collection containing the processing commands. CommandParser parser The command parser use for parting commands. CultureInfo culture The to use as the current parsing culture. Returns Type Description FormattedImage The FormattedImage . Implements IImageWebProcessor"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.FormatWebProcessor.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.FormatWebProcessor.html",
    "title": "Class FormatWebProcessor",
    "keywords": "Class FormatWebProcessor Allows the changing of image formats. Inheritance Object FormatWebProcessor Implements IImageWebProcessor Namespace : SixLabors.ImageSharp.Web.Processors Assembly : SixLabors.ImageSharp.Web.dll Syntax public class FormatWebProcessor : object, IImageWebProcessor Constructors | Improve this Doc View Source FormatWebProcessor(IOptions<ImageSharpMiddlewareOptions>) Initializes a new instance of the FormatWebProcessor class. Declaration public FormatWebProcessor(IOptions<ImageSharpMiddlewareOptions> options) Parameters Type Name Description IOptions < ImageSharpMiddlewareOptions > options The middleware configuration options. Fields | Improve this Doc View Source Format The command constant for format. Declaration public const string Format = null Field Value Type Description String Properties | Improve this Doc View Source Commands Gets the collection of recognized querystring commands. Declaration public IEnumerable<string> Commands { get; } Property Value Type Description IEnumerable < String > Methods | Improve this Doc View Source Process(FormattedImage, ILogger, IDictionary<String, String>, CommandParser, CultureInfo) Processes the image based on the querystring commands. Declaration public FormattedImage Process(FormattedImage image, ILogger logger, IDictionary<string, string> commands, CommandParser parser, CultureInfo culture) Parameters Type Name Description FormattedImage image The image to process. ILogger logger The type used for performing logging. IDictionary < String , String > commands The querystring collection containing the processing commands. CommandParser parser The command parser use for parting commands. CultureInfo culture The to use as the current parsing culture. Returns Type Description FormattedImage The FormattedImage . Implements IImageWebProcessor"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Processors",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Processors Classes BackgroundColorWebProcessor Allows setting of the background color. FormatWebProcessor Allows the changing of image formats. JpegQualityWebProcessor Allows the setting of quality for the jpeg image format. ResizeWebProcessor Allows the resizing of images. Interfaces IImageWebProcessor Specifies the contract for processing images using a querystring URI API."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.IImageWebProcessor.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.IImageWebProcessor.html",
    "title": "Interface IImageWebProcessor",
    "keywords": "Interface IImageWebProcessor Specifies the contract for processing images using a querystring URI API. Namespace : SixLabors.ImageSharp.Web.Processors Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface IImageWebProcessor Properties | Improve this Doc View Source Commands Gets the collection of recognized querystring commands. Declaration IEnumerable<string> Commands { get; } Property Value Type Description IEnumerable < String > Methods | Improve this Doc View Source Process(FormattedImage, ILogger, IDictionary<String, String>, CommandParser, CultureInfo) Processes the image based on the querystring commands. Declaration FormattedImage Process(FormattedImage image, ILogger logger, IDictionary<string, string> commands, CommandParser parser, CultureInfo culture) Parameters Type Name Description FormattedImage image The image to process. ILogger logger The type used for performing logging. IDictionary < String , String > commands The querystring collection containing the processing commands. CommandParser parser The command parser use for parting commands. CultureInfo culture The to use as the current parsing culture. Returns Type Description FormattedImage The FormattedImage ."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.JpegQualityWebProcessor.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.JpegQualityWebProcessor.html",
    "title": "Class JpegQualityWebProcessor",
    "keywords": "Class JpegQualityWebProcessor Allows the setting of quality for the jpeg image format. Inheritance Object JpegQualityWebProcessor Implements IImageWebProcessor Namespace : SixLabors.ImageSharp.Web.Processors Assembly : SixLabors.ImageSharp.Web.dll Syntax public class JpegQualityWebProcessor : object, IImageWebProcessor Fields | Improve this Doc View Source Quality The command constant for quality. Declaration public const string Quality = null Field Value Type Description String Properties | Improve this Doc View Source Commands Gets the collection of recognized querystring commands. Declaration public IEnumerable<string> Commands { get; } Property Value Type Description IEnumerable < String > Methods | Improve this Doc View Source Process(FormattedImage, ILogger, IDictionary<String, String>, CommandParser, CultureInfo) Processes the image based on the querystring commands. Declaration public FormattedImage Process(FormattedImage image, ILogger logger, IDictionary<string, string> commands, CommandParser parser, CultureInfo culture) Parameters Type Name Description FormattedImage image The image to process. ILogger logger The type used for performing logging. IDictionary < String , String > commands The querystring collection containing the processing commands. CommandParser parser The command parser use for parting commands. CultureInfo culture The to use as the current parsing culture. Returns Type Description FormattedImage The FormattedImage . Implements IImageWebProcessor"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.ResizeWebProcessor.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Processors.ResizeWebProcessor.html",
    "title": "Class ResizeWebProcessor",
    "keywords": "Class ResizeWebProcessor Allows the resizing of images. Inheritance Object ResizeWebProcessor Implements IImageWebProcessor Namespace : SixLabors.ImageSharp.Web.Processors Assembly : SixLabors.ImageSharp.Web.dll Syntax public class ResizeWebProcessor : object, IImageWebProcessor Fields | Improve this Doc View Source Anchor The command constant for the resize sampler. Declaration public const string Anchor = null Field Value Type Description String | Improve this Doc View Source Compand The command constant for the resize compand mode. Declaration public const string Compand = null Field Value Type Description String | Improve this Doc View Source Height The command constant for the resize height. Declaration public const string Height = null Field Value Type Description String | Improve this Doc View Source Mode The command constant for the resize mode. Declaration public const string Mode = null Field Value Type Description String | Improve this Doc View Source Sampler The command constant for the resize sampler. Declaration public const string Sampler = null Field Value Type Description String | Improve this Doc View Source Width The command constant for the resize width. Declaration public const string Width = null Field Value Type Description String | Improve this Doc View Source Xy The command constant for the resize focal point coordinates. Declaration public const string Xy = null Field Value Type Description String Properties | Improve this Doc View Source Commands Gets the collection of recognized querystring commands. Declaration public IEnumerable<string> Commands { get; } Property Value Type Description IEnumerable < String > Methods | Improve this Doc View Source Process(FormattedImage, ILogger, IDictionary<String, String>, CommandParser, CultureInfo) Processes the image based on the querystring commands. Declaration public FormattedImage Process(FormattedImage image, ILogger logger, IDictionary<string, string> commands, CommandParser parser, CultureInfo culture) Parameters Type Name Description FormattedImage image The image to process. ILogger logger The type used for performing logging. IDictionary < String , String > commands The querystring collection containing the processing commands. CommandParser parser The command parser use for parting commands. CultureInfo culture The to use as the current parsing culture. Returns Type Description FormattedImage The FormattedImage . Implements IImageWebProcessor"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Providers.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Providers.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Providers",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Providers Classes PhysicalFileSystemProvider Returns images stored in the local physical file system. Interfaces IImageProvider Specifies the contract for returning images from different locations. Enums ProcessingBehavior Enumerates the possible processing behaviors."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Providers.IImageProvider.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Providers.IImageProvider.html",
    "title": "Interface IImageProvider",
    "keywords": "Interface IImageProvider Specifies the contract for returning images from different locations. Namespace : SixLabors.ImageSharp.Web.Providers Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface IImageProvider Properties | Improve this Doc View Source Match Gets or sets the method used by the resolver to identify itself as the correct resolver to use. Declaration Func<HttpContext, bool> Match { get; set; } Property Value Type Description Func < HttpContext , Boolean > | Improve this Doc View Source ProcessingBehavior Gets the processing behavior. Declaration ProcessingBehavior ProcessingBehavior { get; } Property Value Type Description ProcessingBehavior Methods | Improve this Doc View Source GetAsync(HttpContext) Gets the image resolver associated with the context. Declaration Task<IImageResolver> GetAsync(HttpContext context) Parameters Type Name Description HttpContext context The current HTTP request context. Returns Type Description Task < IImageResolver > The IImageResolver . | Improve this Doc View Source IsValidRequest(HttpContext) Gets a value indicating whether the current request passes sanitizing rules. Declaration bool IsValidRequest(HttpContext context) Parameters Type Name Description HttpContext context The current HTTP request context. Returns Type Description Boolean The"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Providers.PhysicalFileSystemProvider.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Providers.PhysicalFileSystemProvider.html",
    "title": "Class PhysicalFileSystemProvider",
    "keywords": "Class PhysicalFileSystemProvider Returns images stored in the local physical file system. Inheritance Object PhysicalFileSystemProvider Implements IImageProvider Namespace : SixLabors.ImageSharp.Web.Providers Assembly : SixLabors.ImageSharp.Web.dll Syntax public class PhysicalFileSystemProvider : object, IImageProvider Constructors | Improve this Doc View Source PhysicalFileSystemProvider(IWebHostEnvironment, FormatUtilities) Initializes a new instance of the PhysicalFileSystemProvider class. Declaration public PhysicalFileSystemProvider(IWebHostEnvironment environment, FormatUtilities formatUtilities) Parameters Type Name Description IWebHostEnvironment environment The environment used by this middleware. FormatUtilities formatUtilities Contains various format helper methods based on the current configuration. Properties | Improve this Doc View Source Match Gets or sets the method used by the resolver to identify itself as the correct resolver to use. Declaration public Func<HttpContext, bool> Match { get; set; } Property Value Type Description Func < HttpContext , Boolean > | Improve this Doc View Source ProcessingBehavior Gets the processing behavior. Declaration public ProcessingBehavior ProcessingBehavior { get; } Property Value Type Description ProcessingBehavior Methods | Improve this Doc View Source GetAsync(HttpContext) Gets the image resolver associated with the context. Declaration public Task<IImageResolver> GetAsync(HttpContext context) Parameters Type Name Description HttpContext context The current HTTP request context. Returns Type Description Task < IImageResolver > The IImageResolver . | Improve this Doc View Source IsValidRequest(HttpContext) Gets a value indicating whether the current request passes sanitizing rules. Declaration public bool IsValidRequest(HttpContext context) Parameters Type Name Description HttpContext context The current HTTP request context. Returns Type Description Boolean The Implements IImageProvider"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Providers.ProcessingBehavior.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Providers.ProcessingBehavior.html",
    "title": "Enum ProcessingBehavior",
    "keywords": "Enum ProcessingBehavior Enumerates the possible processing behaviors. Namespace : SixLabors.ImageSharp.Web.Providers Assembly : SixLabors.ImageSharp.Web.dll Syntax public enum ProcessingBehavior : int Fields Name Description All The image will always be processed. CommandOnly The image will be processed only when commands are supplied."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.html",
    "title": "Namespace SixLabors.ImageSharp.Web.Resolvers",
    "keywords": "Namespace SixLabors.ImageSharp.Web.Resolvers Classes PhysicalFileSystemCacheResolver Provides means to manage image buffers within the PhysicalFileSystemCache . PhysicalFileSystemResolver Provides means to manage image buffers within the physical file system. Interfaces IImageCacheResolver Specifies the contract for resolving image buffers from different cached locations. IImageResolver Specifies the contract for resolving image buffers from different locations."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.IImageCacheResolver.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.IImageCacheResolver.html",
    "title": "Interface IImageCacheResolver",
    "keywords": "Interface IImageCacheResolver Specifies the contract for resolving image buffers from different cached locations. Namespace : SixLabors.ImageSharp.Web.Resolvers Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface IImageCacheResolver Methods | Improve this Doc View Source GetMetaDataAsync() Asynchronously gets metadata associated with this image. Declaration Task<ImageCacheMetadata> GetMetaDataAsync() Returns Type Description Task < ImageCacheMetadata > The ImageCacheMetadata . | Improve this Doc View Source OpenReadAsync() Asynchronously gets the input image stream. Declaration Task<Stream> OpenReadAsync() Returns Type Description Task < Stream > The ."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.IImageResolver.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.IImageResolver.html",
    "title": "Interface IImageResolver",
    "keywords": "Interface IImageResolver Specifies the contract for resolving image buffers from different locations. Namespace : SixLabors.ImageSharp.Web.Resolvers Assembly : SixLabors.ImageSharp.Web.dll Syntax public interface IImageResolver Methods | Improve this Doc View Source GetMetaDataAsync() Asynchronously gets metadata associated with this image. Declaration Task<ImageMetadata> GetMetaDataAsync() Returns Type Description Task < ImageMetadata > The ImageMetadata . | Improve this Doc View Source OpenReadAsync() Asynchronously gets the input image stream. Declaration Task<Stream> OpenReadAsync() Returns Type Description Task < Stream > The ."
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.PhysicalFileSystemCacheResolver.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.PhysicalFileSystemCacheResolver.html",
    "title": "Class PhysicalFileSystemCacheResolver",
    "keywords": "Class PhysicalFileSystemCacheResolver Provides means to manage image buffers within the PhysicalFileSystemCache . Inheritance Object PhysicalFileSystemCacheResolver Implements IImageCacheResolver Namespace : SixLabors.ImageSharp.Web.Resolvers Assembly : SixLabors.ImageSharp.Web.dll Syntax public class PhysicalFileSystemCacheResolver : object, IImageCacheResolver Constructors | Improve this Doc View Source PhysicalFileSystemCacheResolver(IFileInfo, FormatUtilities) Initializes a new instance of the PhysicalFileSystemCacheResolver class. Declaration public PhysicalFileSystemCacheResolver(IFileInfo metaFileInfo, FormatUtilities formatUtilities) Parameters Type Name Description IFileInfo metaFileInfo The cached metadata file info. FormatUtilities formatUtilities Contains various format helper methods based on the current configuration. Methods | Improve this Doc View Source GetMetaDataAsync() Asynchronously gets metadata associated with this image. Declaration public Task<ImageCacheMetadata> GetMetaDataAsync() Returns Type Description Task < ImageCacheMetadata > The ImageCacheMetadata . | Improve this Doc View Source OpenReadAsync() Asynchronously gets the input image stream. Declaration public Task<Stream> OpenReadAsync() Returns Type Description Task < Stream > The . Implements IImageCacheResolver"
  },
  "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.PhysicalFileSystemResolver.html": {
    "href": "api/ImageSharp.Web/SixLabors.ImageSharp.Web.Resolvers.PhysicalFileSystemResolver.html",
    "title": "Class PhysicalFileSystemResolver",
    "keywords": "Class PhysicalFileSystemResolver Provides means to manage image buffers within the physical file system. Inheritance Object PhysicalFileSystemResolver Implements IImageResolver Namespace : SixLabors.ImageSharp.Web.Resolvers Assembly : SixLabors.ImageSharp.Web.dll Syntax public class PhysicalFileSystemResolver : object, IImageResolver Constructors | Improve this Doc View Source PhysicalFileSystemResolver(IFileInfo, ImageMetadata) Initializes a new instance of the PhysicalFileSystemResolver class. Declaration public PhysicalFileSystemResolver(IFileInfo fileInfo, in ImageMetadata metadata) Parameters Type Name Description IFileInfo fileInfo The input file info. ImageMetadata metadata The image metadata associated with this file. Methods | Improve this Doc View Source GetMetaDataAsync() Asynchronously gets metadata associated with this image. Declaration public Task<ImageMetadata> GetMetaDataAsync() Returns Type Description Task < ImageMetadata > The ImageMetadata . | Improve this Doc View Source OpenReadAsync() Asynchronously gets the input image stream. Declaration public Task<Stream> OpenReadAsync() Returns Type Description Task < Stream > The . Implements IImageResolver"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation",
    "keywords": "API Documentation The API documentation is automatically generated from source-code-level comments. Often, more information can be found by looking into the source code itself."
  },
  "articles/fonts/customrendering.html": {
    "href": "articles/fonts/customrendering.html",
    "title": "Custom Rendering",
    "keywords": "Custom Rendering Warning Fonts is still considered BETA quality and we still reserve the rights to change the API shapes. We are yet to priorities performance in our font loading and layout APIs. Note ImageSharp.Drawing already implements the glyph rendering for you unless you are rendering on other platforms we would recommend using the version provided by that library.. This is a more advanced topic. Implementing a glyph renderer The abstraction used by Fonts to allow implementing glyph rendering is the IGlyphRenderer and its brother IColoredGlypheRenderer (for colored emoji support). // `IColoredGlyphRenderer` implements `IGlyphRenderer` so if you don't want colored font support just implement `IGlyphRenderer`. public class CustomGlyphRenderer : IColoredGlyphRenderer { /// <summary> /// Called before any glyphs have been rendered. /// </summary> /// <param name=\"bounds\">The bounds the text will be rendered at and at whats size.</param> void IGlyphRenderer.BeginText(FontRectangle bounds) { // called before any thing else to provide access to the total required size to redner the text } /// <summary> /// Begins the glyph. /// </summary> /// <param name=\"bounds\">The bounds the glyph will be rendered at and at what size.</param> /// <param name=\"paramaters\">The set of paramaters that uniquely represents a version of a glyph in at particular font size, font family, font style and DPI.</param> /// <returns>Returns true if the glyph should be rendered othersie it returns false.</returns> bool IGlyphRenderer.BeginGlyph(FontRectangle bounds, GlyphRendererParameters paramaters) { // called before each glyph/glyph layer is rendered. // The paramaters can be used to detect the exact details // of the glyph so that duplicate glyphs could optionally // be cached to reduce processing. // You can return false to skip all the figures within the glyph (if you return false EndGlyph will still be called) } /// <summary> /// Sets the color to use for the current glyph. /// </summary> /// <param name=\"color\">The color to override the renders brush with.</param> void IColorGlyphRenderer.SetColor(GlyphColor color) { // from the IColorGlyphRenderer version, onlt called if the current glyph should override the forgound color of current glyph/layer } /// <summary> /// Begins the figure. /// </summary> void IGlyphRenderer.BeginFigure() { // called at the start of the figure within the single glyph/layer // glyphs are rendered as a serise of arcs, lines and movements // which together describe a complex shape. } /// <summary> /// Sets a new start point to draw lines from /// </summary> /// <param name=\"point\">The point.</param> void IGlyphRenderer.MoveTo(Vector2 point) { // move current point to location marked by point without describing a line; } /// <summary> /// Draw a quadratic bezier curve connecting the previous point to <paramref name=\"point\"/>. /// </summary> /// <param name=\"secondControlPoint\">The second control point.</param> /// <param name=\"point\">The point.</param> void IGlyphRenderer.QuadraticBezierTo(Vector2 secondControlPoint, Vector2 point) { // describes Quadratic Bezier curve from the 'current point' using the // 'second control point' and final 'point' leaving the 'current point' // at 'point' } /// <summary> /// Draw a Cubics bezier curve connecting the previous point to <paramref name=\"point\"/>. /// </summary> /// <param name=\"secondControlPoint\">The second control point.</param> /// <param name=\"thirdControlPoint\">The third control point.</param> /// <param name=\"point\">The point.</param> void IGlyphRenderer.CubicBezierTo(Vector2 secondControlPoint, Vector2 thirdControlPoint, Vector2 point) { // describes Cubic Bezier curve from the 'current point' using the // 'second control point', 'third control point' and final 'point' // leaving the 'current point' at 'point' } /// <summary> /// Draw a straight line connecting the previous point to <paramref name=\"point\"/>. /// </summary> /// <param name=\"point\">The point.</param> void IGlyphRenderer.LineTo(Vector2 point) { // describes straight line from the 'current point' to the final 'point' // leaving the 'current point' at 'point' } /// <summary> /// Ends the figure. /// </summary> void IGlyphRenderer.EndFigure() { // Called after the figure has completed denoting a straight line should // be drawn from the current point to the first point } /// <summary> /// Ends the glyph. /// </summary> void IGlyphRenderer.EndGlyph() { // says the all figures have completed for the current glyph/layer. // NOTE this will be called even if BeginGlyph return false. } /// <summary> /// Called once all glyphs have completed rendering /// </summary> void IGlyphRenderer.EndText() { //once all glyphs/layers have been drawn this is called. } }"
  },
  "articles/fonts/gettingstarted.html": {
    "href": "articles/fonts/gettingstarted.html",
    "title": "Getting Started",
    "keywords": "Getting Started Warning Fonts is still considered BETA quality and we still reserve the rights to change the API shapes. We are yet to priorities performance in our font loading and layout APIs. Note The official guide assumes intermediate level knowledge of C# and .NET. If you are totally new to .NET development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back. Prior experience with other languages and frameworks helps, but is not required. Fonts Fonts provides the core to your text layout and loading subsystems. SixLabors.Fonts.FontCollection is the root type you will configure and load up with all the TrueType/OpenType/Woff fonts. (font loading is deemed expensive and should be done once and shared across multiple rasterizations) SixLabors.Fonts.Font is our currying type for passing information about your chosen font face. Loading Fonts Fonts provides several options for loading fonts, you can load then from a streams or files, we also support loading collections out of *.TTC files and well as single variants out if individual *.TTF files. We also support loading *.woff files. Minimal Example using SixLabors.Fonts; FontCollection collection = new FontCollection(); FontFamily family = collection.Install(\"path/to/font.ttf\"); Font font = family.Create(12, FontStyle.Italic); // \"font\" can now be used in calls to DrawText from our ImageSharp.Drawing library. Expanded Example using SixLabors.Fonts; FontCollection collection = new FontCollection(); collection.Install(\"path/to/font.ttf\"); collection.Install(\"path/to/font2.ttf\"); collection.Install(\"path/to/emojiFont.ttf\"); collection.InstallCollection(\"path/to/font.ttc\"); if(collection.TryFind(\"Font Name\", out FontFamily family)) if(collection.TryFind(\"Emoji Font Name\", out FontFamily emojiFamily)) { // family will not be null here Font font = family.Create(12, FontStyle.Italic); RendererOptions options = new RendererOptions(font, dpi: 72) { ApplyKerning = true, FallbackFontFamilies = new [] { emojiFamily // will be used if a particular code point doesn't exist in the font passed into the constructor. (e.g. emoji) } }; FontRectangle rect = TextMeasurer.Measure(\"Text to measure\", options); }"
  },
  "articles/fonts/index.html": {
    "href": "articles/fonts/index.html",
    "title": "Introduction",
    "keywords": "Introduction Warning Fonts is still considered BETA quality and we still reserve the rights to change the API shapes. We are yet to priorities performance in our drawing APIs. What is Fonts? Fonts is a font loading and layout library built primarily to provide text drawing support to ImageSharp.Drawing. Built against .NET Standard 1.3 , Fonts can be used in device, cloud, and embedded/IoT scenarios. License Fonts is licensed under under the terms of Apache License, Version 2.0 . Commercial support licensing options are available in addition to this license, see https://sixlabors.com/pricing for details. Installation Fonts is installed via NuGet with nightly builds available on MyGet . Package Manager .NET CLI PackageReference Paket CLI PM > Install-Package SixLabors.Fonts -Version VERSION_NUMBER dotnet add package SixLabors.Fonts --version VERSION_NUMBER <PackageReference Include=\"SixLabors.Fonts\" Version=\"VERSION_NUMBER\" /> paket add SixLabors.Fonts --version VERSION_NUMBER Warning Prerelease versions installed via the Visual Studio NuGet Package Manager require the \"include prerelease\" checkbox to be checked."
  },
  "articles/imagesharp.drawing/gettingstarted.html": {
    "href": "articles/imagesharp.drawing/gettingstarted.html",
    "title": "Getting Started",
    "keywords": "Getting Started Warning ImageSharp.Drawing is still considered BETA quality and we still reserve the rights to change the API shapes. WE are yet to priorities performance in our drawing APIs. Note The official guide assumes intermediate level knowledge of C# and .NET. If you are totally new to .NET development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back. Prior experience with other languages and frameworks helps, but is not required. ImageSharp.Drawing - Paths and Polygons ImageSharp.Drawing provides several classes for build and manipulating various shapes and paths. IPath Root interface defining a path/polygon and the type that the rasterizer uses to generate pixel output. This SixLabors.ImageSharp.Drawing namespace contains a variety of available polygons to speed up your drawing process. In addition to the vector manipulation APIs the library also contains rasterization APIs that can convert your IPath s to pixels. Drawing Polygons ImageSharp provides several options for drawing polygons whether you want to draw outlines or fill shapes. Minimal Example using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; using SixLabors.ImageSharp.Drawing.Processing; Image image = ...; // create any way you like. IPath yourPolygon = new Star(x: 100.0f, y: 100.0f, prongs: 5, innerRadii: 20.0f, outerRadii:30.0f) image.Mutate( x=> x.Fill(Color.Red, yourPolygon)); // fill the star with red Expanded Example using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; using SixLabors.ImageSharp.Drawing.Processing; using SixLabors.ImageSharp.PixelFormats; Image image = ...; // create any way you like. // The options are optional ShapeGraphicsOptions options = new ShapeGraphicsOptions() { ColorBlendingMode = PixelColorBlendingMode.Multiply }; IBrush brush = Brushes.Horizontal(Color.Red, Color.Blue); IPen pen = Pens.DashDot(Color.Green, 5); IPath yourPolygon = new Star(x: 100.0f, y: 100.0f, prongs: 5, innerRadii: 20.0f, outerRadii:30.0f) // draws a star with Horizontal red and blue hatching with a dash dot pattern outline. image.Mutate( x=> x.Fill(options, brush, yourPolygon) .Draw(option, pen, yourPolygon)); API Cornerstones for Polygon Rasterization Our Fill APIs always work off a Brush (some helpers create the brush for you) and will take your provided set of paths and polygons filling in all the pixels inside the vector with the color the brush provides. Our Draw APIs always work off the Pen where we processes your vector to create an outline with a certain pattern and fill in the outline with an internal brush inside the pen. Drawing Text ImageSharp.Drawing provides several options for drawing text all overloads of a single DrawText API. Our text drawing infrastructure is build on top of our Fonts library. (See SixLabors.Fonts for details on handling fonts.) Minimal Example using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; using SixLabors.ImageSharp.Drawing.Processing; Image image = ...; // create any way you like. Font font = ...; // see our Fonts library for best practices on retriving one of these. string yourText = \"this is some sample text\"; image.Mutate( x=> x.DrawText(yourText, font, Color.Black, new PointF(10, 10))); Expanded Example using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; using SixLabors.ImageSharp.Drawing.Processing; using SixLabors.ImageSharp.PixelFormats; Image image = ...; // create any way you like. Font font = ...; // see our Fonts library for best practices on retriving one of these. // The options are optional TextGraphicsOptions options = new TextGraphicsOptions() { ApplyKerning = true, TabWidth = 8, // a tab renders as 8 spaces wide WrapTextWidth = 100, // greater than zero so we will word wrap at 100 pixels wide HorizontalAlignment = HorizontalAlignment.Right // right align }; IBrush brush = Brushes.Horizontal(Color.Red, Color.Blue); IPen pen = Pens.DashDot(Color.Green, 5); string text = \"sample text\"; // draws a star with Horizontal red and blue hatching with a dash dot pattern outline. image.Mutate( x=> x.DrawText(options, text, font, brush, pen, new PointF(100, 100));"
  },
  "articles/imagesharp.drawing/index.html": {
    "href": "articles/imagesharp.drawing/index.html",
    "title": "Introduction",
    "keywords": "Introduction Warning ImageSharp.Drawing is still considered BETA quality and we reserve the right to change the API shape. We are yet to prioritize performance in our drawing APIs. What is ImageSharp.Drawing? ImageSharp.Drawing is a library built on top of ImageSharp to providing 2D Drawing extensions. ImageSharp.Drawing is designed from the ground up to be flexible and extensible. The library provides API endpoints for common vector and text processing operations adding the building blocks for building custom images. Built against .NET Standard 1.3 , ImageSharp.Drawing can be used in device, cloud, and embedded/IoT scenarios. License ImageSharp.Drawing is licensed under under the terms of Apache License, Version 2.0 . Commercial support licensing options are available in addition to this license, see https://sixlabors.com/pricing for details. Installation ImageSharp.Drawing is installed via NuGet with nightly builds available on MyGet . Package Manager .NET CLI PackageReference Paket CLI PM > Install-Package SixLabors.ImageSharp.Drawing -Version VERSION_NUMBER dotnet add package SixLabors.ImageSharp.Drawing --version VERSION_NUMBER <PackageReference Include=\"SixLabors.ImageSharp.Drawing\" Version=\"VERSION_NUMBER\" /> paket add SixLabors.ImageSharp.Drawing --version VERSION_NUMBER Warning Prerelease versions installed via the Visual Studio NuGet Package Manager require the \"include prerelease\" checkbox to be checked."
  },
  "articles/imagesharp.web/gettingstarted.html": {
    "href": "articles/imagesharp.web/gettingstarted.html",
    "title": "Getting Started",
    "keywords": "Getting Started Note The official guide assumes intermediate level knowledge of C# and .NET. If you are totally new to .NET development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back. Prior experience with other languages and frameworks helps, but is not required. Setup and Configuration Once installed you will need to add the following code to ConfigureServices and Configure in your Startup.cs file. This installs the the default service and options. public void ConfigureServices(IServiceCollection services) { // Add the default service and options. services.AddImageSharp(); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // Add the image processing middleware. app.UseImageSharp(); } The fluent configuration is flexible allowing you to configure a multitude of different options. For example you can add the default service and custom options. // Add the default service and custom options. services.AddImageSharp( options => { // You only need to set the options you want to change here // All properties have been listed for demonstration purposes // only. options.Configuration = Configuration.Default; options.MemoryStreamManager = new RecyclableMemoryStreamManager(); options.BrowserMaxAge = TimeSpan.FromDays(7); options.CacheMaxAge = TimeSpan.FromDays(365); options.CachedNameLength = 8; options.OnParseCommandsAsync = _ => Task.CompletedTask; options.OnBeforeSaveAsync = _ => Task.CompletedTask; options.OnProcessedAsync = _ => Task.CompletedTask; options.OnPrepareResponseAsync = _ => Task.CompletedTask; }); Or you can fine-grain control adding the default options and configure other services. // Fine-grain control adding the default options and configure other services. services.AddImageSharp() .RemoveProcessor<FormatWebProcessor>() .RemoveProcessor<BackgroundColorWebProcessor>(); There are also factory methods for each builder that will allow building from configuration files. // Use the factory methods to configure the PhysicalFileSystemCacheOptions services.AddImageSharp() .Configure<PhysicalFileSystemCacheOptions>(options => { options.CacheFolder = \"different-cache\"; }); Full Configuration API options are available here ."
  },
  "articles/imagesharp.web/imagecaches.html": {
    "href": "articles/imagesharp.web/imagecaches.html",
    "title": "Image Caches",
    "keywords": "Image Caches ImageSharp.Web caches the result of any valid processing operation to allow the fast retrieval of future identical requests. The cache is smart, storing additional metadata to allow the detection of updated source images and can be configured to a fine degree to determine the duration a processed image should be cached for. Note It is possible to configure your own image cache by implementing and registering your own version of the IImageCache interface. The following caches are available for the middleware. PhysicalFileSystemCache The PhysicalFileSystemCache stores processed image files in the web root folder. This is the default cache installed when configuring the middleware. Images are cached in separate folders based upon a hash of the request URL. this allows the caching of millions of image files without slowing down the file system. AzureBlobStorageImageCache This cache allows the caching of image files using Azure Blob Storage and is available as an external package installable via NuGet Package Manager .NET CLI PackageReference Paket CLI PM > Install-Package SixLabors.ImageSharp.Web.Providers.Azure -Version VERSION_NUMBER dotnet add package SixLabors.ImageSharp.Web.Providers.Azure --version VERSION_NUMBER <PackageReference Include=\"SixLabors.ImageSharp.Web.Providers.Azure\" Version=\"VERSION_NUMBER\" /> paket add SixLabors.ImageSharp.Web.Providers.Azure --version VERSION_NUMBER Once installed the cache AzureBlobStorageCacheOptions can be configured as follows: // Configure and register the container. // Alteratively use `appsettings.json` to represent the class and bind those settings. .Configure<AzureBlobStorageCacheOptions>(options => { options.ConnectionString = {AZURE_CONNECTION_STRING}; options.ContainerName = {AZURE_CONTAINER_NAME}; // Optionally create the cache container on startup if not already created. AzureBlobStorageCache.CreateIfNotExists(options, PublicAccessType.None); }) .SetCache<AzureBlobStorageImageCache>() Images are cached using a hash of the request URL as the blob name. All appropriate metadata is stored in the blob properties to correctly serve the blob with the correct response headers."
  },
  "articles/imagesharp.web/imageproviders.html": {
    "href": "articles/imagesharp.web/imageproviders.html",
    "title": "Image Providers",
    "keywords": "Image Providers ImageSharp.Web determines the location of a source image to process via the registration and application of image providers. Note It is possible to configure your own image provider by implementing and registering your own version of the IImageProvider interface. The following providers are available for the middleware. Multiples providers can be registered and will be queried for a URL match in the order of registration. PhysicalFileSystemProvider The PhysicalFileSystemProvider will allow the processing and serving of image files from the web root folder. This is the default provider installed when configuring the middleware. Url matching for this provider follows the same rules as conventional static files. AzureBlobStorageImageProvider This provider allows the processing and serving of image files from Azure Blob Storage and is available as an external package installable via NuGet Package Manager .NET CLI PackageReference Paket CLI PM > Install-Package SixLabors.ImageSharp.Web.Providers.Azure -Version VERSION_NUMBER dotnet add package SixLabors.ImageSharp.Web.Providers.Azure --version VERSION_NUMBER <PackageReference Include=\"SixLabors.ImageSharp.Web.Providers.Azure\" Version=\"VERSION_NUMBER\" /> paket add SixLabors.ImageSharp.Web.Providers.Azure --version VERSION_NUMBER Once installed the provider AzureBlobContainerClientOptions can be configured as follows: // Configure and register the container. // Alteratively use `appsettings.json` to represent the class and bind those settings. .Configure<AzureBlobStorageImageProviderOptions>(options => { // The \"BlobContainers\" collection allows registration of multiple containers. options.BlobContainers.Add(new AzureBlobContainerClientOptions { ConnectionString = {AZURE_CONNECTION_STRING}, ContainerName = {AZURE_CONTAINER_NAME} }); }) .AddProvider<AzureBlobStorageImageProvider>() Url requests are matched in accordance to the following rule: /{CONTAINER_NAME}/{BLOB_FILENAME}"
  },
  "articles/imagesharp.web/index.html": {
    "href": "articles/imagesharp.web/index.html",
    "title": "Introduction",
    "keywords": "Introduction What is ImageSharp.Web? ImageSharp.Web is a high performance ASP.NET Core Middleware built on top of ImageSharp that allows the processing and caching of image requests via a simple API. ImageSharp.Web is designed from the ground up to be flexible and extensible. The library provides API endpoints for common image processing operations and the building blocks to allow for the development of additional extensions to add image sources, caching mechanisms or even your own processing API. License Imagesharp.Web is licensed under under the terms of Apache License, Version 2.0 . Commercial support licensing options are available in addition to this license, see https://sixlabors.com/pricing for details. Installation ImageSharp.Web is installed via NuGet with nightly builds available on MyGet . Package Manager .NET CLI PackageReference Paket CLI PM > Install-Package SixLabors.ImageSharp.Web -Version VERSION_NUMBER dotnet add package SixLabors.ImageSharp.Web --version VERSION_NUMBER <PackageReference Include=\"SixLabors.ImageSharp.Web\" Version=\"VERSION_NUMBER\" /> paket add SixLabors.ImageSharp.Web --version VERSION_NUMBER Warning Prerelease versions installed via the Visual Studio NuGet Package Manager require the \"include prerelease\" checkbox to be checked."
  },
  "articles/imagesharp.web/processingcommands.html": {
    "href": "articles/imagesharp.web/processingcommands.html",
    "title": "Processing Commands",
    "keywords": "Processing Commands The ImageSharp.Web processing API is imperative. This means that the order in which you supply the individual processing operations is the order in which they are are compiled and applied. This allows the API to be very flexible, allowing you to combine processes in any order. Note It is possible to configure your own processing command pipeline by implementing and registering your own version of the IRequestParser interface. The following processors are built into the middleware. In addition extension points are available to register you own command processors. Resize Allows the resizing of images. {PATH_TO_YOUR_IMAGE}?width=300 {PATH_TO_YOUR_IMAGE}?width=300&height=120&rxy=30,30 {PATH_TO_YOUR_IMAGE}?width=50&height=50&rsampler=nearest&rmode=stretch Resize commands represent the @\"SixLabors.ImageSharp.Processing.ResizeOptions\" class. width The width of the image in px. Use only one dimension to preseve the aspect ratio. height The height of the image in px. Use only one dimension to preseve the aspect ratio. rmode The @\"SixLabors.ImageSharp.Processing.ResizeMode\" to use. rsampler The @\"SixLabors.ImageSharp.Processing.Processors.Transforms.IResampler\" sampler to use. bicubic @\"SixLabors.ImageSharp.Processing.KnownResamplers.Bicubic\" nearest @\"SixLabors.ImageSharp.Processing.KnownResamplers.NearestNeighbor\" box @\"SixLabors.ImageSharp.Processing.KnownResamplers.Box\" mitchell @\"SixLabors.ImageSharp.Processing.KnownResamplers.MitchellNetravali\" catmull @\"SixLabors.ImageSharp.Processing.KnownResamplers.CatmullRom\" lanczos2 @\"SixLabors.ImageSharp.Processing.KnownResamplers.Lanczos2\" lanczos3 @\"SixLabors.ImageSharp.Processing.KnownResamplers.Lanczos3\" lanczos5 @\"SixLabors.ImageSharp.Processing.KnownResamplers.Lanczos5\" lanczos8 @\"SixLabors.ImageSharp.Processing.KnownResamplers.Lanczos8\" welch @\"SixLabors.ImageSharp.Processing.KnownResamplers.Welch\" robidoux @\"SixLabors.ImageSharp.Processing.KnownResamplers.Robidoux\" robidouxsharp @\"SixLabors.ImageSharp.Processing.KnownResamplers.RobidouxSharp\" spline @\"SixLabors.ImageSharp.Processing.KnownResamplers.Spline\" triangle @\"SixLabors.ImageSharp.Processing.KnownResamplers.Triangle\" hermite @\"SixLabors.ImageSharp.Processing.KnownResamplers.Hermite\" rxy The center position to anchor the image center point to. ranchor The @\"SixLabors.ImageSharp.Processing.AnchorPositionMode\" to use. compand Whether to compress and expand individual pixel colors values to/from a linear color space when processing. Format Allows the encoding of the output image to a new image format. The available formats depend on your configuration settings. {PATH_TO_YOUR_IMAGE}?format=jpg {PATH_TO_YOUR_IMAGE}?format=gif {PATH_TO_YOUR_IMAGE}?format=png {PATH_TO_YOUR_IMAGE}?format=bmp {PATH_TO_YOUR_IMAGE}?format=tga Quality Allows the encoding of the output image at the given quality. For Jpeg this ranges from 1—100. {PATH_TO_YOUR_IMAGE}?quality=90 {PATH_TO_YOUR_IMAGE}?format=jpg&quality=42 Note Only certain formats support adjustable quality. This is a constraint of individual image standards not the API. Background Color Allows the changing of the background color of transparent images. {PATH_TO_YOUR_IMAGE}?bgcolor=FFFF00 {PATH_TO_YOUR_IMAGE}?bgcolor=C1FF0080 {PATH_TO_YOUR_IMAGE}?bgcolor=red {PATH_TO_YOUR_IMAGE}?bgcolor=128,64,32 {PATH_TO_YOUR_IMAGE}?bgcolor=128,64,32,16"
  },
  "articles/imagesharp/configuration.html": {
    "href": "articles/imagesharp/configuration.html",
    "title": "Configuration",
    "keywords": "Configuration ImageSharp contains a @\"SixLabors.ImageSharp.Configuration\" class designed to allow the configuration of application wide settings. This class provides a range of configuration opportunities that cover format support, memory and parallelization settings and more. @\"SixLabors.ImageSharp.Configuration.Default\" is a shared singleton that is used to configure the default behavior of the ImageSharp library but it is possible to provide your own instances depended upon your required setup. Injection Points. The @\"SixLabors.ImageSharp.Configuration\" class can be injected in several places within the API to allow overriding global values. This provides you with the means to apply fine grain control over your processing activity to cater for your environment. The @\"SixLabors.ImageSharp.Image\" and @\"SixLabors.ImageSharp.Image`1\" constructors. The @\"SixLabors.ImageSharp.Image.Load*\" methods and variants. The @\"SixLabors.ImageSharp.Processing.ProcessingExtensions.Mutate*\" and @\"SixLabors.ImageSharp.Processing.ProcessingExtensions.Clone*\" methods. Configuring ImageFormats As mentioned in Image Formats it is possible to configure your own format collection for the API to consume. For example, if you wanted to restrict the library to support a specific collection of formats you would configure the library as follows: var configuration = new Configuration( new PngConfigurationModule(), new JpegConfigurationModule(), new GifConfigurationModule(), new BmpConfigurationModule(), new TgaConfigurationModule() new CustomFormatConfigurationModule());"
  },
  "articles/imagesharp/gettingstarted.html": {
    "href": "articles/imagesharp/gettingstarted.html",
    "title": "Getting Started",
    "keywords": "Getting Started Note The official guide assumes intermediate level knowledge of C# and .NET. If you are totally new to .NET development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back. Prior experience with other languages and frameworks helps, but is not required. ImageSharp Images ImageSharp provides several classes for storing pixel data: @\"SixLabors.ImageSharp.Image\" A pixel format agnostic image container used for general processing operations. @\"SixLabors.ImageSharp.Image`1\" A generic image container that allows per-pixel access. In addition there are classes available that represent individual image frames: @\"SixLabors.ImageSharp.ImageFrame\" A pixel format agnostic image frame container. @\"SixLabors.ImageSharp.ImageFrame`1\" A generic image frame container that allows per-pixel access. @\"SixLabors.ImageSharp.IndexedImageFrame`1\" A generic image frame used for indexed image pixel data where each pixel buffer value represents an index in a color palette. For more information on pixel formats please see the following documentation . Loading and Saving Images ImageSharp provides several options for loading and saving images to cover different scenarios. The library automatically detects the source image format upon load and it is possible to dictate which image format to save an image pixel data to. using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; // Open the file automatically detecting the file type to decode it. // Our image is now in an uncompressed, file format agnostic, structure in-memory as // a series of pixels. using (Image image = Image.Load(\"foo.jpg\")) { // Resize the image in place and return it for chaining. // 'x' signifies the current image processing context. image.Mutate(x => x.Resize(image.Width / 2, image.Height / 2)); // The library automatically picks an encoder based on the file extension then // encodes and write the data to disk. // You can optionally set the encoder to choose. image.Save(\"bar.jpg\"); } // Dispose - releasing memory into a memory pool ready for the next image you wish to process. In this very basic example you are actually utilizing several core ImageSharp features: Image Formats by loading and saving an image. Image Processors by calling Mutate() and Resize() Initializing New Images using SixLabors.ImageSharp; using SixLabors.ImageSharp.PixelFormats; using SixLabors.ImageSharp.Processing; int width = 640; int height = 480; // Creates a new image with empty pixel data. using(var image = new Image<Rgba32>(width, height)) { // Do your drawing in here... } // Dispose - releasing memory into a memory pool ready for the next image you wish to process. In this example you are utilizing the following core ImageSharp feature: Pixel Formats by using Rgba32 API Cornerstones The easiest way to work with ImageSharp is to utilize our extension methods: @\"SixLabors.ImageSharp\" for basic operations and primitives. @\"SixLabors.ImageSharp.Processing\" for Mutate() and Clone() . All the processing extensions (eg. Resize(...) ) live within this namespace. Performance Achieving near-to-native performance is a major goal for the SixLabors team, and thanks to the improvements brought by the RyuJIT runtime, it's no longer mission impossible. We have made great progress and are constantly working on improvements. At the moment it's pretty hard to define fair benchmarks comparing GDI+ (aka. System.Drawing on Windows) and ImageSharp, because of the differences between the algorithms being used. Generally speaking, we are more feature rich, producing better quality. We hope we can match the corresponding algorithm parameters, and present some very specific benchmark results soon. If you are experiencing a significant performance gap between System.Drawing and ImageSharp for basic use-cases, there is a high chance that essential SIMD optimizations are not utilized. A few troubleshooting steps to try: Check the value of Vector.IsHardwareAccelerated . If the output is false, it means there is no SIMD support in your runtime! Make sure your code runs on 64bit! Older .NET Framework versions are using the legacy runtime on 32 bits, having no built-in SIMD support."
  },
  "articles/imagesharp/imageformats.html": {
    "href": "articles/imagesharp/imageformats.html",
    "title": "Image Formats",
    "keywords": "Image Formats Out of the box ImageSharp supports the following image formats: Jpeg Png Bmp Gif Tga ImageSharp's API however, is designed to support extension by the registration of additional IImageFormat implementations. Loading and Saving Specific Image Formats Image<TPixel> represents raw pixel data, stored in a contiguous memory block. It does not \"remember\" the original image format. ImageSharp identifies image formats (Jpeg, Png, Gif etc.) by IImageFormat instances. There are several overloads of Image.Load capable of returning the format as an out parameter. It's possible to pass that value to image.Save after performing the operation: IImageFormat format; using (var image = Image.Load(inputStream, out format)) { image.Mutate(c => c.Resize(30, 30)); image.Save(outputStream, format); } Note ImageSharp provides common extension methods to save an image into a stream using a specific format. image.SaveAsJpeg() (shortcut for image.Save(new JpegEncoder()) ) image.SaveAsPng() (shortcut for image.Save(new PngEncoder()) ) image.SaveAsGif() (shortcut for image.Save(new GifEncoder()) ) image.SaveAsBmp() (shortcut for image.Save(new BmpEncoder()) ) image.SaveAsTga() (shortcut for image.Save(new TgaEncoder()) ) A Deeper Overview of ImageSharp Format Management Real life image streams are usually stored / transferred in standardized formats like Jpeg, Png, Bmp, Gif etc. An image format is represented by an IImageFormat implementation. IImageDecoder is responsible for decoding streams (and files) in into Image<TPixel> . ImageSharp can auto-detect the image formats of streams/files based on their headers, selecting the correct IImageFormat (and thus IImageDecoder ). This logic is implemented by IImageFormatDetector 's. IImageEncoder is responsible for writing Image<TPixel> into a stream using a given format. Decoders/encoders and IImageFormatDetector 's are mapped to image formats in ImageFormatsManager . It's possible to register new formats, or drop existing ones. See Configuration for more details. Metadata-only Decoding Sometimes it's worth to efficiently decode image metadata ignoring the memory and CPU heavy pixel information inside the stream. ImageSharp allows this by using one of the several Image.Identify overloads: using (IImageInfo imageInfo = Image.Identify(inputStream)) { Console.WriteLine($\"{imageInfo.Width}x{imageInfo.Height} | BPP: {imageInfo.PixelType.BitsPerPixel}\"); } See IImageInfo for more details about the identification result. Note that Image<TPixel> also implements IImageInfo . Working with Encoders Image formats are usually defined by complex standards allowing multiple representations for the same image. ImageSharp allows parameterizing the encoding process: IImageEncoder implementations are stateless, lightweight parametric objects. This means that if you want to encode a Png in a specific way (eg. changing the compression level), you need to new-up a custom PngEncoder instance. Choosing the right encoder parameters allows to balance between conflicting tradeoffs: Image file size Encoder speed Image quality Each encoder offers options specific to the image format it represents."
  },
  "articles/imagesharp/index.html": {
    "href": "articles/imagesharp/index.html",
    "title": "Introduction",
    "keywords": "Introduction What is ImageSharp? ImageSharp is a new, fully featured, fully managed, cross-platform, 2D graphics library. Designed to simplify image processing, ImageSharp brings you an incredibly powerful yet beautifully simple API. ImageSharp is designed from the ground up to be flexible and extensible. The library provides API endpoints for common image processing operations and the building blocks to allow for the development of addtional operations. Built against .NET Standard 1.3 , ImageSharp can be used in device, cloud, and embedded/IoT scenarios. License Imagesharp is licensed under under the terms of Apache License, Version 2.0 . Commercial support licensing options are available in addition to this license, see https://sixlabors.com/pricing for details. Installation ImageSharp is installed via NuGet with nightly builds available on MyGet . Package Manager .NET CLI PackageReference Paket CLI PM > Install-Package SixLabors.ImageSharp -Version VERSION_NUMBER dotnet add package SixLabors.ImageSharp --version VERSION_NUMBER <PackageReference Include=\"SixLabors.ImageSharp\" Version=\"VERSION_NUMBER\" /> paket add SixLabors.ImageSharp --version VERSION_NUMBER Warning Prerelease versions installed via the Visual Studio NuGet Package Manager require the \"include prerelease\" checkbox to be checked."
  },
  "articles/imagesharp/memorymanagement.html": {
    "href": "articles/imagesharp/memorymanagement.html",
    "title": "Memory Management",
    "keywords": "Memory Management ImageSharp seems to retain ~300—400 MB of managed memory even after disposing all my images. Is this a memory leak? By default, ImageSharp uses ArrayPool's for performance reasons, however this behavior is fully configurable. All large buffers are managed by the @\"SixLabors.ImageSharp.Memory.MemoryAllocator\" implementation associated to @\"SixLabors.ImageSharp.Configuration\"'s @\"SixLabors.ImageSharp.Configuration.MemoryAllocator\" property. We are using @\"SixLabors.ImageSharp.Memory.ArrayPoolMemoryAllocator\" by default, in order to utilize the benefits of array pooling: Less pressure on GC, because buffers are being reused most of the time Reduced LOH fragmentation When working with unclean buffers is acceptable, we can spare on GC-s array cleaning behavior too Summary : pooling helps us to reduce CPU work and increase throughput for the cost of a larger memory footprint. Working in Memory Constrained Environments Sometimes having ~300 MB memory footprint is not an option. Let's mention a few cases: When horizontal scaling is achieved by having multiple memory constrained containers in a cloud environment. Mobile applications. Before scaling down pooling behavior because of unwanted OutOfMemoryException -s in a cloud or desktop environment: Keep in mind that image processing is a memory intensive application! This may affect your scaling strategy. We don't recommend using containers with 1 GB or smaller memory limit! Make sure that you are running your service in a 64 bit process ! There are several pre-defined factory methods to create an @\"SixLabors.ImageSharp.Memory.ArrayPoolMemoryAllocator\" instance for memory constrained environments. For example @\"SixLabors.ImageSharp.Memory.ArrayPoolMemoryAllocator.CreateWithModeratePooling\" might be suitable in most constrained situations: Configuration.Default.MemoryAllocator = ArrayPoolMemoryAllocator.CreateWithModeratePooling(); Of course, you may also configure a MemoryAllocator on your own @\"SixLabors.ImageSharp.Configuration\" instance. You can find benchmark results in the original PR which may help to select you a configuration, but they are bit outdated, because our throughput has improved since then! Releasing Pools Programmatically If your application uses ImageSharp sporadically (eg. generating some images on startup, or on other non-frequent use-cases), you may want to release the retained pools using @\"SixLabors.ImageSharp.Memory.MemoryAllocator.ReleaseRetainedResources\": Configuration.Default.MemoryAllocator.ReleaseRetainedResources(); Using Multiple MemoryAllocator Instances in the Same Process You need to create and maintain your own @\"SixLabors.ImageSharp.Configuration\" instance, setting a specific MemoryAllocator on it. It's possible to pass custom Configuration instances to methods across our whole API."
  },
  "articles/imagesharp/pixelbuffers.html": {
    "href": "articles/imagesharp/pixelbuffers.html",
    "title": "Working with Pixel Buffers",
    "keywords": "Working with Pixel Buffers Setting individual pixels using indexers A very basic and readable way for manipulating individual pixels is to use the indexer either on Image<T> or ImageFrame<T> : using (Image<Rgba32> image = new Image<Rgba32>(400, 400)) { image[200, 200] = Rgba32.White; // also works on ImageFrame<T> } The idexer is much faster than the .GetPixel(x, y) and .SetPixel(x,y) methods of System.Drawing but, it's still quite slow. Efficient pixel manipulation If you want to achieve killer speed in your own low-level pixel manipulation routines, you should utilize the per-row methods. These methods take advantage of the brand-new Span<T> -based memory manipulation primitives from System.Memory , providing a fast, yet safe low-level solution to manipulate pixel data. This is how you can implement efficient row-by-row pixel manipulation: using SixLabors.ImageSharp; // ... using (Image<Rgba32> image = new Image<Rgba32>(400, 400)) { for (int y = 0; y < image.Height; y++) { Span<Rgba32> pixelRowSpan = image.GetPixelRowSpan(y); for (int x = 0; x < image.Width; x++) { pixelRowSpan[x] = new Rgba32(x/255, y/255, 50, 255); } } } Parallel, pixel-format agnostic image manipulation There is a way to process image data that is even faster than using the approach mentioned before, and that also has the advantage of working on images of any underlying pixel-format, in a completely transparent way: using the @\"SixLabors.ImageSharp.Processing.PixelRowDelegateExtensions.ProcessPixelRowsAsVector4(SixLabors.ImageSharp.Processing.IImageProcessingContext,SixLabors.ImageSharp.Processing.PixelRowOperation)\" APIs. This is how you can use this extension to manipulate an image: // ... image.Mutate(c => c.ProcessPixelRowsAsVector4(row => { for (int x = 0; x < row.Length; x++) { // We can apply any custom processing logic here row[x] = Vector4.SquareRoot(row[x]); } })); This API receives a @\"SixLabors.ImageSharp.Processing.PixelRowOperation\" instance as input, and uses it to modify the pixel data of the target image. It does so by automatically executing the input operation in parallel, on multiple pixel rows at the same time, to fully leverage the power of modern multicore CPUs. The ProcessPixelRowsAsVector4 extension also takes care of converting the pixel data to/from the Vector4 format, which means the same operation can be used to easily process images of any existing pixel-format, without having to implement the processing logic again for each of them. This extension offers the fastest, easiest and most flexible way to implement custom image processors in ImageSharp. Span<T> limitations Please be aware that Span<T> has a very specific limitation : it is a stack-only type! Read the Is There Anything Span Can’t Do?! section in this article for more details. A short summary of the limitations: Span can only live on the execution stack. Span cannot be boxed or put on the heap. Span cannot be used as a generic type argument. Span cannot be an instance field of a type that itself is not stack-only. Span cannot be used within asynchronous methods. Non-conformant code: Span<Rgba32> span = image.GetRowSpan(y); await Task.Run(() => { // ☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠ // ☠☠☠ BANG! YOU HAVE CAPTURED A SPAN ON THE HEAP! ☠☠☠ for (int i = 0; i < span.Length; i++) { span[i] = /* ... */; } }); Exporting raw pixel data from an Image<T> You can use @\"SixLabors.ImageSharp.Image`1.TryGetSinglePixelSpan*\" to access the whole contigous pixel buffer, for example, to copy the pixel data into an array. For large, multi-megapixel images, however, the data must be accessed and copied per row: if(image.TryGetSinglePixelSpan(out var pixelSpan)) { Rgba32[] pixelArray = pixelSpan.ToArray(); } Or: Rgba32[] pixelArray = /* your pixel buffer being reused */ if(image.TryGetSinglePixelSpan(out var pixelSpan)) { pixelSpan().CopyTo(pixelArray); } Or: if(image.TryGetSinglePixelSpan(out var pixelSpan)) { byte[] rgbaBytes = MemoryMarshal.AsBytes(pixelSpan()).ToArray(); } Loading raw pixel data into an Image<T> Rgba32[] rgbaData = GetMyRgbaArray(); using (var image = Image.LoadPixelData(rgbaData)) { // Work with the image } byte[] rgbaBytes = GetMyRgbaBytes(); using (var image = Image.LoadPixelData<Rgba32>(rgbaBytes)) { // Work with the image }"
  },
  "articles/imagesharp/pixelformats.html": {
    "href": "articles/imagesharp/pixelformats.html",
    "title": "Pixel Formats",
    "keywords": "Pixel Formats Why is @\"SixLabors.ImageSharp.Image`1\" a generic class? We support multiple pixel formats just like System.Drawing does. However, unlike their closed PixelFormat enumeration, our solution is extensible. A pixel is basically a small value object (struct), describing the color at a given point according to a pixel model we call Pixel Format. Image<TPixel> represents a pixel graphic bitmap stored as a generic, discontiguous memory block of pixels, of total size image.Width * image.Height . Note that while the image memory should be considered discontiguous by default, if the image is small enough (less than ~4GB in memory, on 64-bit), it will be stored in a single, continuous memory block for improved performance. The reason why there is additional support for discontiguous buffers is to allow images at super high resolution, which couldn't otherwise be loaded due to limitations to the maximum size of objects in the .NET runtime, even on 64-bit systems. In the case of multi-frame images multiple bitmaps are stored in image.Frames as ImageFrame<TPixel> instances. Choosing Pixel Formats Take a look at the various pixel formats available under @\"SixLabors.ImageSharp.PixelFormats#structs\" After picking the pixel format of your choice, use it as a generic argument for @\"SixLabors.ImageSharp.Image`1\", for example, by instantiating Image<Bgr24> . Defining Custom Pixel Formats Creating your own pixel format is a case of defining a struct implementing @\"SixLabors.ImageSharp.PixelFormats.IPixel`1\" and using it as a generic argument for @\"SixLabors.ImageSharp.Image`1\". Baseline batched pixel-conversion primitives are provided via @\"SixLabors.ImageSharp.PixelFormats.PixelOperations`1\" but it is possible to override those baseline versions with your own optimized implementation. Is it possible to store a pixel on a single bit for monochrome images? No. Our architecture does not allow sub-byte pixel formats at the moment. This feature is incredibly complex to implement, and you are going to pay the price of the low memory footprint in processing speed / CPU load. It is possible to decode into pixel formats like CMYK or CIELAB ? Unfortunately it's not possible and is unlikely to be in the future. Many image processing operations expect the pixels to be laid out in-memory in RGBA format. To manipulate images in exotic colorspaces we would have to translate each pixel to-and-from the colorspace multiple times, which would result in unusable performance and a loss of color information."
  },
  "articles/imagesharp/processing.html": {
    "href": "articles/imagesharp/processing.html",
    "title": "Processing Image Operations",
    "keywords": "Processing Image Operations The ImageSharp processing API is imperative. This means that the order in which you supply the individual processing operations is the order in which they are are compiled and applied. This allows the API to be very flexible, allowing you to combine processes in any order. Details of built in processing extensions can be found in the @\"SixLabors.ImageSharp.Processing\" documentation. Processing operations are implemented using one of two available method calls. Mutate and Clone The difference being that the former applies the given processing operations to the current image whereas the latter applies the operations to a deep copy of the original image. For example: Mutate using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; using (Image image = Image.Load(inStream)) { // Resize the given image in place and return it for chaining. // 'x' signifies the current image processing context. image.Mutate(x => x.Resize(image.Width / 2, image.Height / 2)); image.Save(outStream); } // Dispose - releasing memory into a memory pool ready for the next image you wish to process. Clone using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; using (Image image = Image.Load(inStream)) { // Create a deep copy of the given image, resize it, and return it for chaining. using (Image copy = image.Clone(x => x.Resize(image.Width / 2, image.Height / 2))) { copy.Save(outStream); } } // Dispose - releasing memory into a memory pool ready for the next image you wish to process. Common Examples Examples of common operations can be found in the following documentation pages. Resizing images using different options."
  },
  "articles/imagesharp/resize.html": {
    "href": "articles/imagesharp/resize.html",
    "title": "Resizing Images",
    "keywords": "Resizing Images Resizing an image is probably the most common processing operation that applications use. ImageSharp offers an incredibly flexible collection of resize options that allow developers to choose sizing algorithms, sampling algorithms, and gamma handling as well as other options. The Basics Resizing an image involves the process of creating and iterating through the pixels of a target image and sampling areas of a source image to choose what color to implement for each pixel. The sampling algorithm chosen affects the target color and can dramatically alter the result. Different samplers are usually chosen based upon the use case - For example NearestNeigbor is often used for fast, low quality thumbnail generation, Lanczos3 for high quality thumbnails due to it's sharpening effect, and Spline for high quality enlargement due to it's smoothing effect. With ImageSharp we default to Bicubic as it is a very robust algorithm offering good quality output when both reducing and enlarging images but you can easily set the algorithm when processing. A full list of out-of-the-box sampling algorithms can be found here : Resize the given image using the default Bicubic sampler. using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; using (Image image = Image.Load(inStream)) { int width = image.Width / 2; int height = image.Height / 2; image.Mutate(x => x.Resize(width, height)); image.Save(outPath); } Resize the given image using the Lanczos3 sampler: using SixLabors.ImageSharp; using SixLabors.ImageSharp.Processing; using SixLabors.ImageSharp.Formats.Png; //used only for the PNG encoder below using (Image image = Image.Load(inStream)) { int width = image.Width / 2; int height = image.Height / 2; image.Mutate(x => x.Resize(width, height, KnownResamplers.Lanczos3)); image.Save(outStream, new PngEncoder());//Replace Png encoder with the file format of choice } Note If you pass 0 as any of the values for width and height dimensions then ImageSharp will automatically determine the correct opposite dimensions size to preserve the original aspect ratio. Advanced Resizing In addition to basic resizing operations ImageSharp also offers more advanced features. Check out the @\"SixLabors.ImageSharp.Processing.ResizeOptions\" class for details."
  },
  "index.html": {
    "href": "index.html",
    "title": "Six Labors Documentation.",
    "keywords": "Six Labors Documentation. We aim to provide modern, cross-platform, incredibly powerful yet beautifully simple graphics libraries. Built against .NET Standard, our libraries can be used in device, cloud, and embedded/IoT scenarios. You can find tutorials, examples and API details covering all Six Labors projects. API documentation Detailed documentation for the entire API available across our projects. Conceptual Documentation Our graphics libraries are split into different projects. They cover different concerns separately, but there is strong cohesion in order to provide the best developer experience. You can find documentation for each project in the links below. ImageSharp Fully featured 2D graphics API Learn More > ImageSharp.Drawing 2D polygon Manipulation and Drawing. Learn More > ImageSharp.Web ASP.NET Core Image Manipulation Middleware. Learn More > Fonts Font Loading and Drawing API. Learn More > Examples Repository We have implemented short self-contained sample projects for a few specific use cases, including: Avatar with rounded corners Crops rounded corners of a source image leaving a nice rounded avatar. Draw watermark on image Draw water mark over an image automaticaly scaling the font size to fill the avalible space. Change default encoder options Provides an example on how you go about switching out the registered encoder for a file format and changing its default options in the process. Draw text along a path Draw some text following the contours of a path."
  }
}